
AMP_PCBv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08008ac0  08008ac0  00009ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d48  08008d48  0000a09c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d48  08008d48  00009d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d50  08008d50  0000a09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d50  08008d50  00009d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d54  08008d54  00009d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08008d58  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000009c  08008df4  0000a09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08008df4  0000a76c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d1d  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b8b  00000000  00000000  0001fde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00023978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec7  00000000  00000000  00024c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025df5  00000000  00000000  00025b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191e7  00000000  00000000  0004b934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e091a  00000000  00000000  00064b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145435  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  00145478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008aa8 	.word	0x08008aa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08008aa8 	.word	0x08008aa8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000d9c:	b4b0      	push	{r4, r5, r7}
 8000d9e:	b08f      	sub	sp, #60	@ 0x3c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000da4:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000daa:	2307      	movs	r3, #7
 8000dac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000dbc:	23ff      	movs	r3, #255	@ 0xff
 8000dbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000dc2:	2364      	movs	r3, #100	@ 0x64
 8000dc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	461d      	mov	r5, r3
 8000dd0:	f107 040c 	add.w	r4, r7, #12
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000de0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	373c      	adds	r7, #60	@ 0x3c
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bcb0      	pop	{r4, r5, r7}
 8000dec:	4770      	bx	lr

08000dee <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6898      	ldr	r0, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	899b      	ldrh	r3, [r3, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	f003 fb21 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f002 f9e0 	bl	80031cc <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6898      	ldr	r0, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	899b      	ldrh	r3, [r3, #12]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4619      	mov	r1, r3
 8000e18:	f003 fb16 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e1c:	2064      	movs	r0, #100	@ 0x64
 8000e1e:	f002 f9d5 	bl	80031cc <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000e34:	2101      	movs	r1, #1
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f9ff 	bl	800123a <LoRa_read>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d107      	bne.n	8000e5a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e4a:	7bbb      	ldrb	r3, [r7, #14]
 8000e4c:	f023 0307 	bic.w	r3, r3, #7
 8000e50:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
 8000e58:	e03e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10c      	bne.n	8000e7a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e64:	f023 0307 	bic.w	r3, r3, #7
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	61da      	str	r2, [r3, #28]
 8000e78:	e02e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d10c      	bne.n	8000e9a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e84:	f023 0307 	bic.w	r3, r3, #7
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f043 0303 	orr.w	r3, r3, #3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2203      	movs	r2, #3
 8000e96:	61da      	str	r2, [r3, #28]
 8000e98:	e01e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	d10c      	bne.n	8000eba <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ea4:	f023 0307 	bic.w	r3, r3, #7
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	f043 0305 	orr.w	r3, r3, #5
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	61da      	str	r2, [r3, #28]
 8000eb8:	e00e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d10b      	bne.n	8000ed8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ec4:	f023 0307 	bic.w	r3, r3, #7
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	f043 0306 	orr.w	r3, r3, #6
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2206      	movs	r2, #6
 8000ed6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	461a      	mov	r2, r3
 8000edc:	2101      	movs	r1, #1
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f9c5 	bl	800126e <LoRa_write>
	//HAL_Delay(10);
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	889b      	ldrh	r3, [r3, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	f003 fa9e 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6998      	ldr	r0, [r3, #24]
 8000f10:	88fa      	ldrh	r2, [r7, #6]
 8000f12:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	f004 f995 	bl	8005246 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f1c:	bf00      	nop
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fd9a 	bl	8005a5c <HAL_SPI_GetState>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d1f7      	bne.n	8000f1e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6998      	ldr	r0, [r3, #24]
 8000f32:	8b3a      	ldrh	r2, [r7, #24]
 8000f34:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f38:	6839      	ldr	r1, [r7, #0]
 8000f3a:	f004 fac7 	bl	80054cc <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f3e:	bf00      	nop
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fd89 	bl	8005a5c <HAL_SPI_GetState>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1f7      	bne.n	8000f40 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f003 fa74 	bl	8004448 <HAL_GPIO_WritePin>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	4613      	mov	r3, r2
 8000f76:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	889b      	ldrh	r3, [r3, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	4619      	mov	r1, r3
 8000f84:	f003 fa60 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6998      	ldr	r0, [r3, #24]
 8000f8c:	88fa      	ldrh	r2, [r7, #6]
 8000f8e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	f004 f957 	bl	8005246 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f98:	bf00      	nop
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fd5c 	bl	8005a5c <HAL_SPI_GetState>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d1f7      	bne.n	8000f9a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6998      	ldr	r0, [r3, #24]
 8000fae:	8b3a      	ldrh	r2, [r7, #24]
 8000fb0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	f004 f946 	bl	8005246 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fba:	bf00      	nop
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fd4b 	bl	8005a5c <HAL_SPI_GetState>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d1f7      	bne.n	8000fbc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	889b      	ldrh	r3, [r3, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f003 fa36 	bl	8004448 <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000ff0:	2126      	movs	r1, #38	@ 0x26
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f921 	bl	800123a <LoRa_read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e003      	b.n	8001014 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	f023 0308 	bic.w	r3, r3, #8
 8001012:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	461a      	mov	r2, r3
 8001018:	2126      	movs	r1, #38	@ 0x26
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f927 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f002 f8d3 	bl	80031cc <HAL_Delay>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	@ 0x58
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <LoRa_setAutoLDO+0x68>)
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4611      	mov	r1, r2
 8001040:	2250      	movs	r2, #80	@ 0x50
 8001042:	4618      	mov	r0, r3
 8001044:	f007 f8e4 	bl	8008210 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800104e:	461a      	mov	r2, r3
 8001050:	2301      	movs	r3, #1
 8001052:	4093      	lsls	r3, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa85 	bl	8000564 <__aeabi_i2d>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	3358      	adds	r3, #88	@ 0x58
 8001064:	443b      	add	r3, r7
 8001066:	3b50      	subs	r3, #80	@ 0x50
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff fc0e 	bl	800088c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fcf0 	bl	8000a5c <__aeabi_d2iz>
 800107c:	4603      	mov	r3, r0
 800107e:	2b10      	cmp	r3, #16
 8001080:	bfcc      	ite	gt
 8001082:	2301      	movgt	r3, #1
 8001084:	2300      	movle	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffaa 	bl	8000fe4 <LoRa_setLowDaraRateOptimization>
}
 8001090:	bf00      	nop
 8001092:	3758      	adds	r7, #88	@ 0x58
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08008ac0 	.word	0x08008ac0

0800109c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	04db      	lsls	r3, r3, #19
 80010aa:	115b      	asrs	r3, r3, #5
 80010ac:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2106      	movs	r1, #6
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f8d7 	bl	800126e <LoRa_write>
	HAL_Delay(5);
 80010c0:	2005      	movs	r0, #5
 80010c2:	f002 f883 	bl	80031cc <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	461a      	mov	r2, r3
 80010d0:	2107      	movs	r1, #7
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f8cb 	bl	800126e <LoRa_write>
	HAL_Delay(5);
 80010d8:	2005      	movs	r0, #5
 80010da:	f002 f877 	bl	80031cc <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	461a      	mov	r2, r3
 80010e6:	2108      	movs	r1, #8
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f8c0 	bl	800126e <LoRa_write>
	HAL_Delay(5);
 80010ee:	2005      	movs	r0, #5
 80010f0:	f002 f86c 	bl	80031cc <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b0c      	cmp	r3, #12
 800110a:	dd01      	ble.n	8001110 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800110c:	230c      	movs	r3, #12
 800110e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2b06      	cmp	r3, #6
 8001114:	dc01      	bgt.n	800111a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001116:	2307      	movs	r3, #7
 8001118:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800111a:	211e      	movs	r1, #30
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f88c 	bl	800123a <LoRa_read>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001126:	200a      	movs	r0, #10
 8001128:	f002 f850 	bl	80031cc <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	b2da      	uxtb	r2, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	461a      	mov	r2, r3
 8001144:	211e      	movs	r1, #30
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f891 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f002 f83d 	bl	80031cc <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff6c 	bl	8001030 <LoRa_setAutoLDO>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	461a      	mov	r2, r3
 8001170:	2109      	movs	r1, #9
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f87b 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f002 f827 	bl	80031cc <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2b2c      	cmp	r3, #44	@ 0x2c
 800119c:	d801      	bhi.n	80011a2 <LoRa_setOCP+0x1a>
		current = 45;
 800119e:	232d      	movs	r3, #45	@ 0x2d
 80011a0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80011a6:	d901      	bls.n	80011ac <LoRa_setOCP+0x24>
		current = 240;
 80011a8:	23f0      	movs	r3, #240	@ 0xf0
 80011aa:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b78      	cmp	r3, #120	@ 0x78
 80011b0:	d809      	bhi.n	80011c6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	3b2d      	subs	r3, #45	@ 0x2d
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <LoRa_setOCP+0x78>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1052      	asrs	r2, r2, #1
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e00b      	b.n	80011de <LoRa_setOCP+0x56>
	else if(current <= 240)
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2bf0      	cmp	r3, #240	@ 0xf0
 80011ca:	d808      	bhi.n	80011de <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	331e      	adds	r3, #30
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <LoRa_setOCP+0x78>)
 80011d2:	fb82 1203 	smull	r1, r2, r2, r3
 80011d6:	1092      	asrs	r2, r2, #2
 80011d8:	17db      	asrs	r3, r3, #31
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3320      	adds	r3, #32
 80011e2:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	461a      	mov	r2, r3
 80011e8:	210b      	movs	r1, #11
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f83f 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f001 ffeb 	bl	80031cc <HAL_Delay>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	66666667 	.word	0x66666667

08001204 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800120c:	211e      	movs	r1, #30
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f813 	bl	800123a <LoRa_read>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	f043 0307 	orr.w	r3, r3, #7
 800121e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	461a      	mov	r2, r3
 8001224:	211e      	movs	r1, #30
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f821 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f001 ffcd 	bl	80031cc <HAL_Delay>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af02      	add	r7, sp, #8
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800124c:	b2db      	uxtb	r3, r3
 800124e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001250:	f107 030f 	add.w	r3, r7, #15
 8001254:	f107 010e 	add.w	r1, r7, #14
 8001258:	2201      	movs	r2, #1
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe44 	bl	8000eec <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af02      	add	r7, sp, #8
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
 800127a:	4613      	mov	r3, r2
 800127c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800128c:	f107 030f 	add.w	r3, r7, #15
 8001290:	f107 010e 	add.w	r1, r7, #14
 8001294:	2201      	movs	r2, #1
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fe64 	bl	8000f68 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

	return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffee 	bl	80012a8 <LoRa_isvalid>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8096 	beq.w	8001400 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80012d4:	2100      	movs	r1, #0
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fda7 	bl	8000e2a <LoRa_gotoMode>
			HAL_Delay(10);
 80012dc:	200a      	movs	r0, #10
 80012de:	f001 ff75 	bl	80031cc <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80012e2:	2101      	movs	r1, #1
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffa8 	bl	800123a <LoRa_read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80012ee:	200a      	movs	r0, #10
 80012f0:	f001 ff6c 	bl	80031cc <HAL_Delay>
			data = read | 0x80;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012fa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	461a      	mov	r2, r3
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffb3 	bl	800126e <LoRa_write>
			HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f001 ff5f 	bl	80031cc <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fec1 	bl	800109c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff1c 	bl	8001160 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800132e:	4619      	mov	r1, r3
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff29 	bl	8001188 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001336:	2223      	movs	r2, #35	@ 0x23
 8001338:	210c      	movs	r1, #12
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff97 	bl	800126e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff5f 	bl	8001204 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fed4 	bl	80010fc <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001354:	22ff      	movs	r2, #255	@ 0xff
 8001356:	211f      	movs	r1, #31
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff88 	bl	800126e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	b2da      	uxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	461a      	mov	r2, r3
 800137e:	211d      	movs	r1, #29
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff74 	bl	800126e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fe52 	bl	8001030 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	2120      	movs	r1, #32
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff67 	bl	800126e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	2121      	movs	r1, #33	@ 0x21
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff5f 	bl	800126e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80013b0:	2140      	movs	r1, #64	@ 0x40
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff41 	bl	800123a <LoRa_read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80013c2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	461a      	mov	r2, r3
 80013c8:	2140      	movs	r1, #64	@ 0x40
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff4f 	bl	800126e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80013d0:	2101      	movs	r1, #1
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fd29 	bl	8000e2a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80013de:	200a      	movs	r0, #10
 80013e0:	f001 fef4 	bl	80031cc <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80013e4:	2142      	movs	r1, #66	@ 0x42
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff27 	bl	800123a <LoRa_read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d101      	bne.n	80013fa <LoRa_init+0x13c>
				return LORA_OK;
 80013f6:	23c8      	movs	r3, #200	@ 0xc8
 80013f8:	e004      	b.n	8001404 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80013fa:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80013fe:	e001      	b.n	8001404 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001400:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <App_StateMachine_Init>:
uint8_t throttle;			// throttle value
uint8_t steering;			// steering value

// function to be called before tick() function
void App_StateMachine_Init()
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b098      	sub	sp, #96	@ 0x60
 8001410:	af00      	add	r7, sp, #0
	// default variable values
	ticks_in_state = 0;
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <App_StateMachine_Init+0xc8>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	temp_data = 0;
 8001418:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <App_StateMachine_Init+0xcc>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
	autonomous = 0;
 800141e:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <App_StateMachine_Init+0xd0>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
	ebrake = 0;
 8001424:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <App_StateMachine_Init+0xd4>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
	throttle = 0;
 800142a:	4b2e      	ldr	r3, [pc, #184]	@ (80014e4 <App_StateMachine_Init+0xd8>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
	steering = 128;
 8001430:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <App_StateMachine_Init+0xdc>)
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	701a      	strb	r2, [r3, #0]
	// initialize UART driver
	Driver_UART_Init();
 8001436:	f000 fbbd 	bl	8001bb4 <Driver_UART_Init>
	// initialize LoRa
	LoRa lora;
	lora = newLoRa();
 800143a:	463b      	mov	r3, r7
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fcad 	bl	8000d9c <newLoRa>
 8001442:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001446:	463d      	mov	r5, r7
 8001448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001454:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	lora.CS_port = LORA_NSS_GPIO_Port;
 8001458:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <App_StateMachine_Init+0xe0>)
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
	lora.CS_pin = LORA_NSS_Pin;
 800145c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001460:	86bb      	strh	r3, [r7, #52]	@ 0x34
	lora.reset_port = LORA_RST_GPIO_Port;
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <App_StateMachine_Init+0xe0>)
 8001464:	63bb      	str	r3, [r7, #56]	@ 0x38
	lora.reset_pin = LORA_RST_Pin;
 8001466:	2310      	movs	r3, #16
 8001468:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	lora.DIO0_port = LORA_DIO0_GPIO_Port;
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <App_StateMachine_Init+0xe0>)
 800146c:	643b      	str	r3, [r7, #64]	@ 0x40
	lora.DIO0_pin = LORA_DIO0_Pin;
 800146e:	2320      	movs	r3, #32
 8001470:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	lora.hSPIx = &hspi2;
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <App_StateMachine_Init+0xe4>)
 8001476:	64bb      	str	r3, [r7, #72]	@ 0x48

	lora.frequency = 915;
 8001478:	f240 3393 	movw	r3, #915	@ 0x393
 800147c:	653b      	str	r3, [r7, #80]	@ 0x50

	LoRa_reset(&lora);
 800147e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fcb3 	bl	8000dee <LoRa_reset>
	uint16_t lora_status = LoRa_init(&lora);
 8001488:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff16 	bl	80012be <LoRa_init>
 8001492:	4603      	mov	r3, r0
 8001494:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	if (lora_status == LORA_OK)
 8001498:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800149c:	2bc8      	cmp	r3, #200	@ 0xc8
 800149e:	d104      	bne.n	80014aa <App_StateMachine_Init+0x9e>
	{
		Driver_UART_Transmit(NUCLEO, "LoRa OK\r\n\r\n");
 80014a0:	4914      	ldr	r1, [pc, #80]	@ (80014f4 <App_StateMachine_Init+0xe8>)
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 fbac 	bl	8001c00 <Driver_UART_Transmit>
 80014a8:	e003      	b.n	80014b2 <App_StateMachine_Init+0xa6>
	}
	else
	{
		Driver_UART_Transmit(NUCLEO, "LoRa FAILED\r\n\r\n");
 80014aa:	4913      	ldr	r1, [pc, #76]	@ (80014f8 <App_StateMachine_Init+0xec>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 fba7 	bl	8001c00 <Driver_UART_Transmit>
	}
	// turn all fans off (should be default state anyway)
	Driver_Fan_All_Off();
 80014b2:	f000 faa5 	bl	8001a00 <Driver_Fan_All_Off>
	// initialize e-brake
	Driver_EBrake_Init();
 80014b6:	f000 fa47 	bl	8001948 <Driver_EBrake_Init>
	// initialize steering
	Driver_Steering_Init(steering);
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <App_StateMachine_Init+0xdc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fb30 	bl	8001b24 <Driver_Steering_Init>
	// set current state to idle
	App_StateMachine_ChangeState(STATE_IDLE);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f9dd 	bl	8001884 <App_StateMachine_ChangeState>
}
 80014ca:	bf00      	nop
 80014cc:	3760      	adds	r7, #96	@ 0x60
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200000bc 	.word	0x200000bc
 80014d8:	200000c0 	.word	0x200000c0
 80014dc:	200000c4 	.word	0x200000c4
 80014e0:	200000c5 	.word	0x200000c5
 80014e4:	200000c6 	.word	0x200000c6
 80014e8:	200000c7 	.word	0x200000c7
 80014ec:	40020400 	.word	0x40020400
 80014f0:	20000204 	.word	0x20000204
 80014f4:	08008b10 	.word	0x08008b10
 80014f8:	08008b1c 	.word	0x08008b1c

080014fc <App_StateMachine_Tick>:

// function to be called on timer interrupt
void App_StateMachine_Tick()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b09c      	sub	sp, #112	@ 0x70
 8001500:	af00      	add	r7, sp, #0
	// statements to be called regardless of state
	ticks_in_state += 1;
 8001502:	4b99      	ldr	r3, [pc, #612]	@ (8001768 <App_StateMachine_Tick+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a97      	ldr	r2, [pc, #604]	@ (8001768 <App_StateMachine_Tick+0x26c>)
 800150a:	6013      	str	r3, [r2, #0]
	// run state-specific code
	switch (current_state)
 800150c:	4b97      	ldr	r3, [pc, #604]	@ (800176c <App_StateMachine_Tick+0x270>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b05      	cmp	r3, #5
 8001512:	f200 81ab 	bhi.w	800186c <App_StateMachine_Tick+0x370>
 8001516:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <App_StateMachine_Tick+0x20>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	08001535 	.word	0x08001535
 8001520:	080015a1 	.word	0x080015a1
 8001524:	08001795 	.word	0x08001795
 8001528:	08001845 	.word	0x08001845
 800152c:	0800184d 	.word	0x0800184d
 8001530:	0800185b 	.word	0x0800185b
	{
		case (STATE_IDLE):
		{
			// set status LEDs
			Driver_Status_LED_SetHex(0x1);
 8001534:	2001      	movs	r0, #1
 8001536:	f000 faa3 	bl	8001a80 <Driver_Status_LED_SetHex>
			// print prompt once
			if (ticks_in_state == 10)
 800153a:	4b8b      	ldr	r3, [pc, #556]	@ (8001768 <App_StateMachine_Tick+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d103      	bne.n	800154a <App_StateMachine_Tick+0x4e>
			{
				Driver_UART_Transmit(NUCLEO, "Press ENTER key with 5 seconds to enter console control mode.\r\n");
 8001542:	498b      	ldr	r1, [pc, #556]	@ (8001770 <App_StateMachine_Tick+0x274>)
 8001544:	2000      	movs	r0, #0
 8001546:	f000 fb5b 	bl	8001c00 <Driver_UART_Transmit>
			}

			// get current UART sequence
			unsigned char * uart_seq = Driver_UART_GetBuffer(NUCLEO);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 fbb8 	bl	8001cc0 <Driver_UART_GetBuffer>
 8001550:	6578      	str	r0, [r7, #84]	@ 0x54
			uint8_t uart_seq_tail = Driver_UART_GetTail(NUCLEO);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 fbce 	bl	8001cf4 <Driver_UART_GetTail>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			// check if ENTER pressed
			if ((uart_seq_tail > 0) && (uart_seq[uart_seq_tail - 1] == 0x0D))
 800155e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00a      	beq.n	800157c <App_StateMachine_Tick+0x80>
 8001566:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800156a:	3b01      	subs	r3, #1
 800156c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b0d      	cmp	r3, #13
 8001574:	d102      	bne.n	800157c <App_StateMachine_Tick+0x80>
			{
				App_StateMachine_ChangeState(STATE_CONSOLE);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 f984 	bl	8001884 <App_StateMachine_ChangeState>
			}

			// if no user input after 5 seconds, continue to correct state
			if (ticks_in_state > (5 * TICKS_PER_SEC))
 800157c:	4b7a      	ldr	r3, [pc, #488]	@ (8001768 <App_StateMachine_Tick+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001584:	f240 816d 	bls.w	8001862 <App_StateMachine_Tick+0x366>
			{
				if (autonomous)
 8001588:	4b7a      	ldr	r3, [pc, #488]	@ (8001774 <App_StateMachine_Tick+0x278>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <App_StateMachine_Tick+0x9c>
				{
					// autonomous control
					App_StateMachine_ChangeState(STATE_AUTO);
 8001590:	2002      	movs	r0, #2
 8001592:	f000 f977 	bl	8001884 <App_StateMachine_ChangeState>
				{
					// RC control
					App_StateMachine_ChangeState(STATE_RC);
				}
			}
			break;
 8001596:	e164      	b.n	8001862 <App_StateMachine_Tick+0x366>
					App_StateMachine_ChangeState(STATE_RC);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f973 	bl	8001884 <App_StateMachine_ChangeState>
			break;
 800159e:	e160      	b.n	8001862 <App_StateMachine_Tick+0x366>
		}

		case (STATE_CONSOLE):
		{
			// set status LEDs
			Driver_Status_LED_SetHex(0x2);
 80015a0:	2002      	movs	r0, #2
 80015a2:	f000 fa6d 	bl	8001a80 <Driver_Status_LED_SetHex>
			// print prompt once
			if (ticks_in_state == 10)
 80015a6:	4b70      	ldr	r3, [pc, #448]	@ (8001768 <App_StateMachine_Tick+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d103      	bne.n	80015b6 <App_StateMachine_Tick+0xba>
			{
				Driver_UART_Transmit(NUCLEO, "Enter pairs of [THROTTLE, STEERING] values. ESC to return to IDLE.\r\n");
 80015ae:	4972      	ldr	r1, [pc, #456]	@ (8001778 <App_StateMachine_Tick+0x27c>)
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 fb25 	bl	8001c00 <Driver_UART_Transmit>
			}
			// get current UART sequence
			unsigned char * uart_seq = Driver_UART_GetBuffer(NUCLEO);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 fb82 	bl	8001cc0 <Driver_UART_GetBuffer>
 80015bc:	65f8      	str	r0, [r7, #92]	@ 0x5c
			uint8_t uart_seq_tail = Driver_UART_GetTail(NUCLEO);
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 fb98 	bl	8001cf4 <Driver_UART_GetTail>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

			// check if ESC pressed
			if ((uart_seq_tail > 0) && (uart_seq[uart_seq_tail - 1] == 0x1B))
 80015ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00a      	beq.n	80015e8 <App_StateMachine_Tick+0xec>
 80015d2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b1b      	cmp	r3, #27
 80015e0:	d102      	bne.n	80015e8 <App_StateMachine_Tick+0xec>
			{
				// return to IDLE state
				App_StateMachine_ChangeState(STATE_IDLE);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f94e 	bl	8001884 <App_StateMachine_ChangeState>
			}

			// check if ENTER pressed
			if (uart_seq[uart_seq_tail - 1] == 0x0D)
 80015e8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80015ec:	3b01      	subs	r3, #1
 80015ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015f0:	4413      	add	r3, r2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b0d      	cmp	r3, #13
 80015f6:	f040 8136 	bne.w	8001866 <App_StateMachine_Tick+0x36a>
			{
				// check for correct length of sequence
				if ((uart_seq_tail >= 10) || (uart_seq_tail < 3))
 80015fa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80015fe:	2b09      	cmp	r3, #9
 8001600:	d803      	bhi.n	800160a <App_StateMachine_Tick+0x10e>
 8001602:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001606:	2b02      	cmp	r3, #2
 8001608:	d806      	bhi.n	8001618 <App_StateMachine_Tick+0x11c>
				{
					// invalid length
					Driver_UART_Transmit(NUCLEO, "Invalid values entered!\r\n");
 800160a:	495c      	ldr	r1, [pc, #368]	@ (800177c <App_StateMachine_Tick+0x280>)
 800160c:	2000      	movs	r0, #0
 800160e:	f000 faf7 	bl	8001c00 <Driver_UART_Transmit>
					// mark failure to avoid printing outside loop
					temp_data = 2;
 8001612:	4b5b      	ldr	r3, [pc, #364]	@ (8001780 <App_StateMachine_Tick+0x284>)
 8001614:	2202      	movs	r2, #2
 8001616:	601a      	str	r2, [r3, #0]
				}

				uint16_t throttle_temp = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
				uint16_t steering_temp = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
				// loop through buffer backwards and try to recreate values in decimal
				for (uint8_t char_num = 0; char_num < uart_seq_tail - 1; char_num++)
 8001624:	2300      	movs	r3, #0
 8001626:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800162a:	e05c      	b.n	80016e6 <App_StateMachine_Tick+0x1ea>
				{
					char curr_char = uart_seq[char_num];
 800162c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001630:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
					if (((curr_char < '0') || (curr_char > '9')) && (curr_char != ','))
 800163a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800163e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001640:	d903      	bls.n	800164a <App_StateMachine_Tick+0x14e>
 8001642:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001646:	2b39      	cmp	r3, #57	@ 0x39
 8001648:	d90b      	bls.n	8001662 <App_StateMachine_Tick+0x166>
 800164a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800164e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001650:	d007      	beq.n	8001662 <App_StateMachine_Tick+0x166>
					{
						// not a number or comma
						Driver_UART_Transmit(NUCLEO, "Invalid values entered!\r\n");
 8001652:	494a      	ldr	r1, [pc, #296]	@ (800177c <App_StateMachine_Tick+0x280>)
 8001654:	2000      	movs	r0, #0
 8001656:	f000 fad3 	bl	8001c00 <Driver_UART_Transmit>
						// mark failure to avoid printing outside loop
						temp_data = 2;
 800165a:	4b49      	ldr	r3, [pc, #292]	@ (8001780 <App_StateMachine_Tick+0x284>)
 800165c:	2202      	movs	r2, #2
 800165e:	601a      	str	r2, [r3, #0]
						break;
 8001660:	e048      	b.n	80016f4 <App_StateMachine_Tick+0x1f8>
					}
					// valid character
					if (curr_char == ',')
 8001662:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001666:	2b2c      	cmp	r3, #44	@ 0x2c
 8001668:	d10b      	bne.n	8001682 <App_StateMachine_Tick+0x186>
					{
						// prepare for next number
						throttle_temp /= 10;
 800166a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800166e:	4a45      	ldr	r2, [pc, #276]	@ (8001784 <App_StateMachine_Tick+0x288>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
						temp_data = 1;
 800167a:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <App_StateMachine_Tick+0x284>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e02c      	b.n	80016dc <App_StateMachine_Tick+0x1e0>
					}
					else if (temp_data == 0)
 8001682:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <App_StateMachine_Tick+0x284>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d112      	bne.n	80016b0 <App_StateMachine_Tick+0x1b4>
					{
						// need to populate throttle
						throttle_temp += curr_char - '0';
 800168a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800168e:	b29a      	uxth	r2, r3
 8001690:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001694:	4413      	add	r3, r2
 8001696:	b29b      	uxth	r3, r3
 8001698:	3b30      	subs	r3, #48	@ 0x30
 800169a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
						throttle_temp *= 10;
 800169e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80016a2:	461a      	mov	r2, r3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80016ae:	e015      	b.n	80016dc <App_StateMachine_Tick+0x1e0>
					}
					else if (temp_data == 1)
 80016b0:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <App_StateMachine_Tick+0x284>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d111      	bne.n	80016dc <App_StateMachine_Tick+0x1e0>
					{
						// need to populate steering
						steering_temp += curr_char - '0';
 80016b8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80016c2:	4413      	add	r3, r2
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	3b30      	subs	r3, #48	@ 0x30
 80016c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
						steering_temp *= 10;
 80016cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80016d0:	461a      	mov	r2, r3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
				for (uint8_t char_num = 0; char_num < uart_seq_tail - 1; char_num++)
 80016dc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80016e0:	3301      	adds	r3, #1
 80016e2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80016e6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80016ea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80016ee:	3b01      	subs	r3, #1
 80016f0:	429a      	cmp	r2, r3
 80016f2:	db9b      	blt.n	800162c <App_StateMachine_Tick+0x130>
					}
				}
				steering_temp /= 10;
 80016f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80016f8:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <App_StateMachine_Tick+0x288>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
				// check for overflow
				if ((throttle_temp > 255) || (steering_temp > 255))
 8001704:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001708:	2bff      	cmp	r3, #255	@ 0xff
 800170a:	d803      	bhi.n	8001714 <App_StateMachine_Tick+0x218>
 800170c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001710:	2bff      	cmp	r3, #255	@ 0xff
 8001712:	d906      	bls.n	8001722 <App_StateMachine_Tick+0x226>
				{
					Driver_UART_Transmit(NUCLEO, "Invalid values entered!\r\n");
 8001714:	4919      	ldr	r1, [pc, #100]	@ (800177c <App_StateMachine_Tick+0x280>)
 8001716:	2000      	movs	r0, #0
 8001718:	f000 fa72 	bl	8001c00 <Driver_UART_Transmit>
					// mark failure to avoid printing outside loop
					temp_data = 2;
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <App_StateMachine_Tick+0x284>)
 800171e:	2202      	movs	r2, #2
 8001720:	601a      	str	r2, [r3, #0]
				}

				// only run the following if input was valid
				if (temp_data == 1)
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <App_StateMachine_Tick+0x284>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d117      	bne.n	800175a <App_StateMachine_Tick+0x25e>
				{
					throttle = throttle_temp;
 800172a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <App_StateMachine_Tick+0x28c>)
 8001732:	701a      	strb	r2, [r3, #0]
					steering = steering_temp;
 8001734:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <App_StateMachine_Tick+0x290>)
 800173c:	701a      	strb	r2, [r3, #0]
					// print updated values to console
					char buf[80];
					sprintf(buf, "Throttle: %d, Steering: %d\r\n", throttle, steering);
 800173e:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <App_StateMachine_Tick+0x28c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <App_StateMachine_Tick+0x290>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4638      	mov	r0, r7
 800174a:	4911      	ldr	r1, [pc, #68]	@ (8001790 <App_StateMachine_Tick+0x294>)
 800174c:	f006 fd04 	bl	8008158 <siprintf>
					Driver_UART_Transmit(NUCLEO, buf);
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	2000      	movs	r0, #0
 8001756:	f000 fa53 	bl	8001c00 <Driver_UART_Transmit>
				}

				// reset for next iteration
				Driver_UART_ClearBuffer(NUCLEO);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 fae6 	bl	8001d2c <Driver_UART_ClearBuffer>
				temp_data = 0;
 8001760:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <App_StateMachine_Tick+0x284>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
			}
			break;
 8001766:	e07e      	b.n	8001866 <App_StateMachine_Tick+0x36a>
 8001768:	200000bc 	.word	0x200000bc
 800176c:	200000b8 	.word	0x200000b8
 8001770:	08008b2c 	.word	0x08008b2c
 8001774:	200000c4 	.word	0x200000c4
 8001778:	08008b6c 	.word	0x08008b6c
 800177c:	08008bb4 	.word	0x08008bb4
 8001780:	200000c0 	.word	0x200000c0
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	200000c6 	.word	0x200000c6
 800178c:	200000c7 	.word	0x200000c7
 8001790:	08008bd0 	.word	0x08008bd0
		}

		case (STATE_AUTO):
		{
			// set status LEDs
			Driver_Status_LED_SetHex(0x3);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f973 	bl	8001a80 <Driver_Status_LED_SetHex>
			// get current UART sequence
			unsigned char * uart_seq = Driver_UART_GetBuffer(JETSON);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 fa90 	bl	8001cc0 <Driver_UART_GetBuffer>
 80017a0:	6678      	str	r0, [r7, #100]	@ 0x64
			uint8_t uart_seq_tail = Driver_UART_GetTail(JETSON);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 faa6 	bl	8001cf4 <Driver_UART_GetTail>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
			// make sure enough bytes have arrived and last byte is end byte
			if ((uart_seq_tail >= (JETSON_UART_SEQ_LENGTH + 2)) && (uart_seq[uart_seq_tail - 1] == JETSON_UART_END_BYTE))
 80017ae:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d959      	bls.n	800186a <App_StateMachine_Tick+0x36e>
 80017b6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2bff      	cmp	r3, #255	@ 0xff
 80017c4:	d151      	bne.n	800186a <App_StateMachine_Tick+0x36e>
			{
				// check if first byte was the start byte
				if (uart_seq[uart_seq_tail - JETSON_UART_SEQ_LENGTH - 2] == JETSON_UART_START_BYTE)
 80017c6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80017ca:	3b04      	subs	r3, #4
 80017cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80017d4:	d12e      	bne.n	8001834 <App_StateMachine_Tick+0x338>
				{
					// first byte after start byte is throttle
					throttle = uart_seq[(uart_seq_tail - JETSON_UART_SEQ_LENGTH - 2) + 1];
 80017d6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80017da:	3b03      	subs	r3, #3
 80017dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80017de:	4413      	add	r3, r2
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <App_StateMachine_Tick+0x378>)
 80017e4:	701a      	strb	r2, [r3, #0]
					throttle <<= 1; // multiply by 2 (map 128-255 to 0-255)
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <App_StateMachine_Tick+0x378>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <App_StateMachine_Tick+0x378>)
 80017f0:	701a      	strb	r2, [r3, #0]
					// next byte is steering
					steering = uart_seq[(uart_seq_tail - JETSON_UART_SEQ_LENGTH - 2) + 2];
 80017f2:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80017f6:	3b02      	subs	r3, #2
 80017f8:	461a      	mov	r2, r3
 80017fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017fc:	4413      	add	r3, r2
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <App_StateMachine_Tick+0x37c>)
 8001802:	701a      	strb	r2, [r3, #0]
					steering <<= 1; // multiply by 2 (map 128-255 to 0-255)
 8001804:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <App_StateMachine_Tick+0x37c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <App_StateMachine_Tick+0x37c>)
 800180e:	701a      	strb	r2, [r3, #0]
					// print received values to debug UART interface
					char buf[80];
					sprintf(buf, "Throttle: %d, Steering: %d\r\n", throttle, steering);
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <App_StateMachine_Tick+0x378>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <App_StateMachine_Tick+0x37c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4638      	mov	r0, r7
 800181c:	4917      	ldr	r1, [pc, #92]	@ (800187c <App_StateMachine_Tick+0x380>)
 800181e:	f006 fc9b 	bl	8008158 <siprintf>
					Driver_UART_Transmit(NUCLEO, buf);
 8001822:	463b      	mov	r3, r7
 8001824:	4619      	mov	r1, r3
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f9ea 	bl	8001c00 <Driver_UART_Transmit>
					// clear buffer for next data
					Driver_UART_ClearBuffer(JETSON);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 fa7d 	bl	8001d2c <Driver_UART_ClearBuffer>
					Driver_UART_Transmit(NUCLEO, "Incorrect start bit!\r\n");
					// clear buffer for next data
					Driver_UART_ClearBuffer(JETSON);
				}
			}
			break;
 8001832:	e01a      	b.n	800186a <App_StateMachine_Tick+0x36e>
					Driver_UART_Transmit(NUCLEO, "Incorrect start bit!\r\n");
 8001834:	4912      	ldr	r1, [pc, #72]	@ (8001880 <App_StateMachine_Tick+0x384>)
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f9e2 	bl	8001c00 <Driver_UART_Transmit>
					Driver_UART_ClearBuffer(JETSON);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 fa75 	bl	8001d2c <Driver_UART_ClearBuffer>
			break;
 8001842:	e012      	b.n	800186a <App_StateMachine_Tick+0x36e>
		}

		case (STATE_RC):
		{
			Driver_Status_LED_SetHex(0x4);
 8001844:	2004      	movs	r0, #4
 8001846:	f000 f91b 	bl	8001a80 <Driver_Status_LED_SetHex>
			break;
 800184a:	e00f      	b.n	800186c <App_StateMachine_Tick+0x370>
		}

		case (STATE_EBRAKE):
		{
			Driver_Status_LED_SetHex(0x5);
 800184c:	2005      	movs	r0, #5
 800184e:	f000 f917 	bl	8001a80 <Driver_Status_LED_SetHex>
			App_StateMachine_ChangeState(STATE_ERROR);
 8001852:	2005      	movs	r0, #5
 8001854:	f000 f816 	bl	8001884 <App_StateMachine_ChangeState>
			break;
 8001858:	e008      	b.n	800186c <App_StateMachine_Tick+0x370>
		}

		case (STATE_ERROR):
		{
			Driver_Status_LED_SetHex(0x8);
 800185a:	2008      	movs	r0, #8
 800185c:	f000 f910 	bl	8001a80 <Driver_Status_LED_SetHex>
			break;
 8001860:	e004      	b.n	800186c <App_StateMachine_Tick+0x370>
			break;
 8001862:	bf00      	nop
 8001864:	e002      	b.n	800186c <App_StateMachine_Tick+0x370>
			break;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <App_StateMachine_Tick+0x370>
			break;
 800186a:	bf00      	nop
		}
	}
}
 800186c:	bf00      	nop
 800186e:	3770      	adds	r7, #112	@ 0x70
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200000c6 	.word	0x200000c6
 8001878:	200000c7 	.word	0x200000c7
 800187c:	08008bd0 	.word	0x08008bd0
 8001880:	08008bf0 	.word	0x08008bf0

08001884 <App_StateMachine_ChangeState>:

void App_StateMachine_ChangeState(State_T new_state)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	// statements to be called regardless of state transition
	ticks_in_state = 0;
 800188e:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <App_StateMachine_ChangeState+0x9c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	temp_data = 0;
 8001894:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <App_StateMachine_ChangeState+0xa0>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	Driver_UART_ClearBuffer(NUCLEO);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 fa46 	bl	8001d2c <Driver_UART_ClearBuffer>
	Driver_UART_ClearBuffer(JETSON);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f000 fa43 	bl	8001d2c <Driver_UART_ClearBuffer>
	// indicate changing state
	switch (new_state)
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d82d      	bhi.n	8001908 <App_StateMachine_ChangeState+0x84>
 80018ac:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <App_StateMachine_ChangeState+0x30>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018d7 	.word	0x080018d7
 80018bc:	080018e1 	.word	0x080018e1
 80018c0:	080018eb 	.word	0x080018eb
 80018c4:	080018f5 	.word	0x080018f5
 80018c8:	080018ff 	.word	0x080018ff
	{
		case (STATE_IDLE):
		{
			Driver_UART_Transmit(NUCLEO, "Entering IDLE state\r\n\r\n");
 80018cc:	4916      	ldr	r1, [pc, #88]	@ (8001928 <App_StateMachine_ChangeState+0xa4>)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f996 	bl	8001c00 <Driver_UART_Transmit>
			break;
 80018d4:	e01d      	b.n	8001912 <App_StateMachine_ChangeState+0x8e>
		}

		case (STATE_CONSOLE):
		{
			Driver_UART_Transmit(NUCLEO, "Entering CONSOLE state\r\n\r\n");
 80018d6:	4915      	ldr	r1, [pc, #84]	@ (800192c <App_StateMachine_ChangeState+0xa8>)
 80018d8:	2000      	movs	r0, #0
 80018da:	f000 f991 	bl	8001c00 <Driver_UART_Transmit>
			break;
 80018de:	e018      	b.n	8001912 <App_StateMachine_ChangeState+0x8e>
		}

		case (STATE_AUTO):
		{
			Driver_UART_Transmit(NUCLEO, "Entering AUTO state\r\n\r\n");
 80018e0:	4913      	ldr	r1, [pc, #76]	@ (8001930 <App_StateMachine_ChangeState+0xac>)
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f98c 	bl	8001c00 <Driver_UART_Transmit>
			break;
 80018e8:	e013      	b.n	8001912 <App_StateMachine_ChangeState+0x8e>
		}

		case (STATE_RC):
		{
			Driver_UART_Transmit(NUCLEO, "Entering RC state\r\n\r\n");
 80018ea:	4912      	ldr	r1, [pc, #72]	@ (8001934 <App_StateMachine_ChangeState+0xb0>)
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 f987 	bl	8001c00 <Driver_UART_Transmit>
			break;
 80018f2:	e00e      	b.n	8001912 <App_StateMachine_ChangeState+0x8e>
		}

		case (STATE_EBRAKE):
		{
			Driver_UART_Transmit(NUCLEO, "Entering EBRAKE state\r\n\r\n");
 80018f4:	4910      	ldr	r1, [pc, #64]	@ (8001938 <App_StateMachine_ChangeState+0xb4>)
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f982 	bl	8001c00 <Driver_UART_Transmit>
			break;
 80018fc:	e009      	b.n	8001912 <App_StateMachine_ChangeState+0x8e>
		}

		case (STATE_ERROR):
		{
			Driver_UART_Transmit(NUCLEO, "Entering ERROR state\r\n\r\n");
 80018fe:	490f      	ldr	r1, [pc, #60]	@ (800193c <App_StateMachine_ChangeState+0xb8>)
 8001900:	2000      	movs	r0, #0
 8001902:	f000 f97d 	bl	8001c00 <Driver_UART_Transmit>
			break;
 8001906:	e004      	b.n	8001912 <App_StateMachine_ChangeState+0x8e>
		}

		default:
		{
			Driver_UART_Transmit(NUCLEO, "Invalid state!\r\n\r\n");
 8001908:	490d      	ldr	r1, [pc, #52]	@ (8001940 <App_StateMachine_ChangeState+0xbc>)
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f978 	bl	8001c00 <Driver_UART_Transmit>
			break;
 8001910:	bf00      	nop
		}
	}
	// change state
	current_state = new_state;
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <App_StateMachine_ChangeState+0xc0>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	7013      	strb	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200000bc 	.word	0x200000bc
 8001924:	200000c0 	.word	0x200000c0
 8001928:	08008c08 	.word	0x08008c08
 800192c:	08008c20 	.word	0x08008c20
 8001930:	08008c3c 	.word	0x08008c3c
 8001934:	08008c54 	.word	0x08008c54
 8001938:	08008c6c 	.word	0x08008c6c
 800193c:	08008c88 	.word	0x08008c88
 8001940:	08008ca4 	.word	0x08008ca4
 8001944:	200000b8 	.word	0x200000b8

08001948 <Driver_EBrake_Init>:
#include "main.h"
#include "driver_ebrake.h"

// function to initialize the e-brake (retract for a set period of time)
void Driver_EBrake_Init()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	// retract e-brake
	Driver_EBrake_Retract();
 800194c:	f000 f808 	bl	8001960 <Driver_EBrake_Retract>
	// let e-brake retract for some time
	HAL_Delay(2000);
 8001950:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001954:	f001 fc3a 	bl	80031cc <HAL_Delay>
	// turn e-brake off
	Driver_EBrake_Off();
 8001958:	f000 f822 	bl	80019a0 <Driver_EBrake_Off>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <Driver_EBrake_Retract>:
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
}

// function to retract the e-brake servo
void Driver_EBrake_Retract()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800196a:	480b      	ldr	r0, [pc, #44]	@ (8001998 <Driver_EBrake_Retract+0x38>)
 800196c:	f002 fd6c 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 1);
 8001970:	2201      	movs	r2, #1
 8001972:	2140      	movs	r1, #64	@ 0x40
 8001974:	4808      	ldr	r0, [pc, #32]	@ (8001998 <Driver_EBrake_Retract+0x38>)
 8001976:	f002 fd67 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001980:	4806      	ldr	r0, [pc, #24]	@ (800199c <Driver_EBrake_Retract+0x3c>)
 8001982:	f002 fd61 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <Driver_EBrake_Retract+0x3c>)
 800198e:	f002 fd5b 	bl	8004448 <HAL_GPIO_WritePin>
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020800 	.word	0x40020800
 800199c:	40020400 	.word	0x40020400

080019a0 <Driver_EBrake_Off>:

// function to turn the e-brake servo off (no drive command)
void Driver_EBrake_Off()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019aa:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <Driver_EBrake_Off+0x38>)
 80019ac:	f002 fd4c 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2140      	movs	r1, #64	@ 0x40
 80019b4:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <Driver_EBrake_Off+0x38>)
 80019b6:	f002 fd47 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c0:	4806      	ldr	r0, [pc, #24]	@ (80019dc <Driver_EBrake_Off+0x3c>)
 80019c2:	f002 fd41 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019cc:	4803      	ldr	r0, [pc, #12]	@ (80019dc <Driver_EBrake_Off+0x3c>)
 80019ce:	f002 fd3b 	bl	8004448 <HAL_GPIO_WritePin>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020400 	.word	0x40020400

080019e0 <Driver_Fan_Off>:
	HAL_GPIO_WritePin(fan.port, fan.pin, 1);
}

// function to turn a fan off
void Driver_Fan_Off(Fan_T fan)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	463b      	mov	r3, r7
 80019e8:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(fan.port, fan.pin, 0);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	88b9      	ldrh	r1, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fd28 	bl	8004448 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <Driver_Fan_All_Off>:
	Driver_Fan_On(FAN4);
}

// toggle to turn all fans off
void Driver_Fan_All_Off()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	Driver_Fan_Off(FAN1);
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <Driver_Fan_All_Off+0x30>)
 8001a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a0a:	f7ff ffe9 	bl	80019e0 <Driver_Fan_Off>
	Driver_Fan_Off(FAN2);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <Driver_Fan_All_Off+0x34>)
 8001a10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a14:	f7ff ffe4 	bl	80019e0 <Driver_Fan_Off>
	Driver_Fan_Off(FAN3);
 8001a18:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <Driver_Fan_All_Off+0x38>)
 8001a1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a1e:	f7ff ffdf 	bl	80019e0 <Driver_Fan_Off>
	Driver_Fan_Off(FAN4);
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <Driver_Fan_All_Off+0x3c>)
 8001a24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a28:	f7ff ffda 	bl	80019e0 <Driver_Fan_Off>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000010 	.word	0x20000010
 8001a3c:	20000018 	.word	0x20000018

08001a40 <Driver_Status_LED_On>:
Stat_LED_T STAT3 = { .port = STAT3_GPIO_Port, .pin = STAT3_Pin };
Stat_LED_T STAT4 = { .port = STAT4_GPIO_Port, .pin = STAT4_Pin };

// function to turn a status LED on
void Driver_Status_LED_On(Stat_LED_T led)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	463b      	mov	r3, r7
 8001a48:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 1);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	88b9      	ldrh	r1, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fcf8 	bl	8004448 <HAL_GPIO_WritePin>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <Driver_Status_LED_Off>:

// function to turn a status LED off
void Driver_Status_LED_Off(Stat_LED_T led)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	463b      	mov	r3, r7
 8001a68:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 0);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	88b9      	ldrh	r1, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fce8 	bl	8004448 <HAL_GPIO_WritePin>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <Driver_Status_LED_SetHex>:

// function to convert a 4-bit hex value into LED status function calls
void Driver_Status_LED_SetHex(uint8_t value)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	if (value & 0x1)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <Driver_Status_LED_SetHex+0x20>
	{
		Driver_Status_LED_On(STAT1);
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <Driver_Status_LED_SetHex+0x94>)
 8001a96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a9a:	f7ff ffd1 	bl	8001a40 <Driver_Status_LED_On>
 8001a9e:	e004      	b.n	8001aaa <Driver_Status_LED_SetHex+0x2a>
	}
	else
	{
		Driver_Status_LED_Off(STAT1);
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <Driver_Status_LED_SetHex+0x94>)
 8001aa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aa6:	f7ff ffdb 	bl	8001a60 <Driver_Status_LED_Off>
	}

	if (value & 0x2)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <Driver_Status_LED_SetHex+0x40>
	{
		Driver_Status_LED_On(STAT2);
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <Driver_Status_LED_SetHex+0x98>)
 8001ab6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aba:	f7ff ffc1 	bl	8001a40 <Driver_Status_LED_On>
 8001abe:	e004      	b.n	8001aca <Driver_Status_LED_SetHex+0x4a>
	}
	else
	{
		Driver_Status_LED_Off(STAT2);
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <Driver_Status_LED_SetHex+0x98>)
 8001ac2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac6:	f7ff ffcb 	bl	8001a60 <Driver_Status_LED_Off>
	}

	if (value & 0x4)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <Driver_Status_LED_SetHex+0x60>
	{
		Driver_Status_LED_On(STAT3);
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <Driver_Status_LED_SetHex+0x9c>)
 8001ad6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ada:	f7ff ffb1 	bl	8001a40 <Driver_Status_LED_On>
 8001ade:	e004      	b.n	8001aea <Driver_Status_LED_SetHex+0x6a>
	}
	else
	{
		Driver_Status_LED_Off(STAT3);
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <Driver_Status_LED_SetHex+0x9c>)
 8001ae2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ae6:	f7ff ffbb 	bl	8001a60 <Driver_Status_LED_Off>
	}

	if (value & 0x8)
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <Driver_Status_LED_SetHex+0x80>
	{
		Driver_Status_LED_On(STAT4);
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <Driver_Status_LED_SetHex+0xa0>)
 8001af6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001afa:	f7ff ffa1 	bl	8001a40 <Driver_Status_LED_On>
	}
	else
	{
		Driver_Status_LED_Off(STAT4);
	}
}
 8001afe:	e004      	b.n	8001b0a <Driver_Status_LED_SetHex+0x8a>
		Driver_Status_LED_Off(STAT4);
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <Driver_Status_LED_SetHex+0xa0>)
 8001b02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b06:	f7ff ffab 	bl	8001a60 <Driver_Status_LED_Off>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000020 	.word	0x20000020
 8001b18:	20000028 	.word	0x20000028
 8001b1c:	20000030 	.word	0x20000030
 8001b20:	20000038 	.word	0x20000038

08001b24 <Driver_Steering_Init>:
 * Input B+:
 * Used as output (PWM/frequency command for position)
 */

void Driver_Steering_Init(uint8_t duty_cycle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	// set direction pins for level shifters
	HAL_GPIO_WritePin(STR_INPUTA__DIR_GPIO_Port, STR_INPUTA__DIR_Pin, 1); // input A+ as output
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2104      	movs	r1, #4
 8001b32:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <Driver_Steering_Init+0x4c>)
 8001b34:	f002 fc88 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STR_INPUTB__DIR_GPIO_Port, STR_INPUTB__DIR_Pin, 1); // input B+ as output
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <Driver_Steering_Init+0x50>)
 8001b3e:	f002 fc83 	bl	8004448 <HAL_GPIO_WritePin>
	// set hard-coded outputs
	HAL_GPIO_WritePin(STR_EN__GPIO_Port, STR_EN__Pin, 1); // enable pin high
 8001b42:	2201      	movs	r2, #1
 8001b44:	2101      	movs	r1, #1
 8001b46:	480a      	ldr	r0, [pc, #40]	@ (8001b70 <Driver_Steering_Init+0x4c>)
 8001b48:	f002 fc7e 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STR_INPUTA__GPIO_Port, STR_INPUTA__Pin, 0); // input A+ low
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4807      	ldr	r0, [pc, #28]	@ (8001b70 <Driver_Steering_Init+0x4c>)
 8001b52:	f002 fc79 	bl	8004448 <HAL_GPIO_WritePin>
	// set default PWM values
	Driver_Steering_SetDutyCycle(duty_cycle);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f80f 	bl	8001b7c <Driver_Steering_SetDutyCycle>
	// enable PWM output channel
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <Driver_Steering_Init+0x54>)
 8001b62:	f004 ffb5 	bl	8006ad0 <HAL_TIMEx_PWMN_Start>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	20000260 	.word	0x20000260

08001b7c <Driver_Steering_SetDutyCycle>:

void Driver_Steering_SetDutyCycle(uint8_t duty_cycle)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	// Input validation for duty cycle
	// Need to clamp from 5 to 250 to avoid no edges (steering servo doesn't like that)
	if (duty_cycle > STEERING_MAX_DUTY_CYCLE)
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2bfa      	cmp	r3, #250	@ 0xfa
 8001b8a:	d902      	bls.n	8001b92 <Driver_Steering_SetDutyCycle+0x16>
	{
		duty_cycle = STEERING_MAX_DUTY_CYCLE;
 8001b8c:	23fa      	movs	r3, #250	@ 0xfa
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	e004      	b.n	8001b9c <Driver_Steering_SetDutyCycle+0x20>
	}
	else if (duty_cycle < STEERING_MIN_DUTY_CYCLE)
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d801      	bhi.n	8001b9c <Driver_Steering_SetDutyCycle+0x20>
	{
		duty_cycle = STEERING_MIN_DUTY_CYCLE;
 8001b98:	2305      	movs	r3, #5
 8001b9a:	71fb      	strb	r3, [r7, #7]
	}

	// Set compare (8-Bit Resolution)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <Driver_Steering_SetDutyCycle+0x34>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	79fa      	ldrb	r2, [r7, #7]
 8001ba2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	20000260 	.word	0x20000260

08001bb4 <Driver_UART_Init>:

char uart_sending = 0;	// flag to indicate still sending

// function to initialize UART driver
void Driver_UART_Init()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	// default variable values
	uart2_recv_buf_tail = 0;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <Driver_UART_Init+0x30>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
	uart4_recv_buf_tail = 0;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <Driver_UART_Init+0x34>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
	// start listening for interrupts
	HAL_UART_Receive_IT(&huart2, (unsigned char *) uart2_recv_buf, 1);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4909      	ldr	r1, [pc, #36]	@ (8001bec <Driver_UART_Init+0x38>)
 8001bc8:	4809      	ldr	r0, [pc, #36]	@ (8001bf0 <Driver_UART_Init+0x3c>)
 8001bca:	f005 f992 	bl	8006ef2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (unsigned char *) uart4_recv_buf, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <Driver_UART_Init+0x40>)
 8001bd2:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <Driver_UART_Init+0x44>)
 8001bd4:	f005 f98d 	bl	8006ef2 <HAL_UART_Receive_IT>
	// "hello" message
	Driver_UART_Transmit(NUCLEO, "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n");
 8001bd8:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <Driver_UART_Init+0x48>)
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f000 f810 	bl	8001c00 <Driver_UART_Transmit>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200001b8 	.word	0x200001b8
 8001be8:	200001b9 	.word	0x200001b9
 8001bec:	20000118 	.word	0x20000118
 8001bf0:	20000458 	.word	0x20000458
 8001bf4:	20000168 	.word	0x20000168
 8001bf8:	200003c8 	.word	0x200003c8
 8001bfc:	08008cb8 	.word	0x08008cb8

08001c00 <Driver_UART_Transmit>:

// function to send a string message over UART
void Driver_UART_Transmit(UART_Location_T dest, char * message)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
	// mark sending flag
	uart_sending = 1;
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <Driver_UART_Transmit+0xa0>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
	// send to correct destination
	if (dest == NUCLEO)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11e      	bne.n	8001c56 <Driver_UART_Transmit+0x56>
	{
		if (message == NULL)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <Driver_UART_Transmit+0x38>
		{
			// place buffer into message
			uart_send_buf[0] = uart2_recv_buf[uart2_recv_buf_tail - 1];
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <Driver_UART_Transmit+0xa4>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	4a20      	ldr	r2, [pc, #128]	@ (8001ca8 <Driver_UART_Transmit+0xa8>)
 8001c26:	5cd2      	ldrb	r2, [r2, r3]
 8001c28:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c2a:	701a      	strb	r2, [r3, #0]
//			uart_send_buf[1] = '\r';
//			uart_send_buf[2] = '\n';
			// send
			HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart_send_buf, 1);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	491f      	ldr	r1, [pc, #124]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c30:	481f      	ldr	r0, [pc, #124]	@ (8001cb0 <Driver_UART_Transmit+0xb0>)
 8001c32:	f005 f983 	bl	8006f3c <HAL_UART_Transmit_DMA>
			strcpy(uart_send_buf, message);
			// send
			HAL_UART_Transmit_DMA(&huart4, (unsigned char *) uart_send_buf, strlen(uart_send_buf));
		}
	}
}
 8001c36:	e02f      	b.n	8001c98 <Driver_UART_Transmit+0x98>
			strcpy(uart_send_buf, message);
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	481c      	ldr	r0, [pc, #112]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c3c:	f006 fae0 	bl	8008200 <strcpy>
			HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart_send_buf, strlen(uart_send_buf));
 8001c40:	481a      	ldr	r0, [pc, #104]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c42:	f7fe fae5 	bl	8000210 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4917      	ldr	r1, [pc, #92]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c4e:	4818      	ldr	r0, [pc, #96]	@ (8001cb0 <Driver_UART_Transmit+0xb0>)
 8001c50:	f005 f974 	bl	8006f3c <HAL_UART_Transmit_DMA>
}
 8001c54:	e020      	b.n	8001c98 <Driver_UART_Transmit+0x98>
	else if (dest == JETSON)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d11d      	bne.n	8001c98 <Driver_UART_Transmit+0x98>
		if (message == NULL)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <Driver_UART_Transmit+0x7c>
			uart_send_buf[0] = uart4_recv_buf[uart4_recv_buf_tail - 1];
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <Driver_UART_Transmit+0xb4>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	4a13      	ldr	r2, [pc, #76]	@ (8001cb8 <Driver_UART_Transmit+0xb8>)
 8001c6a:	5cd2      	ldrb	r2, [r2, r3]
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c6e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart4, (unsigned char *) uart_send_buf, 1);
 8001c70:	2201      	movs	r2, #1
 8001c72:	490e      	ldr	r1, [pc, #56]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c74:	4811      	ldr	r0, [pc, #68]	@ (8001cbc <Driver_UART_Transmit+0xbc>)
 8001c76:	f005 f961 	bl	8006f3c <HAL_UART_Transmit_DMA>
}
 8001c7a:	e00d      	b.n	8001c98 <Driver_UART_Transmit+0x98>
			strcpy(uart_send_buf, message);
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	480b      	ldr	r0, [pc, #44]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c80:	f006 fabe 	bl	8008200 <strcpy>
			HAL_UART_Transmit_DMA(&huart4, (unsigned char *) uart_send_buf, strlen(uart_send_buf));
 8001c84:	4809      	ldr	r0, [pc, #36]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c86:	f7fe fac3 	bl	8000210 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4906      	ldr	r1, [pc, #24]	@ (8001cac <Driver_UART_Transmit+0xac>)
 8001c92:	480a      	ldr	r0, [pc, #40]	@ (8001cbc <Driver_UART_Transmit+0xbc>)
 8001c94:	f005 f952 	bl	8006f3c <HAL_UART_Transmit_DMA>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001ba 	.word	0x200001ba
 8001ca4:	200001b8 	.word	0x200001b8
 8001ca8:	20000118 	.word	0x20000118
 8001cac:	200000c8 	.word	0x200000c8
 8001cb0:	20000458 	.word	0x20000458
 8001cb4:	200001b9 	.word	0x200001b9
 8001cb8:	20000168 	.word	0x20000168
 8001cbc:	200003c8 	.word	0x200003c8

08001cc0 <Driver_UART_GetBuffer>:

// function to get char buffer
unsigned char * Driver_UART_GetBuffer(UART_Location_T src)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
	if (src == NUCLEO)
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <Driver_UART_GetBuffer+0x14>
	{
		return (unsigned char *) uart2_recv_buf;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <Driver_UART_GetBuffer+0x2c>)
 8001cd2:	e005      	b.n	8001ce0 <Driver_UART_GetBuffer+0x20>
	}
	else if (src == JETSON)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <Driver_UART_GetBuffer+0x1e>
	{
		return (unsigned char *) uart4_recv_buf;
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <Driver_UART_GetBuffer+0x30>)
 8001cdc:	e000      	b.n	8001ce0 <Driver_UART_GetBuffer+0x20>
	}

	// error condition
	return NULL;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20000118 	.word	0x20000118
 8001cf0:	20000168 	.word	0x20000168

08001cf4 <Driver_UART_GetTail>:

// function to get tail value for a buffer
uint8_t Driver_UART_GetTail(UART_Location_T src)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	if (src == NUCLEO)
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <Driver_UART_GetTail+0x16>
	{
		return uart2_recv_buf_tail;
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <Driver_UART_GetTail+0x30>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	e006      	b.n	8001d18 <Driver_UART_GetTail+0x24>
	}
	else if (src == JETSON)
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <Driver_UART_GetTail+0x22>
	{
		return uart4_recv_buf_tail;
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <Driver_UART_GetTail+0x34>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	e000      	b.n	8001d18 <Driver_UART_GetTail+0x24>
	}

	// error condition
	return 0;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	200001b8 	.word	0x200001b8
 8001d28:	200001b9 	.word	0x200001b9

08001d2c <Driver_UART_ClearBuffer>:

// function to "clear" a buffer
void Driver_UART_ClearBuffer(UART_Location_T src)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	if (src == NUCLEO)
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d112      	bne.n	8001d62 <Driver_UART_ClearBuffer+0x36>
	{
		uart2_recv_buf_tail = 0;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <Driver_UART_ClearBuffer+0x68>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart2);
 8001d42:	4815      	ldr	r0, [pc, #84]	@ (8001d98 <Driver_UART_ClearBuffer+0x6c>)
 8001d44:	f005 f96a 	bl	800701c <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(&huart2, Driver_UART_GetBuffer(NUCLEO) + uart2_recv_buf_tail, 1);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff ffb9 	bl	8001cc0 <Driver_UART_GetBuffer>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <Driver_UART_ClearBuffer+0x68>)
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480f      	ldr	r0, [pc, #60]	@ (8001d98 <Driver_UART_ClearBuffer+0x6c>)
 8001d5c:	f005 f8c9 	bl	8006ef2 <HAL_UART_Receive_IT>
	{
		uart4_recv_buf_tail = 0;
		HAL_UART_AbortReceive_IT(&huart4);
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
	}
}
 8001d60:	e014      	b.n	8001d8c <Driver_UART_ClearBuffer+0x60>
	else if (src == JETSON)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d111      	bne.n	8001d8c <Driver_UART_ClearBuffer+0x60>
		uart4_recv_buf_tail = 0;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <Driver_UART_ClearBuffer+0x70>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart4);
 8001d6e:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <Driver_UART_ClearBuffer+0x74>)
 8001d70:	f005 f954 	bl	800701c <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff ffa3 	bl	8001cc0 <Driver_UART_GetBuffer>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <Driver_UART_ClearBuffer+0x70>)
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	2201      	movs	r2, #1
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	@ (8001da0 <Driver_UART_ClearBuffer+0x74>)
 8001d88:	f005 f8b3 	bl	8006ef2 <HAL_UART_Receive_IT>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200001b8 	.word	0x200001b8
 8001d98:	20000458 	.word	0x20000458
 8001d9c:	200001b9 	.word	0x200001b9
 8001da0:	200003c8 	.word	0x200003c8

08001da4 <HAL_UART_TxCpltCallback>:

// UART TX interrupt callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	// clear sending flag
	uart_sending = 0;
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <HAL_UART_TxCpltCallback+0x1c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200001ba 	.word	0x200001ba

08001dc4 <HAL_UART_RxCpltCallback>:

// UART RX interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a1c      	ldr	r2, [pc, #112]	@ (8001e40 <HAL_UART_RxCpltCallback+0x7c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d116      	bne.n	8001e02 <HAL_UART_RxCpltCallback+0x3e>
	{
		uart2_recv_buf_tail++;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_UART_RxCpltCallback+0x80>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_UART_RxCpltCallback+0x80>)
 8001dde:	701a      	strb	r2, [r3, #0]
		Driver_UART_Transmit(NUCLEO, NULL);
 8001de0:	2100      	movs	r1, #0
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff ff0c 	bl	8001c00 <Driver_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, Driver_UART_GetBuffer(NUCLEO) + uart2_recv_buf_tail, 1);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff ff69 	bl	8001cc0 <Driver_UART_GetBuffer>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <HAL_UART_RxCpltCallback+0x80>)
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	2201      	movs	r2, #1
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4811      	ldr	r0, [pc, #68]	@ (8001e40 <HAL_UART_RxCpltCallback+0x7c>)
 8001dfc:	f005 f879 	bl	8006ef2 <HAL_UART_Receive_IT>
	{
		uart4_recv_buf_tail++;
		Driver_UART_Transmit(JETSON, NULL);
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
	}
}
 8001e00:	e019      	b.n	8001e36 <HAL_UART_RxCpltCallback+0x72>
	else if (huart == &huart4)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a10      	ldr	r2, [pc, #64]	@ (8001e48 <HAL_UART_RxCpltCallback+0x84>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d115      	bne.n	8001e36 <HAL_UART_RxCpltCallback+0x72>
		uart4_recv_buf_tail++;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_UART_RxCpltCallback+0x88>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_UART_RxCpltCallback+0x88>)
 8001e14:	701a      	strb	r2, [r3, #0]
		Driver_UART_Transmit(JETSON, NULL);
 8001e16:	2100      	movs	r1, #0
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7ff fef1 	bl	8001c00 <Driver_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff ff4e 	bl	8001cc0 <Driver_UART_GetBuffer>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <HAL_UART_RxCpltCallback+0x88>)
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <HAL_UART_RxCpltCallback+0x84>)
 8001e32:	f005 f85e 	bl	8006ef2 <HAL_UART_Receive_IT>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000458 	.word	0x20000458
 8001e44:	200001b8 	.word	0x200001b8
 8001e48:	200003c8 	.word	0x200003c8
 8001e4c:	200001b9 	.word	0x200001b9

08001e50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e56:	463b      	mov	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e64:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <MX_ADC1_Init+0x9c>)
 8001e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e6a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e90:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e92:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <MX_ADC1_Init+0xa0>)
 8001e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e96:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb0:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001eb2:	f001 f9af 	bl	8003214 <HAL_ADC_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ebc:	f000 fa06 	bl	80022cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_ADC1_Init+0x98>)
 8001ed2:	f001 f9e3 	bl	800329c <HAL_ADC_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001edc:	f000 f9f6 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200001bc 	.word	0x200001bc
 8001eec:	40012000 	.word	0x40012000
 8001ef0:	0f000001 	.word	0x0f000001

08001ef4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_ADC_MspInit+0x7c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d127      	bne.n	8001f66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_ADC_MspInit+0x80>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	4a15      	ldr	r2, [pc, #84]	@ (8001f74 <HAL_ADC_MspInit+0x80>)
 8001f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_ADC_MspInit+0x80>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <HAL_ADC_MspInit+0x80>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f74 <HAL_ADC_MspInit+0x80>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_ADC_MspInit+0x80>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BRAKE_CS_Pin;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f52:	2303      	movs	r3, #3
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BRAKE_CS_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_ADC_MspInit+0x84>)
 8001f62:	f002 f8dd 	bl	8004120 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	@ 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40012000 	.word	0x40012000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020800 	.word	0x40020800

08001f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <MX_DMA_Init+0x6c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <MX_DMA_Init+0x6c>)
 8001f8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <MX_DMA_Init+0x6c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	200d      	movs	r0, #13
 8001fa4:	f001 fc83 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001fa8:	200d      	movs	r0, #13
 8001faa:	f001 fc9c 	bl	80038e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f001 fc7b 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001fb8:	200f      	movs	r0, #15
 8001fba:	f001 fc94 	bl	80038e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2010      	movs	r0, #16
 8001fc4:	f001 fc73 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001fc8:	2010      	movs	r0, #16
 8001fca:	f001 fc8c 	bl	80038e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2011      	movs	r0, #17
 8001fd4:	f001 fc6b 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001fd8:	2011      	movs	r0, #17
 8001fda:	f001 fc84 	bl	80038e6 <HAL_NVIC_EnableIRQ>

}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a5e      	ldr	r2, [pc, #376]	@ (8002184 <MX_GPIO_Init+0x198>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b5c      	ldr	r3, [pc, #368]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b58      	ldr	r3, [pc, #352]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a57      	ldr	r2, [pc, #348]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b55      	ldr	r3, [pc, #340]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b51      	ldr	r3, [pc, #324]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a50      	ldr	r2, [pc, #320]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b4e      	ldr	r3, [pc, #312]	@ (8002184 <MX_GPIO_Init+0x198>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b4a      	ldr	r3, [pc, #296]	@ (8002184 <MX_GPIO_Init+0x198>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a49      	ldr	r2, [pc, #292]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a42      	ldr	r2, [pc, #264]	@ (8002184 <MX_GPIO_Init+0x198>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b40      	ldr	r3, [pc, #256]	@ (8002184 <MX_GPIO_Init+0x198>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 800208e:	2200      	movs	r2, #0
 8002090:	f640 5147 	movw	r1, #3399	@ 0xd47
 8002094:	483c      	ldr	r0, [pc, #240]	@ (8002188 <MX_GPIO_Init+0x19c>)
 8002096:	f002 f9d7 	bl	8004448 <HAL_GPIO_WritePin>
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 800209a:	2200      	movs	r2, #0
 800209c:	f649 4130 	movw	r1, #39984	@ 0x9c30
 80020a0:	483a      	ldr	r0, [pc, #232]	@ (800218c <MX_GPIO_Init+0x1a0>)
 80020a2:	f002 f9d1 	bl	8004448 <HAL_GPIO_WritePin>
                          |STAT4_Pin|FAN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 80020a6:	2200      	movs	r2, #0
 80020a8:	f243 3190 	movw	r1, #13200	@ 0x3390
 80020ac:	4838      	ldr	r0, [pc, #224]	@ (8002190 <MX_GPIO_Init+0x1a4>)
 80020ae:	f002 f9cb 	bl	8004448 <HAL_GPIO_WritePin>
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	482f      	ldr	r0, [pc, #188]	@ (8002188 <MX_GPIO_Init+0x19c>)
 80020ca:	f002 f829 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 80020ce:	f640 5347 	movw	r3, #3399	@ 0xd47
 80020d2:	617b      	str	r3, [r7, #20]
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d4:	2301      	movs	r3, #1
 80020d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	4828      	ldr	r0, [pc, #160]	@ (8002188 <MX_GPIO_Init+0x19c>)
 80020e8:	f002 f81a 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 80020ec:	f649 4330 	movw	r3, #39984	@ 0x9c30
 80020f0:	617b      	str	r3, [r7, #20]
                          |STAT4_Pin|FAN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4821      	ldr	r0, [pc, #132]	@ (800218c <MX_GPIO_Init+0x1a0>)
 8002106:	f002 f80b 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 800210a:	2310      	movs	r3, #16
 800210c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	481a      	ldr	r0, [pc, #104]	@ (8002188 <MX_GPIO_Init+0x19c>)
 8002120:	f001 fffe 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 8002124:	f243 3390 	movw	r3, #13200	@ 0x3390
 8002128:	617b      	str	r3, [r7, #20]
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4814      	ldr	r0, [pc, #80]	@ (8002190 <MX_GPIO_Init+0x1a4>)
 800213e:	f001 ffef 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8002142:	2320      	movs	r3, #32
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002146:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	480e      	ldr	r0, [pc, #56]	@ (8002190 <MX_GPIO_Init+0x1a4>)
 8002158:	f001 ffe2 	bl	8004120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	200a      	movs	r0, #10
 8002162:	f001 fba4 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002166:	200a      	movs	r0, #10
 8002168:	f001 fbbd 	bl	80038e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2017      	movs	r0, #23
 8002172:	f001 fb9c 	bl	80038ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002176:	2017      	movs	r0, #23
 8002178:	f001 fbb5 	bl	80038e6 <HAL_NVIC_EnableIRQ>

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	@ 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	40020800 	.word	0x40020800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002198:	f000 ffa6 	bl	80030e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219c:	f000 f824 	bl	80021e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a0:	f7ff ff24 	bl	8001fec <MX_GPIO_Init>
  MX_DMA_Init();
 80021a4:	f7ff feea 	bl	8001f7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80021a8:	f000 fd9a 	bl	8002ce0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80021ac:	f000 fd44 	bl	8002c38 <MX_UART4_Init>
  MX_SPI2_Init();
 80021b0:	f000 f892 	bl	80022d8 <MX_SPI2_Init>
  MX_TIM3_Init();
 80021b4:	f000 faf0 	bl	8002798 <MX_TIM3_Init>
  MX_TIM8_Init();
 80021b8:	f000 fb9a 	bl	80028f0 <MX_TIM8_Init>
  MX_UART5_Init();
 80021bc:	f000 fd66 	bl	8002c8c <MX_UART5_Init>
  MX_TIM1_Init();
 80021c0:	f000 f9fe 	bl	80025c0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80021c4:	f7ff fe44 	bl	8001e50 <MX_ADC1_Init>
  MX_TIM2_Init();
 80021c8:	f000 fa9a 	bl	8002700 <MX_TIM2_Init>
  MX_TIM6_Init();
 80021cc:	f000 fb5a 	bl	8002884 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // disable timer interrupt for tick() to make sure init() function completes
  HAL_TIM_Base_Stop_IT(&htim6);
 80021d0:	4804      	ldr	r0, [pc, #16]	@ (80021e4 <main+0x50>)
 80021d2:	f003 fe53 	bl	8005e7c <HAL_TIM_Base_Stop_IT>
  // call init() function for state machine
  App_StateMachine_Init();
 80021d6:	f7ff f919 	bl	800140c <App_StateMachine_Init>
  // re-enable timer interrupt for tick()
  HAL_TIM_Base_Start_IT(&htim6);
 80021da:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <main+0x50>)
 80021dc:	f003 fdde 	bl	8005d9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <main+0x4c>
 80021e4:	20000338 	.word	0x20000338

080021e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b094      	sub	sp, #80	@ 0x50
 80021ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	2234      	movs	r2, #52	@ 0x34
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 ffce 	bl	8008198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021fc:	f107 0308 	add.w	r3, r7, #8
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <SystemClock_Config+0xdc>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	4a2b      	ldr	r2, [pc, #172]	@ (80022c4 <SystemClock_Config+0xdc>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221a:	6413      	str	r3, [r2, #64]	@ 0x40
 800221c:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <SystemClock_Config+0xdc>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002228:	2300      	movs	r3, #0
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <SystemClock_Config+0xe0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a25      	ldr	r2, [pc, #148]	@ (80022c8 <SystemClock_Config+0xe0>)
 8002232:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <SystemClock_Config+0xe0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002244:	2302      	movs	r3, #2
 8002246:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002248:	2301      	movs	r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800224c:	2310      	movs	r3, #16
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002250:	2302      	movs	r3, #2
 8002252:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002254:	2300      	movs	r3, #0
 8002256:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002258:	2308      	movs	r3, #8
 800225a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800225c:	23b4      	movs	r3, #180	@ 0xb4
 800225e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002260:	2302      	movs	r3, #2
 8002262:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002264:	2302      	movs	r3, #2
 8002266:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002268:	2302      	movs	r3, #2
 800226a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4618      	mov	r0, r3
 8002272:	f002 fcc1 	bl	8004bf8 <HAL_RCC_OscConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800227c:	f000 f826 	bl	80022cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002280:	f002 f920 	bl	80044c4 <HAL_PWREx_EnableOverDrive>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800228a:	f000 f81f 	bl	80022cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800228e:	230f      	movs	r3, #15
 8002290:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002292:	2302      	movs	r3, #2
 8002294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800229a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800229e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	2105      	movs	r1, #5
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 f959 	bl	8004564 <HAL_RCC_ClockConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80022b8:	f000 f808 	bl	80022cc <Error_Handler>
  }
}
 80022bc:	bf00      	nop
 80022be:	3750      	adds	r7, #80	@ 0x50
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000

080022cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
}
 80022d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <Error_Handler+0x8>

080022d8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022dc:	4b17      	ldr	r3, [pc, #92]	@ (800233c <MX_SPI2_Init+0x64>)
 80022de:	4a18      	ldr	r2, [pc, #96]	@ (8002340 <MX_SPI2_Init+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <MX_SPI2_Init+0x64>)
 80022e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <MX_SPI2_Init+0x64>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <MX_SPI2_Init+0x64>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <MX_SPI2_Init+0x64>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <MX_SPI2_Init+0x64>)
 80022fe:	2200      	movs	r2, #0
 8002300:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <MX_SPI2_Init+0x64>)
 8002304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002308:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <MX_SPI2_Init+0x64>)
 800230c:	2200      	movs	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <MX_SPI2_Init+0x64>)
 8002312:	2200      	movs	r2, #0
 8002314:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <MX_SPI2_Init+0x64>)
 8002318:	2200      	movs	r2, #0
 800231a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231c:	4b07      	ldr	r3, [pc, #28]	@ (800233c <MX_SPI2_Init+0x64>)
 800231e:	2200      	movs	r2, #0
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <MX_SPI2_Init+0x64>)
 8002324:	220a      	movs	r2, #10
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002328:	4804      	ldr	r0, [pc, #16]	@ (800233c <MX_SPI2_Init+0x64>)
 800232a:	f002 ff03 	bl	8005134 <HAL_SPI_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002334:	f7ff ffca 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000204 	.word	0x20000204
 8002340:	40003800 	.word	0x40003800

08002344 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	@ 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_SPI_MspInit+0x84>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d12c      	bne.n	80023c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002374:	6413      	str	r3, [r2, #64]	@ 0x40
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_SPI_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800239e:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b0:	2305      	movs	r3, #5
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <HAL_SPI_MspInit+0x8c>)
 80023bc:	f001 feb0 	bl	8004120 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	@ 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40003800 	.word	0x40003800
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020400 	.word	0x40020400

080023d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <HAL_MspInit+0x4c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002420 <HAL_MspInit+0x4c>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <HAL_MspInit+0x4c>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <HAL_MspInit+0x4c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <HAL_MspInit+0x4c>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_MspInit+0x4c>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002412:	2007      	movs	r0, #7
 8002414:	f001 fa40 	bl	8003898 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <NMI_Handler+0x4>

0800242c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <MemManage_Handler+0x4>

0800243c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <UsageFault_Handler+0x4>

0800244c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247a:	f000 fe87 	bl	800318c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}

08002482 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8002486:	2010      	movs	r0, #16
 8002488:	f001 fff8 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <DMA1_Stream2_IRQHandler+0x10>)
 8002496:	f001 fbd9 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000500 	.word	0x20000500

080024a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80024a8:	4802      	ldr	r0, [pc, #8]	@ (80024b4 <DMA1_Stream4_IRQHandler+0x10>)
 80024aa:	f001 fbcf 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200004a0 	.word	0x200004a0

080024b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <DMA1_Stream5_IRQHandler+0x10>)
 80024be:	f001 fbc5 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200005c0 	.word	0x200005c0

080024cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <DMA1_Stream6_IRQHandler+0x10>)
 80024d2:	f001 fbbb 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000560 	.word	0x20000560

080024e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 80024e4:	2020      	movs	r0, #32
 80024e6:	f001 ffc9 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024f4:	4802      	ldr	r0, [pc, #8]	@ (8002500 <USART2_IRQHandler+0x10>)
 80024f6:	f004 fe43 	bl	8007180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000458 	.word	0x20000458

08002504 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <UART4_IRQHandler+0x10>)
 800250a:	f004 fe39 	bl	8007180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200003c8 	.word	0x200003c8

08002518 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  App_StateMachine_Tick();
 800251c:	f7fe ffee 	bl	80014fc <App_StateMachine_Tick>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002520:	4802      	ldr	r0, [pc, #8]	@ (800252c <TIM6_DAC_IRQHandler+0x14>)
 8002522:	f003 fd33 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000338 	.word	0x20000338

08002530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <_sbrk+0x5c>)
 800253a:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <_sbrk+0x60>)
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <_sbrk+0x64>)
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <_sbrk+0x68>)
 8002550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002560:	f005 fe22 	bl	80081a8 <__errno>
 8002564:	4603      	mov	r3, r0
 8002566:	220c      	movs	r2, #12
 8002568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800256e:	e009      	b.n	8002584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <_sbrk+0x64>)
 8002580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20020000 	.word	0x20020000
 8002590:	00000400 	.word	0x00000400
 8002594:	2000025c 	.word	0x2000025c
 8002598:	20000770 	.word	0x20000770

0800259c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <SystemInit+0x20>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <SystemInit+0x20>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b096      	sub	sp, #88	@ 0x58
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]
 80025ee:	615a      	str	r2, [r3, #20]
 80025f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2220      	movs	r2, #32
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f005 fdcd 	bl	8008198 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025fe:	4b3e      	ldr	r3, [pc, #248]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002600:	4a3e      	ldr	r2, [pc, #248]	@ (80026fc <MX_TIM1_Init+0x13c>)
 8002602:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 702;
 8002604:	4b3c      	ldr	r3, [pc, #240]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002606:	f240 22be 	movw	r2, #702	@ 0x2be
 800260a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <MX_TIM1_Init+0x138>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002612:	4b39      	ldr	r3, [pc, #228]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002614:	22ff      	movs	r2, #255	@ 0xff
 8002616:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	4b37      	ldr	r3, [pc, #220]	@ (80026f8 <MX_TIM1_Init+0x138>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800261e:	4b36      	ldr	r3, [pc, #216]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002620:	2200      	movs	r2, #0
 8002622:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002624:	4b34      	ldr	r3, [pc, #208]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002626:	2280      	movs	r2, #128	@ 0x80
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800262a:	4833      	ldr	r0, [pc, #204]	@ (80026f8 <MX_TIM1_Init+0x138>)
 800262c:	f003 fb66 	bl	8005cfc <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002636:	f7ff fe49 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002640:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002644:	4619      	mov	r1, r3
 8002646:	482c      	ldr	r0, [pc, #176]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002648:	f003 fe52 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002652:	f7ff fe3b 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002656:	4828      	ldr	r0, [pc, #160]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002658:	f003 fc3f 	bl	8005eda <HAL_TIM_PWM_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002662:	f7ff fe33 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800266e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002672:	4619      	mov	r1, r3
 8002674:	4820      	ldr	r0, [pc, #128]	@ (80026f8 <MX_TIM1_Init+0x138>)
 8002676:	f004 fae5 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002680:	f7ff fe24 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002684:	2360      	movs	r3, #96	@ 0x60
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	2204      	movs	r2, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4813      	ldr	r0, [pc, #76]	@ (80026f8 <MX_TIM1_Init+0x138>)
 80026aa:	f003 fd5f 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80026b4:	f7ff fe0a 	bl	80022cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <MX_TIM1_Init+0x138>)
 80026dc:	f004 fb2e 	bl	8006d3c <HAL_TIMEx_ConfigBreakDeadTime>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80026e6:	f7ff fdf1 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026ea:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <MX_TIM1_Init+0x138>)
 80026ec:	f000 fa1c 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 80026f0:	bf00      	nop
 80026f2:	3758      	adds	r7, #88	@ 0x58
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000260 	.word	0x20000260
 80026fc:	40010000 	.word	0x40010000

08002700 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	463b      	mov	r3, r7
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <MX_TIM2_Init+0x94>)
 800271e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <MX_TIM2_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <MX_TIM2_Init+0x94>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <MX_TIM2_Init+0x94>)
 8002732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <MX_TIM2_Init+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <MX_TIM2_Init+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002744:	4813      	ldr	r0, [pc, #76]	@ (8002794 <MX_TIM2_Init+0x94>)
 8002746:	f003 fad9 	bl	8005cfc <HAL_TIM_Base_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002750:	f7ff fdbc 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002758:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	4619      	mov	r1, r3
 8002760:	480c      	ldr	r0, [pc, #48]	@ (8002794 <MX_TIM2_Init+0x94>)
 8002762:	f003 fdc5 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800276c:	f7ff fdae 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002778:	463b      	mov	r3, r7
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	@ (8002794 <MX_TIM2_Init+0x94>)
 800277e:	f004 fa61 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002788:	f7ff fda0 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200002a8 	.word	0x200002a8

08002798 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08e      	sub	sp, #56	@ 0x38
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	f107 0320 	add.w	r3, r7, #32
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	615a      	str	r2, [r3, #20]
 80027c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c8:	4b2c      	ldr	r3, [pc, #176]	@ (800287c <MX_TIM3_Init+0xe4>)
 80027ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002880 <MX_TIM3_Init+0xe8>)
 80027cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027ce:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <MX_TIM3_Init+0xe4>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <MX_TIM3_Init+0xe4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027da:	4b28      	ldr	r3, [pc, #160]	@ (800287c <MX_TIM3_Init+0xe4>)
 80027dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e2:	4b26      	ldr	r3, [pc, #152]	@ (800287c <MX_TIM3_Init+0xe4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e8:	4b24      	ldr	r3, [pc, #144]	@ (800287c <MX_TIM3_Init+0xe4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ee:	4823      	ldr	r0, [pc, #140]	@ (800287c <MX_TIM3_Init+0xe4>)
 80027f0:	f003 fa84 	bl	8005cfc <HAL_TIM_Base_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80027fa:	f7ff fd67 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002802:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002804:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002808:	4619      	mov	r1, r3
 800280a:	481c      	ldr	r0, [pc, #112]	@ (800287c <MX_TIM3_Init+0xe4>)
 800280c:	f003 fd70 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002816:	f7ff fd59 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800281a:	4818      	ldr	r0, [pc, #96]	@ (800287c <MX_TIM3_Init+0xe4>)
 800281c:	f003 fb5d 	bl	8005eda <HAL_TIM_PWM_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002826:	f7ff fd51 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002832:	f107 0320 	add.w	r3, r7, #32
 8002836:	4619      	mov	r1, r3
 8002838:	4810      	ldr	r0, [pc, #64]	@ (800287c <MX_TIM3_Init+0xe4>)
 800283a:	f004 fa03 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002844:	f7ff fd42 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002848:	2360      	movs	r3, #96	@ 0x60
 800284a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	220c      	movs	r2, #12
 800285c:	4619      	mov	r1, r3
 800285e:	4807      	ldr	r0, [pc, #28]	@ (800287c <MX_TIM3_Init+0xe4>)
 8002860:	f003 fc84 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800286a:	f7ff fd2f 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800286e:	4803      	ldr	r0, [pc, #12]	@ (800287c <MX_TIM3_Init+0xe4>)
 8002870:	f000 f95a 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 8002874:	bf00      	nop
 8002876:	3738      	adds	r7, #56	@ 0x38
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200002f0 	.word	0x200002f0
 8002880:	40000400 	.word	0x40000400

08002884 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288a:	463b      	mov	r3, r7
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <MX_TIM6_Init+0x64>)
 8002894:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <MX_TIM6_Init+0x68>)
 8002896:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <MX_TIM6_Init+0x64>)
 800289a:	f242 3227 	movw	r2, #8999	@ 0x2327
 800289e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <MX_TIM6_Init+0x64>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <MX_TIM6_Init+0x64>)
 80028a8:	2264      	movs	r2, #100	@ 0x64
 80028aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <MX_TIM6_Init+0x64>)
 80028ae:	2280      	movs	r2, #128	@ 0x80
 80028b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028b2:	480d      	ldr	r0, [pc, #52]	@ (80028e8 <MX_TIM6_Init+0x64>)
 80028b4:	f003 fa22 	bl	8005cfc <HAL_TIM_Base_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80028be:	f7ff fd05 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028c2:	2320      	movs	r3, #32
 80028c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028ca:	463b      	mov	r3, r7
 80028cc:	4619      	mov	r1, r3
 80028ce:	4806      	ldr	r0, [pc, #24]	@ (80028e8 <MX_TIM6_Init+0x64>)
 80028d0:	f004 f9b8 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80028da:	f7ff fcf7 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000338 	.word	0x20000338
 80028ec:	40001000 	.word	0x40001000

080028f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b096      	sub	sp, #88	@ 0x58
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800290e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	2220      	movs	r2, #32
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f005 fc35 	bl	8008198 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800292e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002930:	4a3d      	ldr	r2, [pc, #244]	@ (8002a28 <MX_TIM8_Init+0x138>)
 8002932:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002934:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002936:	2200      	movs	r2, #0
 8002938:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a24 <MX_TIM8_Init+0x134>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002940:	4b38      	ldr	r3, [pc, #224]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002946:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002948:	4b36      	ldr	r3, [pc, #216]	@ (8002a24 <MX_TIM8_Init+0x134>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800294e:	4b35      	ldr	r3, [pc, #212]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800295a:	4832      	ldr	r0, [pc, #200]	@ (8002a24 <MX_TIM8_Init+0x134>)
 800295c:	f003 f9ce 	bl	8005cfc <HAL_TIM_Base_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002966:	f7ff fcb1 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002970:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002974:	4619      	mov	r1, r3
 8002976:	482b      	ldr	r0, [pc, #172]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002978:	f003 fcba 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002982:	f7ff fca3 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002986:	4827      	ldr	r0, [pc, #156]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002988:	f003 faa7 	bl	8005eda <HAL_TIM_PWM_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002992:	f7ff fc9b 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800299e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029a2:	4619      	mov	r1, r3
 80029a4:	481f      	ldr	r0, [pc, #124]	@ (8002a24 <MX_TIM8_Init+0x134>)
 80029a6:	f004 f94d 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80029b0:	f7ff fc8c 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b4:	2360      	movs	r3, #96	@ 0x60
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d0:	220c      	movs	r2, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	4813      	ldr	r0, [pc, #76]	@ (8002a24 <MX_TIM8_Init+0x134>)
 80029d6:	f003 fbc9 	bl	800616c <HAL_TIM_PWM_ConfigChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80029e0:	f7ff fc74 	bl	80022cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4807      	ldr	r0, [pc, #28]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002a08:	f004 f998 	bl	8006d3c <HAL_TIMEx_ConfigBreakDeadTime>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8002a12:	f7ff fc5b 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <MX_TIM8_Init+0x134>)
 8002a18:	f000 f886 	bl	8002b28 <HAL_TIM_MspPostInit>

}
 8002a1c:	bf00      	nop
 8002a1e:	3758      	adds	r7, #88	@ 0x58
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000380 	.word	0x20000380
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a36      	ldr	r2, [pc, #216]	@ (8002b14 <HAL_TIM_Base_MspInit+0xe8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	4a34      	ldr	r2, [pc, #208]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4e:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002a5a:	e056      	b.n	8002b0a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a76:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	69bb      	ldr	r3, [r7, #24]
}
 8002a82:	e042      	b.n	8002b0a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a24      	ldr	r2, [pc, #144]	@ (8002b1c <HAL_TIM_Base_MspInit+0xf0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	4b21      	ldr	r3, [pc, #132]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4a20      	ldr	r2, [pc, #128]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]
}
 8002aaa:	e02e      	b.n	8002b0a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM6)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_TIM_Base_MspInit+0xf4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d116      	bne.n	8002ae4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a16      	ldr	r2, [pc, #88]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2036      	movs	r0, #54	@ 0x36
 8002ad8:	f000 fee9 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002adc:	2036      	movs	r0, #54	@ 0x36
 8002ade:	f000 ff02 	bl	80038e6 <HAL_NVIC_EnableIRQ>
}
 8002ae2:	e012      	b.n	8002b0a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b24 <HAL_TIM_Base_MspInit+0xf8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10d      	bne.n	8002b0a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_TIM_Base_MspInit+0xec>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40001000 	.word	0x40001000
 8002b24:	40010400 	.word	0x40010400

08002b28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a36      	ldr	r2, [pc, #216]	@ (8002c20 <HAL_TIM_MspPostInit+0xf8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d11e      	bne.n	8002b88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	4a34      	ldr	r2, [pc, #208]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5a:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = STR_INPUTB__Pin;
 8002b66:	2301      	movs	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(STR_INPUTB__GPIO_Port, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4829      	ldr	r0, [pc, #164]	@ (8002c28 <HAL_TIM_MspPostInit+0x100>)
 8002b82:	f001 facd 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b86:	e047      	b.n	8002c18 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a27      	ldr	r2, [pc, #156]	@ (8002c2c <HAL_TIM_MspPostInit+0x104>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d11e      	bne.n	8002bd0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_SIG_Pin;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_SIG_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4817      	ldr	r0, [pc, #92]	@ (8002c28 <HAL_TIM_MspPostInit+0x100>)
 8002bca:	f001 faa9 	bl	8004120 <HAL_GPIO_Init>
}
 8002bce:	e023      	b.n	8002c18 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	@ (8002c30 <HAL_TIM_MspPostInit+0x108>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d11e      	bne.n	8002c18 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	4a10      	ldr	r2, [pc, #64]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bea:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_TIM_MspPostInit+0xfc>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VESC_PPM_Pin;
 8002bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VESC_PPM_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	4808      	ldr	r0, [pc, #32]	@ (8002c34 <HAL_TIM_MspPostInit+0x10c>)
 8002c14:	f001 fa84 	bl	8004120 <HAL_GPIO_Init>
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	@ 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40020800 	.word	0x40020800

08002c38 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <MX_UART4_Init+0x50>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c6e:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_UART4_Init+0x4c>)
 8002c70:	f004 f8ef 	bl	8006e52 <HAL_UART_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c7a:	f7ff fb27 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003c8 	.word	0x200003c8
 8002c88:	40004c00 	.word	0x40004c00

08002c8c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002c92:	4a12      	ldr	r2, [pc, #72]	@ (8002cdc <MX_UART5_Init+0x50>)
 8002c94:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002c98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c9c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002cb0:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002cc2:	4805      	ldr	r0, [pc, #20]	@ (8002cd8 <MX_UART5_Init+0x4c>)
 8002cc4:	f004 f8c5 	bl	8006e52 <HAL_UART_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002cce:	f7ff fafd 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000410 	.word	0x20000410
 8002cdc:	40005000 	.word	0x40005000

08002ce0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <MX_USART2_UART_Init+0x50>)
 8002ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d06:	220c      	movs	r2, #12
 8002d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	@ (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d18:	f004 f89b 	bl	8006e52 <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d22:	f7ff fad3 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000458 	.word	0x20000458
 8002d30:	40004400 	.word	0x40004400

08002d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	@ 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a72      	ldr	r2, [pc, #456]	@ (8002f1c <HAL_UART_MspInit+0x1e8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	f040 8091 	bne.w	8002e7a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	4b70      	ldr	r3, [pc, #448]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	4a6f      	ldr	r2, [pc, #444]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002d62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d68:	4b6d      	ldr	r3, [pc, #436]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d70:	623b      	str	r3, [r7, #32]
 8002d72:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	4b69      	ldr	r3, [pc, #420]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4a68      	ldr	r2, [pc, #416]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d84:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d90:	2303      	movs	r3, #3
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002da0:	2308      	movs	r3, #8
 8002da2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da8:	4619      	mov	r1, r3
 8002daa:	485e      	ldr	r0, [pc, #376]	@ (8002f24 <HAL_UART_MspInit+0x1f0>)
 8002dac:	f001 f9b8 	bl	8004120 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002db0:	4b5d      	ldr	r3, [pc, #372]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002db2:	4a5e      	ldr	r2, [pc, #376]	@ (8002f2c <HAL_UART_MspInit+0x1f8>)
 8002db4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002db6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002db8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002dbc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dbe:	4b5a      	ldr	r3, [pc, #360]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002dc0:	2240      	movs	r2, #64	@ 0x40
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc4:	4b58      	ldr	r3, [pc, #352]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dca:	4b57      	ldr	r3, [pc, #348]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002dcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dd0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd2:	4b55      	ldr	r3, [pc, #340]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd8:	4b53      	ldr	r3, [pc, #332]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002dde:	4b52      	ldr	r3, [pc, #328]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002de4:	4b50      	ldr	r3, [pc, #320]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dea:	4b4f      	ldr	r3, [pc, #316]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002df0:	484d      	ldr	r0, [pc, #308]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002df2:	f000 fd93 	bl	800391c <HAL_DMA_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002dfc:	f7ff fa66 	bl	80022cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a49      	ldr	r2, [pc, #292]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002e04:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e06:	4a48      	ldr	r2, [pc, #288]	@ (8002f28 <HAL_UART_MspInit+0x1f4>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002e0c:	4b48      	ldr	r3, [pc, #288]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e0e:	4a49      	ldr	r2, [pc, #292]	@ (8002f34 <HAL_UART_MspInit+0x200>)
 8002e10:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002e12:	4b47      	ldr	r3, [pc, #284]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e18:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e1a:	4b45      	ldr	r3, [pc, #276]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e20:	4b43      	ldr	r3, [pc, #268]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e26:	4b42      	ldr	r3, [pc, #264]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e2c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e2e:	4b40      	ldr	r3, [pc, #256]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e34:	4b3e      	ldr	r3, [pc, #248]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e40:	4b3b      	ldr	r3, [pc, #236]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e46:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002e4c:	4838      	ldr	r0, [pc, #224]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e4e:	f000 fd65 	bl	800391c <HAL_DMA_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002e58:	f7ff fa38 	bl	80022cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a34      	ldr	r2, [pc, #208]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e62:	4a33      	ldr	r2, [pc, #204]	@ (8002f30 <HAL_UART_MspInit+0x1fc>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2034      	movs	r0, #52	@ 0x34
 8002e6e:	f000 fd1e 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002e72:	2034      	movs	r0, #52	@ 0x34
 8002e74:	f000 fd37 	bl	80038e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e78:	e0fa      	b.n	8003070 <HAL_UART_MspInit+0x33c>
  else if(uartHandle->Instance==UART5)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f38 <HAL_UART_MspInit+0x204>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d15f      	bne.n	8002f44 <HAL_UART_MspInit+0x210>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	4a24      	ldr	r2, [pc, #144]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e94:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	4a16      	ldr	r2, [pc, #88]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ecc:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_UART_MspInit+0x1ec>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002eea:	2308      	movs	r3, #8
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4811      	ldr	r0, [pc, #68]	@ (8002f3c <HAL_UART_MspInit+0x208>)
 8002ef6:	f001 f913 	bl	8004120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002efa:	2304      	movs	r3, #4
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f06:	2303      	movs	r3, #3
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f12:	4619      	mov	r1, r3
 8002f14:	480a      	ldr	r0, [pc, #40]	@ (8002f40 <HAL_UART_MspInit+0x20c>)
 8002f16:	f001 f903 	bl	8004120 <HAL_GPIO_Init>
}
 8002f1a:	e0a9      	b.n	8003070 <HAL_UART_MspInit+0x33c>
 8002f1c:	40004c00 	.word	0x40004c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	200004a0 	.word	0x200004a0
 8002f2c:	40026070 	.word	0x40026070
 8002f30:	20000500 	.word	0x20000500
 8002f34:	40026040 	.word	0x40026040
 8002f38:	40005000 	.word	0x40005000
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a4b      	ldr	r2, [pc, #300]	@ (8003078 <HAL_UART_MspInit+0x344>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f040 8090 	bne.w	8003070 <HAL_UART_MspInit+0x33c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	4b49      	ldr	r3, [pc, #292]	@ (800307c <HAL_UART_MspInit+0x348>)
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	4a48      	ldr	r2, [pc, #288]	@ (800307c <HAL_UART_MspInit+0x348>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f60:	4b46      	ldr	r3, [pc, #280]	@ (800307c <HAL_UART_MspInit+0x348>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	4b42      	ldr	r3, [pc, #264]	@ (800307c <HAL_UART_MspInit+0x348>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	4a41      	ldr	r2, [pc, #260]	@ (800307c <HAL_UART_MspInit+0x348>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800307c <HAL_UART_MspInit+0x348>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f88:	230c      	movs	r3, #12
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f98:	2307      	movs	r3, #7
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4837      	ldr	r0, [pc, #220]	@ (8003080 <HAL_UART_MspInit+0x34c>)
 8002fa4:	f001 f8bc 	bl	8004120 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002fa8:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002faa:	4a37      	ldr	r2, [pc, #220]	@ (8003088 <HAL_UART_MspInit+0x354>)
 8002fac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002fae:	4b35      	ldr	r3, [pc, #212]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fb0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fb6:	4b33      	ldr	r3, [pc, #204]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fb8:	2240      	movs	r2, #64	@ 0x40
 8002fba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fc2:	4b30      	ldr	r3, [pc, #192]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fca:	4b2e      	ldr	r3, [pc, #184]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fdc:	4b29      	ldr	r3, [pc, #164]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe2:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002fe8:	4826      	ldr	r0, [pc, #152]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002fea:	f000 fc97 	bl	800391c <HAL_DMA_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8002ff4:	f7ff f96a 	bl	80022cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a22      	ldr	r2, [pc, #136]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8002ffc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ffe:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <HAL_UART_MspInit+0x350>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003004:	4b21      	ldr	r3, [pc, #132]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003006:	4a22      	ldr	r2, [pc, #136]	@ (8003090 <HAL_UART_MspInit+0x35c>)
 8003008:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_UART_MspInit+0x358>)
 800300c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003010:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003012:	4b1e      	ldr	r3, [pc, #120]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003018:	4b1c      	ldr	r3, [pc, #112]	@ (800308c <HAL_UART_MspInit+0x358>)
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800301e:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003020:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003024:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003026:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800302c:	4b17      	ldr	r3, [pc, #92]	@ (800308c <HAL_UART_MspInit+0x358>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003032:	4b16      	ldr	r3, [pc, #88]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003034:	2200      	movs	r2, #0
 8003036:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_UART_MspInit+0x358>)
 800303a:	2200      	movs	r2, #0
 800303c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800303e:	4b13      	ldr	r3, [pc, #76]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003040:	2200      	movs	r2, #0
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003044:	4811      	ldr	r0, [pc, #68]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003046:	f000 fc69 	bl	800391c <HAL_DMA_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_UART_MspInit+0x320>
      Error_Handler();
 8003050:	f7ff f93c 	bl	80022cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <HAL_UART_MspInit+0x358>)
 8003058:	63da      	str	r2, [r3, #60]	@ 0x3c
 800305a:	4a0c      	ldr	r2, [pc, #48]	@ (800308c <HAL_UART_MspInit+0x358>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003060:	2200      	movs	r2, #0
 8003062:	2100      	movs	r1, #0
 8003064:	2026      	movs	r0, #38	@ 0x26
 8003066:	f000 fc22 	bl	80038ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800306a:	2026      	movs	r0, #38	@ 0x26
 800306c:	f000 fc3b 	bl	80038e6 <HAL_NVIC_EnableIRQ>
}
 8003070:	bf00      	nop
 8003072:	3738      	adds	r7, #56	@ 0x38
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40004400 	.word	0x40004400
 800307c:	40023800 	.word	0x40023800
 8003080:	40020000 	.word	0x40020000
 8003084:	20000560 	.word	0x20000560
 8003088:	400260a0 	.word	0x400260a0
 800308c:	200005c0 	.word	0x200005c0
 8003090:	40026088 	.word	0x40026088

08003094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003098:	f7ff fa80 	bl	800259c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800309c:	480c      	ldr	r0, [pc, #48]	@ (80030d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800309e:	490d      	ldr	r1, [pc, #52]	@ (80030d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030a0:	4a0d      	ldr	r2, [pc, #52]	@ (80030d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a4:	e002      	b.n	80030ac <LoopCopyDataInit>

080030a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030aa:	3304      	adds	r3, #4

080030ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b0:	d3f9      	bcc.n	80030a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030b2:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030b4:	4c0a      	ldr	r4, [pc, #40]	@ (80030e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b8:	e001      	b.n	80030be <LoopFillZerobss>

080030ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030bc:	3204      	adds	r2, #4

080030be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c0:	d3fb      	bcc.n	80030ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80030c2:	f005 f877 	bl	80081b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c6:	f7ff f865 	bl	8002194 <main>
  bx  lr    
 80030ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80030d8:	08008d58 	.word	0x08008d58
  ldr r2, =_sbss
 80030dc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80030e0:	2000076c 	.word	0x2000076c

080030e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e4:	e7fe      	b.n	80030e4 <ADC_IRQHandler>
	...

080030e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <HAL_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <HAL_Init+0x40>)
 80030f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <HAL_Init+0x40>)
 80030fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a07      	ldr	r2, [pc, #28]	@ (8003128 <HAL_Init+0x40>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003110:	2003      	movs	r0, #3
 8003112:	f000 fbc1 	bl	8003898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003116:	2000      	movs	r0, #0
 8003118:	f000 f808 	bl	800312c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800311c:	f7ff f95a 	bl	80023d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00

0800312c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_InitTick+0x54>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_InitTick+0x58>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003142:	fbb3 f3f1 	udiv	r3, r3, r1
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fbd9 	bl	8003902 <HAL_SYSTICK_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e00e      	b.n	8003178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d80a      	bhi.n	8003176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003160:	2200      	movs	r2, #0
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003168:	f000 fba1 	bl	80038ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800316c:	4a06      	ldr	r2, [pc, #24]	@ (8003188 <HAL_InitTick+0x5c>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000040 	.word	0x20000040
 8003184:	20000048 	.word	0x20000048
 8003188:	20000044 	.word	0x20000044

0800318c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_IncTick+0x20>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_IncTick+0x24>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4413      	add	r3, r2
 800319c:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <HAL_IncTick+0x24>)
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000048 	.word	0x20000048
 80031b0:	20000620 	.word	0x20000620

080031b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return uwTick;
 80031b8:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_GetTick+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000620 	.word	0x20000620

080031cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff ffee 	bl	80031b4 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031e4:	d005      	beq.n	80031f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_Delay+0x44>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031f2:	bf00      	nop
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d8f7      	bhi.n	80031f4 <HAL_Delay+0x28>
  {
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000048 	.word	0x20000048

08003214 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e033      	b.n	8003292 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fe5e 	bl	8001ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d118      	bne.n	8003284 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800325a:	f023 0302 	bic.w	r3, r3, #2
 800325e:	f043 0202 	orr.w	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f94a 	bl	8003500 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
 8003282:	e001      	b.n	8003288 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e113      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x244>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d925      	bls.n	8003314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	3b1e      	subs	r3, #30
 80032de:	2207      	movs	r2, #7
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43da      	mvns	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	400a      	ands	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68d9      	ldr	r1, [r3, #12]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	4603      	mov	r3, r0
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4403      	add	r3, r0
 8003306:	3b1e      	subs	r3, #30
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e022      	b.n	800335a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	2207      	movs	r2, #7
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6919      	ldr	r1, [r3, #16]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	4603      	mov	r3, r0
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4403      	add	r3, r0
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d824      	bhi.n	80033ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b05      	subs	r3, #5
 8003374:	221f      	movs	r2, #31
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b05      	subs	r3, #5
 800339e:	fa00 f203 	lsl.w	r2, r0, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033aa:	e04c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d824      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b23      	subs	r3, #35	@ 0x23
 80033c6:	221f      	movs	r2, #31
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b23      	subs	r3, #35	@ 0x23
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80033fc:	e023      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b41      	subs	r3, #65	@ 0x41
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b41      	subs	r3, #65	@ 0x41
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003446:	4b29      	ldr	r3, [pc, #164]	@ (80034ec <HAL_ADC_ConfigChannel+0x250>)
 8003448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a28      	ldr	r2, [pc, #160]	@ (80034f0 <HAL_ADC_ConfigChannel+0x254>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d10f      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1d8>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d10b      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <HAL_ADC_ConfigChannel+0x254>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12b      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x23a>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	@ (80034f4 <HAL_ADC_ConfigChannel+0x258>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <HAL_ADC_ConfigChannel+0x1f4>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b11      	cmp	r3, #17
 800348e:	d122      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a11      	ldr	r2, [pc, #68]	@ (80034f4 <HAL_ADC_ConfigChannel+0x258>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d111      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_ADC_ConfigChannel+0x25c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a11      	ldr	r2, [pc, #68]	@ (80034fc <HAL_ADC_ConfigChannel+0x260>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	0c9a      	lsrs	r2, r3, #18
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034c8:	e002      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40012300 	.word	0x40012300
 80034f0:	40012000 	.word	0x40012000
 80034f4:	10000012 	.word	0x10000012
 80034f8:	20000040 	.word	0x20000040
 80034fc:	431bde83 	.word	0x431bde83

08003500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003508:	4b79      	ldr	r3, [pc, #484]	@ (80036f0 <ADC_Init+0x1f0>)
 800350a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800357a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	4a58      	ldr	r2, [pc, #352]	@ (80036f4 <ADC_Init+0x1f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6899      	ldr	r1, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	e00f      	b.n	80035fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0202 	bic.w	r2, r2, #2
 800360c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6899      	ldr	r1, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7e1b      	ldrb	r3, [r3, #24]
 8003618:	005a      	lsls	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800363a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800364a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	3b01      	subs	r3, #1
 8003658:	035a      	lsls	r2, r3, #13
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e007      	b.n	8003674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003672:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	3b01      	subs	r3, #1
 8003690:	051a      	lsls	r2, r3, #20
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036b6:	025a      	lsls	r2, r3, #9
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	029a      	lsls	r2, r3, #10
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012300 	.word	0x40012300
 80036f4:	0f000001 	.word	0x0f000001

080036f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372a:	4a04      	ldr	r2, [pc, #16]	@ (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60d3      	str	r3, [r2, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <__NVIC_GetPriorityGrouping+0x18>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f003 0307 	and.w	r3, r3, #7
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0b      	blt.n	8003786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4907      	ldr	r1, [pc, #28]	@ (8003794 <__NVIC_EnableIRQ+0x38>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	@ (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	@ (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	@ 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f1c3 0307 	rsb	r3, r3, #7
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf28      	it	cs
 800380a:	2304      	movcs	r3, #4
 800380c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3304      	adds	r3, #4
 8003812:	2b06      	cmp	r3, #6
 8003814:	d902      	bls.n	800381c <NVIC_EncodePriority+0x30>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3b03      	subs	r3, #3
 800381a:	e000      	b.n	800381e <NVIC_EncodePriority+0x32>
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	401a      	ands	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003834:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	43d9      	mvns	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	4313      	orrs	r3, r2
         );
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	@ 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003864:	d301      	bcc.n	800386a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003866:	2301      	movs	r3, #1
 8003868:	e00f      	b.n	800388a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386a:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <SysTick_Config+0x40>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003872:	210f      	movs	r1, #15
 8003874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003878:	f7ff ff8e 	bl	8003798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <SysTick_Config+0x40>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003882:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <SysTick_Config+0x40>)
 8003884:	2207      	movs	r2, #7
 8003886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	e000e010 	.word	0xe000e010

08003898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ff29 	bl	80036f8 <__NVIC_SetPriorityGrouping>
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038c0:	f7ff ff3e 	bl	8003740 <__NVIC_GetPriorityGrouping>
 80038c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	6978      	ldr	r0, [r7, #20]
 80038cc:	f7ff ff8e 	bl	80037ec <NVIC_EncodePriority>
 80038d0:	4602      	mov	r2, r0
 80038d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff5d 	bl	8003798 <__NVIC_SetPriority>
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff31 	bl	800375c <__NVIC_EnableIRQ>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ffa2 	bl	8003854 <SysTick_Config>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003928:	f7ff fc44 	bl	80031b4 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e099      	b.n	8003a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003958:	e00f      	b.n	800397a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800395a:	f7ff fc2b 	bl	80031b4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b05      	cmp	r3, #5
 8003966:	d908      	bls.n	800397a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2203      	movs	r2, #3
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e078      	b.n	8003a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e8      	bne.n	800395a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_DMA_Init+0x158>)
 8003994:	4013      	ands	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d107      	bne.n	80039e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	4313      	orrs	r3, r2
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0307 	bic.w	r3, r3, #7
 80039fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d117      	bne.n	8003a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb01 	bl	8004028 <DMA_CheckFifoParam>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2240      	movs	r2, #64	@ 0x40
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e016      	b.n	8003a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fab8 	bl	8003fbc <DMA_CalcBaseAndBitshift>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a54:	223f      	movs	r2, #63	@ 0x3f
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	f010803f 	.word	0xf010803f

08003a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Start_IT+0x26>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e040      	b.n	8003b20 <HAL_DMA_Start_IT+0xa8>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d12f      	bne.n	8003b12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa4a 	bl	8003f60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	223f      	movs	r2, #63	@ 0x3f
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0216 	orr.w	r2, r2, #22
 8003ae6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e005      	b.n	8003b1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b36:	f7ff fb3d 	bl	80031b4 <HAL_GetTick>
 8003b3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d008      	beq.n	8003b5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2280      	movs	r2, #128	@ 0x80
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e052      	b.n	8003c00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0216 	bic.w	r2, r2, #22
 8003b68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_DMA_Abort+0x62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003baa:	e013      	b.n	8003bd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bac:	f7ff fb02 	bl	80031b4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d90c      	bls.n	8003bd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e015      	b.n	8003c00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e4      	bne.n	8003bac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be6:	223f      	movs	r2, #63	@ 0x3f
 8003be8:	409a      	lsls	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2280      	movs	r2, #128	@ 0x80
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00c      	b.n	8003c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2205      	movs	r2, #5
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c58:	4b8e      	ldr	r3, [pc, #568]	@ (8003e94 <HAL_DMA_IRQHandler+0x248>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003e98 <HAL_DMA_IRQHandler+0x24c>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	2208      	movs	r2, #8
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01a      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	2201      	movs	r2, #1
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	2204      	movs	r2, #4
 8003d12:	409a      	lsls	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	2210      	movs	r2, #16
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d043      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03c      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	2210      	movs	r2, #16
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d024      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
 8003d7a:	e01f      	b.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
 8003d8c:	e016      	b.n	8003dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0208 	bic.w	r2, r2, #8
 8003daa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 808f 	beq.w	8003eec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8087 	beq.w	8003eec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de2:	2220      	movs	r2, #32
 8003de4:	409a      	lsls	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d136      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0216 	bic.w	r2, r2, #22
 8003e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x1da>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	223f      	movs	r2, #63	@ 0x3f
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d07e      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
        }
        return;
 8003e62:	e079      	b.n	8003f58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01d      	beq.n	8003eae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	e02c      	b.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
 8003e92:	bf00      	nop
 8003e94:	20000040 	.word	0x20000040
 8003e98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e01e      	b.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0210 	bic.w	r2, r2, #16
 8003eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d032      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2205      	movs	r2, #5
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d307      	bcc.n	8003f34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f2      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x2cc>
 8003f32:	e000      	b.n	8003f36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f58:	bf00      	nop
    }
  }
}
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b40      	cmp	r3, #64	@ 0x40
 8003f8c:	d108      	bne.n	8003fa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f9e:	e007      	b.n	8003fb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	3b10      	subs	r3, #16
 8003fcc:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <DMA_CalcBaseAndBitshift+0x64>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fd6:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <DMA_CalcBaseAndBitshift+0x68>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d909      	bls.n	8003ffe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ffc:	e007      	b.n	800400e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	aaaaaaab 	.word	0xaaaaaaab
 8004024:	08008d0c 	.word	0x08008d0c

08004028 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d11f      	bne.n	8004082 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d856      	bhi.n	80040f6 <DMA_CheckFifoParam+0xce>
 8004048:	a201      	add	r2, pc, #4	@ (adr r2, 8004050 <DMA_CheckFifoParam+0x28>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004061 	.word	0x08004061
 8004054:	08004073 	.word	0x08004073
 8004058:	08004061 	.word	0x08004061
 800405c:	080040f7 	.word	0x080040f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d046      	beq.n	80040fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e043      	b.n	80040fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800407a:	d140      	bne.n	80040fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004080:	e03d      	b.n	80040fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800408a:	d121      	bne.n	80040d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d837      	bhi.n	8004102 <DMA_CheckFifoParam+0xda>
 8004092:	a201      	add	r2, pc, #4	@ (adr r2, 8004098 <DMA_CheckFifoParam+0x70>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040af 	.word	0x080040af
 80040a0:	080040a9 	.word	0x080040a9
 80040a4:	080040c1 	.word	0x080040c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e030      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d025      	beq.n	8004106 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040be:	e022      	b.n	8004106 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040c8:	d11f      	bne.n	800410a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040ce:	e01c      	b.n	800410a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d903      	bls.n	80040de <DMA_CheckFifoParam+0xb6>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d003      	beq.n	80040e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040dc:	e018      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      break;
 80040e2:	e015      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00e      	beq.n	800410e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      break;
 80040f4:	e00b      	b.n	800410e <DMA_CheckFifoParam+0xe6>
      break;
 80040f6:	bf00      	nop
 80040f8:	e00a      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fa:	bf00      	nop
 80040fc:	e008      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
 8004100:	e006      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;   
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 800410e:	bf00      	nop
    }
  } 
  
  return status; 
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	@ 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e165      	b.n	8004408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800413c:	2201      	movs	r2, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	f040 8154 	bne.w	8004402 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d005      	beq.n	8004172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800416e:	2b02      	cmp	r3, #2
 8004170:	d130      	bne.n	80041d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a8:	2201      	movs	r2, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 0201 	and.w	r2, r3, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d017      	beq.n	8004210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d123      	bne.n	8004264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	08da      	lsrs	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3208      	adds	r2, #8
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0203 	and.w	r2, r3, #3
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80ae 	beq.w	8004402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80042b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c2:	4a58      	ldr	r2, [pc, #352]	@ (8004424 <HAL_GPIO_Init+0x304>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004428 <HAL_GPIO_Init+0x308>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d025      	beq.n	800433a <HAL_GPIO_Init+0x21a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a4e      	ldr	r2, [pc, #312]	@ (800442c <HAL_GPIO_Init+0x30c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01f      	beq.n	8004336 <HAL_GPIO_Init+0x216>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <HAL_GPIO_Init+0x310>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d019      	beq.n	8004332 <HAL_GPIO_Init+0x212>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a4c      	ldr	r2, [pc, #304]	@ (8004434 <HAL_GPIO_Init+0x314>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_GPIO_Init+0x20e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a4b      	ldr	r2, [pc, #300]	@ (8004438 <HAL_GPIO_Init+0x318>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00d      	beq.n	800432a <HAL_GPIO_Init+0x20a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a4a      	ldr	r2, [pc, #296]	@ (800443c <HAL_GPIO_Init+0x31c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <HAL_GPIO_Init+0x206>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a49      	ldr	r2, [pc, #292]	@ (8004440 <HAL_GPIO_Init+0x320>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d101      	bne.n	8004322 <HAL_GPIO_Init+0x202>
 800431e:	2306      	movs	r3, #6
 8004320:	e00c      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004322:	2307      	movs	r3, #7
 8004324:	e00a      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004326:	2305      	movs	r3, #5
 8004328:	e008      	b.n	800433c <HAL_GPIO_Init+0x21c>
 800432a:	2304      	movs	r3, #4
 800432c:	e006      	b.n	800433c <HAL_GPIO_Init+0x21c>
 800432e:	2303      	movs	r3, #3
 8004330:	e004      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004332:	2302      	movs	r3, #2
 8004334:	e002      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_GPIO_Init+0x21c>
 800433a:	2300      	movs	r3, #0
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	f002 0203 	and.w	r2, r2, #3
 8004342:	0092      	lsls	r2, r2, #2
 8004344:	4093      	lsls	r3, r2
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800434c:	4935      	ldr	r1, [pc, #212]	@ (8004424 <HAL_GPIO_Init+0x304>)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	089b      	lsrs	r3, r3, #2
 8004352:	3302      	adds	r3, #2
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435a:	4b3a      	ldr	r3, [pc, #232]	@ (8004444 <HAL_GPIO_Init+0x324>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800437e:	4a31      	ldr	r2, [pc, #196]	@ (8004444 <HAL_GPIO_Init+0x324>)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004384:	4b2f      	ldr	r3, [pc, #188]	@ (8004444 <HAL_GPIO_Init+0x324>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043a8:	4a26      	ldr	r2, [pc, #152]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ae:	4b25      	ldr	r3, [pc, #148]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043fc:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3301      	adds	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	f67f ae96 	bls.w	800413c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3724      	adds	r7, #36	@ 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	40013800 	.word	0x40013800
 8004428:	40020000 	.word	0x40020000
 800442c:	40020400 	.word	0x40020400
 8004430:	40020800 	.word	0x40020800
 8004434:	40020c00 	.word	0x40020c00
 8004438:	40021000 	.word	0x40021000
 800443c:	40021400 	.word	0x40021400
 8004440:	40021800 	.word	0x40021800
 8004444:	40013c00 	.word	0x40013c00

08004448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
 8004454:	4613      	mov	r3, r2
 8004456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004458:	787b      	ldrb	r3, [r7, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004464:	e003      	b.n	800446e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	041a      	lsls	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	619a      	str	r2, [r3, #24]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004486:	4b08      	ldr	r3, [pc, #32]	@ (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004492:	4a05      	ldr	r2, [pc, #20]	@ (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f806 	bl	80044ac <HAL_GPIO_EXTI_Callback>
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013c00 	.word	0x40013c00

080044ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	4b20      	ldr	r3, [pc, #128]	@ (8004554 <HAL_PWREx_EnableOverDrive+0x90>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004554 <HAL_PWREx_EnableOverDrive+0x90>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044de:	4b1d      	ldr	r3, [pc, #116]	@ (8004554 <HAL_PWREx_EnableOverDrive+0x90>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <HAL_PWREx_EnableOverDrive+0x94>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f0:	f7fe fe60 	bl	80031b4 <HAL_GetTick>
 80044f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044f6:	e009      	b.n	800450c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044f8:	f7fe fe5c 	bl	80031b4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004506:	d901      	bls.n	800450c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e01f      	b.n	800454c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800450c:	4b13      	ldr	r3, [pc, #76]	@ (800455c <HAL_PWREx_EnableOverDrive+0x98>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004518:	d1ee      	bne.n	80044f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800451a:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_PWREx_EnableOverDrive+0x9c>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004520:	f7fe fe48 	bl	80031b4 <HAL_GetTick>
 8004524:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004526:	e009      	b.n	800453c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004528:	f7fe fe44 	bl	80031b4 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004536:	d901      	bls.n	800453c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e007      	b.n	800454c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800453c:	4b07      	ldr	r3, [pc, #28]	@ (800455c <HAL_PWREx_EnableOverDrive+0x98>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004548:	d1ee      	bne.n	8004528 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	420e0040 	.word	0x420e0040
 800455c:	40007000 	.word	0x40007000
 8004560:	420e0044 	.word	0x420e0044

08004564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0cc      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004578:	4b68      	ldr	r3, [pc, #416]	@ (800471c <HAL_RCC_ClockConfig+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d90c      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b65      	ldr	r3, [pc, #404]	@ (800471c <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b63      	ldr	r3, [pc, #396]	@ (800471c <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0b8      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b8:	4b59      	ldr	r3, [pc, #356]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a58      	ldr	r2, [pc, #352]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d0:	4b53      	ldr	r3, [pc, #332]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a52      	ldr	r2, [pc, #328]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045dc:	4b50      	ldr	r3, [pc, #320]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	494d      	ldr	r1, [pc, #308]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d044      	beq.n	8004684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	4b47      	ldr	r3, [pc, #284]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d119      	bne.n	8004642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07f      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d003      	beq.n	8004622 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	2b03      	cmp	r3, #3
 8004620:	d107      	bne.n	8004632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004622:	4b3f      	ldr	r3, [pc, #252]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e06f      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e067      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004642:	4b37      	ldr	r3, [pc, #220]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 0203 	bic.w	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4934      	ldr	r1, [pc, #208]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004654:	f7fe fdae 	bl	80031b4 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	e00a      	b.n	8004672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fe fdaa 	bl	80031b4 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e04f      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 020c 	and.w	r2, r3, #12
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	429a      	cmp	r2, r3
 8004682:	d1eb      	bne.n	800465c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004684:	4b25      	ldr	r3, [pc, #148]	@ (800471c <HAL_RCC_ClockConfig+0x1b8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d20c      	bcs.n	80046ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b22      	ldr	r3, [pc, #136]	@ (800471c <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b20      	ldr	r3, [pc, #128]	@ (800471c <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e032      	b.n	8004712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b8:	4b19      	ldr	r3, [pc, #100]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4916      	ldr	r1, [pc, #88]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d6:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	490e      	ldr	r1, [pc, #56]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ea:	f000 f855 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	490a      	ldr	r1, [pc, #40]	@ (8004724 <HAL_RCC_ClockConfig+0x1c0>)
 80046fc:	5ccb      	ldrb	r3, [r1, r3]
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fd0e 	bl	800312c <HAL_InitTick>

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40023c00 	.word	0x40023c00
 8004720:	40023800 	.word	0x40023800
 8004724:	08008cf4 	.word	0x08008cf4
 8004728:	20000040 	.word	0x20000040
 800472c:	20000044 	.word	0x20000044

08004730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004734:	4b03      	ldr	r3, [pc, #12]	@ (8004744 <HAL_RCC_GetHCLKFreq+0x14>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000040 	.word	0x20000040

08004748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800474c:	f7ff fff0 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	0a9b      	lsrs	r3, r3, #10
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	4903      	ldr	r1, [pc, #12]	@ (800476c <HAL_RCC_GetPCLK1Freq+0x24>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40023800 	.word	0x40023800
 800476c:	08008d04 	.word	0x08008d04

08004770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004774:	f7ff ffdc 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	0b5b      	lsrs	r3, r3, #13
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	4903      	ldr	r1, [pc, #12]	@ (8004794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40023800 	.word	0x40023800
 8004794:	08008d04 	.word	0x08008d04

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800479c:	b0ae      	sub	sp, #184	@ 0xb8
 800479e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047be:	4bcb      	ldr	r3, [pc, #812]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	f200 8206 	bhi.w	8004bd8 <HAL_RCC_GetSysClockFreq+0x440>
 80047cc:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	08004809 	.word	0x08004809
 80047d8:	08004bd9 	.word	0x08004bd9
 80047dc:	08004bd9 	.word	0x08004bd9
 80047e0:	08004bd9 	.word	0x08004bd9
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004bd9 	.word	0x08004bd9
 80047ec:	08004bd9 	.word	0x08004bd9
 80047f0:	08004bd9 	.word	0x08004bd9
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004bd9 	.word	0x08004bd9
 80047fc:	08004bd9 	.word	0x08004bd9
 8004800:	08004bd9 	.word	0x08004bd9
 8004804:	08004a09 	.word	0x08004a09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4bb9      	ldr	r3, [pc, #740]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x358>)
 800480a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800480e:	e1e7      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004810:	4bb8      	ldr	r3, [pc, #736]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004816:	e1e3      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004818:	4bb4      	ldr	r3, [pc, #720]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004824:	4bb1      	ldr	r3, [pc, #708]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d071      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004830:	4bae      	ldr	r3, [pc, #696]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	099b      	lsrs	r3, r3, #6
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800483c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800484c:	2300      	movs	r3, #0
 800484e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004856:	4622      	mov	r2, r4
 8004858:	462b      	mov	r3, r5
 800485a:	f04f 0000 	mov.w	r0, #0
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	0159      	lsls	r1, r3, #5
 8004864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004868:	0150      	lsls	r0, r2, #5
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4621      	mov	r1, r4
 8004870:	1a51      	subs	r1, r2, r1
 8004872:	6439      	str	r1, [r7, #64]	@ 0x40
 8004874:	4629      	mov	r1, r5
 8004876:	eb63 0301 	sbc.w	r3, r3, r1
 800487a:	647b      	str	r3, [r7, #68]	@ 0x44
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004888:	4649      	mov	r1, r9
 800488a:	018b      	lsls	r3, r1, #6
 800488c:	4641      	mov	r1, r8
 800488e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004892:	4641      	mov	r1, r8
 8004894:	018a      	lsls	r2, r1, #6
 8004896:	4641      	mov	r1, r8
 8004898:	1a51      	subs	r1, r2, r1
 800489a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800489c:	4649      	mov	r1, r9
 800489e:	eb63 0301 	sbc.w	r3, r3, r1
 80048a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80048b0:	4649      	mov	r1, r9
 80048b2:	00cb      	lsls	r3, r1, #3
 80048b4:	4641      	mov	r1, r8
 80048b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ba:	4641      	mov	r1, r8
 80048bc:	00ca      	lsls	r2, r1, #3
 80048be:	4610      	mov	r0, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	4622      	mov	r2, r4
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ca:	462b      	mov	r3, r5
 80048cc:	460a      	mov	r2, r1
 80048ce:	eb42 0303 	adc.w	r3, r2, r3
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048e0:	4629      	mov	r1, r5
 80048e2:	024b      	lsls	r3, r1, #9
 80048e4:	4621      	mov	r1, r4
 80048e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ea:	4621      	mov	r1, r4
 80048ec:	024a      	lsls	r2, r1, #9
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004900:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004904:	f7fc f8d2 	bl	8000aac <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004912:	e067      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004914:	4b75      	ldr	r3, [pc, #468]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004920:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004924:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800492e:	2300      	movs	r3, #0
 8004930:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004932:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4621      	mov	r1, r4
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004954:	4629      	mov	r1, r5
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004968:	4649      	mov	r1, r9
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4641      	mov	r1, r8
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4641      	mov	r1, r8
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4641      	mov	r1, r8
 8004978:	ebb2 0a01 	subs.w	sl, r2, r1
 800497c:	4649      	mov	r1, r9
 800497e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800498e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004996:	4692      	mov	sl, r2
 8004998:	469b      	mov	fp, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb1a 0303 	adds.w	r3, sl, r3
 80049a0:	623b      	str	r3, [r7, #32]
 80049a2:	462b      	mov	r3, r5
 80049a4:	eb4b 0303 	adc.w	r3, fp, r3
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80049b6:	4629      	mov	r1, r5
 80049b8:	028b      	lsls	r3, r1, #10
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c0:	4621      	mov	r1, r4
 80049c2:	028a      	lsls	r2, r1, #10
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049cc:	2200      	movs	r2, #0
 80049ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80049d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80049d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80049d6:	f7fc f869 	bl	8000aac <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4613      	mov	r3, r2
 80049e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e4:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	3301      	adds	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80049f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a06:	e0eb      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a08:	4b38      	ldr	r3, [pc, #224]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a14:	4b35      	ldr	r3, [pc, #212]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d06b      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a20:	4b32      	ldr	r3, [pc, #200]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x354>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	2200      	movs	r2, #0
 8004a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a34:	2300      	movs	r3, #0
 8004a36:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	462b      	mov	r3, r5
 8004a40:	f04f 0000 	mov.w	r0, #0
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	0159      	lsls	r1, r3, #5
 8004a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a4e:	0150      	lsls	r0, r2, #5
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4621      	mov	r1, r4
 8004a56:	1a51      	subs	r1, r2, r1
 8004a58:	61b9      	str	r1, [r7, #24]
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a6e:	4659      	mov	r1, fp
 8004a70:	018b      	lsls	r3, r1, #6
 8004a72:	4651      	mov	r1, sl
 8004a74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a78:	4651      	mov	r1, sl
 8004a7a:	018a      	lsls	r2, r1, #6
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ebb2 0801 	subs.w	r8, r2, r1
 8004a82:	4659      	mov	r1, fp
 8004a84:	eb63 0901 	sbc.w	r9, r3, r1
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a9c:	4690      	mov	r8, r2
 8004a9e:	4699      	mov	r9, r3
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	eb18 0303 	adds.w	r3, r8, r3
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	eb49 0303 	adc.w	r3, r9, r3
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004abc:	4629      	mov	r1, r5
 8004abe:	024b      	lsls	r3, r1, #9
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	024a      	lsls	r2, r1, #9
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ad6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ad8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004adc:	f7fb ffe6 	bl	8000aac <__aeabi_uldivmod>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aea:	e065      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x420>
 8004aec:	40023800 	.word	0x40023800
 8004af0:	00f42400 	.word	0x00f42400
 8004af4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	2200      	movs	r2, #0
 8004b00:	4618      	mov	r0, r3
 8004b02:	4611      	mov	r1, r2
 8004b04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b12:	4642      	mov	r2, r8
 8004b14:	464b      	mov	r3, r9
 8004b16:	f04f 0000 	mov.w	r0, #0
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	0159      	lsls	r1, r3, #5
 8004b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b24:	0150      	lsls	r0, r2, #5
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	1a51      	subs	r1, r2, r1
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	4649      	mov	r1, r9
 8004b32:	eb63 0301 	sbc.w	r3, r3, r1
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b44:	4659      	mov	r1, fp
 8004b46:	018b      	lsls	r3, r1, #6
 8004b48:	4651      	mov	r1, sl
 8004b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b4e:	4651      	mov	r1, sl
 8004b50:	018a      	lsls	r2, r1, #6
 8004b52:	4651      	mov	r1, sl
 8004b54:	1a54      	subs	r4, r2, r1
 8004b56:	4659      	mov	r1, fp
 8004b58:	eb63 0501 	sbc.w	r5, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	00eb      	lsls	r3, r5, #3
 8004b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6a:	00e2      	lsls	r2, r4, #3
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	461d      	mov	r5, r3
 8004b70:	4643      	mov	r3, r8
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	464b      	mov	r3, r9
 8004b78:	eb45 0303 	adc.w	r3, r5, r3
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	028b      	lsls	r3, r1, #10
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b94:	4621      	mov	r1, r4
 8004b96:	028a      	lsls	r2, r1, #10
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004ba6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004baa:	f7fb ff7f 	bl	8000aac <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0f1b      	lsrs	r3, r3, #28
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bd6:	e003      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	37b8      	adds	r7, #184	@ 0xb8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	00f42400 	.word	0x00f42400

08004bf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e28d      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8083 	beq.w	8004d1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c18:	4b94      	ldr	r3, [pc, #592]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d019      	beq.n	8004c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c24:	4b91      	ldr	r3, [pc, #580]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c30:	4b8e      	ldr	r3, [pc, #568]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c3c:	d00c      	beq.n	8004c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d112      	bne.n	8004c70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c4a:	4b88      	ldr	r3, [pc, #544]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c56:	d10b      	bne.n	8004c70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	4b84      	ldr	r3, [pc, #528]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d05b      	beq.n	8004d1c <HAL_RCC_OscConfig+0x124>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d157      	bne.n	8004d1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e25a      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c78:	d106      	bne.n	8004c88 <HAL_RCC_OscConfig+0x90>
 8004c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e01d      	b.n	8004cc4 <HAL_RCC_OscConfig+0xcc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0xb4>
 8004c92:	4b76      	ldr	r3, [pc, #472]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a75      	ldr	r2, [pc, #468]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b73      	ldr	r3, [pc, #460]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a72      	ldr	r2, [pc, #456]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0xcc>
 8004cac:	4b6f      	ldr	r3, [pc, #444]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6b      	ldr	r2, [pc, #428]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fe fa72 	bl	80031b4 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fe fa6e 	bl	80031b4 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e21f      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b61      	ldr	r3, [pc, #388]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0xdc>
 8004cf2:	e014      	b.n	8004d1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fa5e 	bl	80031b4 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fa5a 	bl	80031b4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	@ 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e20b      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	4b57      	ldr	r3, [pc, #348]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x104>
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d06f      	beq.n	8004e0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d2a:	4b50      	ldr	r3, [pc, #320]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d36:	4b4d      	ldr	r3, [pc, #308]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d105      	bne.n	8004d4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d42:	4b4a      	ldr	r3, [pc, #296]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4e:	4b47      	ldr	r3, [pc, #284]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d11c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b44      	ldr	r3, [pc, #272]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d66:	4b41      	ldr	r3, [pc, #260]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_RCC_OscConfig+0x186>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d001      	beq.n	8004d7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e1d3      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4937      	ldr	r1, [pc, #220]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	e03a      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9c:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <HAL_RCC_OscConfig+0x278>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fe fa07 	bl	80031b4 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fe fa03 	bl	80031b4 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e1b4      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b28      	ldr	r3, [pc, #160]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4925      	ldr	r1, [pc, #148]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	e015      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dde:	4b24      	ldr	r3, [pc, #144]	@ (8004e70 <HAL_RCC_OscConfig+0x278>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fe f9e6 	bl	80031b4 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fe f9e2 	bl	80031b4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e193      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d036      	beq.n	8004e84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fe f9c6 	bl	80031b4 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fe f9c2 	bl	80031b4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e173      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x234>
 8004e4a:	e01b      	b.n	8004e84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e52:	f7fe f9af 	bl	80031b4 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	e00e      	b.n	8004e78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5a:	f7fe f9ab 	bl	80031b4 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d907      	bls.n	8004e78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e15c      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	42470000 	.word	0x42470000
 8004e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e78:	4b8a      	ldr	r3, [pc, #552]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ea      	bne.n	8004e5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8097 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b83      	ldr	r3, [pc, #524]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b79      	ldr	r3, [pc, #484]	@ (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d118      	bne.n	8004f00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ece:	4b76      	ldr	r3, [pc, #472]	@ (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	@ (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fe f96b 	bl	80031b4 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fe f967 	bl	80031b4 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e118      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <HAL_RCC_OscConfig+0x31e>
 8004f08:	4b66      	ldr	r3, [pc, #408]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	4a65      	ldr	r2, [pc, #404]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f14:	e01c      	b.n	8004f50 <HAL_RCC_OscConfig+0x358>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x340>
 8004f1e:	4b61      	ldr	r3, [pc, #388]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f22:	4a60      	ldr	r2, [pc, #384]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2e:	4a5d      	ldr	r2, [pc, #372]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0x358>
 8004f38:	4b5a      	ldr	r3, [pc, #360]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3c:	4a59      	ldr	r2, [pc, #356]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f44:	4b57      	ldr	r3, [pc, #348]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f48:	4a56      	ldr	r2, [pc, #344]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fe f92c 	bl	80031b4 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fe f928 	bl	80031b4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0d7      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4b4b      	ldr	r3, [pc, #300]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ee      	beq.n	8004f60 <HAL_RCC_OscConfig+0x368>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fe f916 	bl	80031b4 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fe f912 	bl	80031b4 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0c1      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa2:	4b40      	ldr	r3, [pc, #256]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ee      	bne.n	8004f8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80ad 	beq.w	8005124 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fca:	4b36      	ldr	r3, [pc, #216]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d060      	beq.n	8005098 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d145      	bne.n	800506a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b33      	ldr	r3, [pc, #204]	@ (80050ac <HAL_RCC_OscConfig+0x4b4>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fe f8e6 	bl	80031b4 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fe f8e2 	bl	80031b4 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e093      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b29      	ldr	r3, [pc, #164]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	3b01      	subs	r3, #1
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	491b      	ldr	r1, [pc, #108]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800503c:	4b1b      	ldr	r3, [pc, #108]	@ (80050ac <HAL_RCC_OscConfig+0x4b4>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fe f8b7 	bl	80031b4 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504a:	f7fe f8b3 	bl	80031b4 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e064      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505c:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x452>
 8005068:	e05c      	b.n	8005124 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506a:	4b10      	ldr	r3, [pc, #64]	@ (80050ac <HAL_RCC_OscConfig+0x4b4>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fe f8a0 	bl	80031b4 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005078:	f7fe f89c 	bl	80031b4 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e04d      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x480>
 8005096:	e045      	b.n	8005124 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e040      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40007000 	.word	0x40007000
 80050ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <HAL_RCC_OscConfig+0x538>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d030      	beq.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d129      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d122      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050e0:	4013      	ands	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d119      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	3b01      	subs	r3, #1
 80050fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d10f      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40023800 	.word	0x40023800

08005134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e07b      	b.n	800523e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005156:	d009      	beq.n	800516c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	61da      	str	r2, [r3, #28]
 800515e:	e005      	b.n	800516c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd f8dc 	bl	8002344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f0:	ea42 0103 	orr.w	r1, r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	f003 0104 	and.w	r1, r3, #4
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	f003 0210 	and.w	r2, r3, #16
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800522c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b088      	sub	sp, #32
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_SPI_Transmit+0x22>
 8005264:	2302      	movs	r3, #2
 8005266:	e12d      	b.n	80054c4 <HAL_SPI_Transmit+0x27e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005270:	f7fd ffa0 	bl	80031b4 <HAL_GetTick>
 8005274:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d002      	beq.n	800528c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005286:	2302      	movs	r3, #2
 8005288:	77fb      	strb	r3, [r7, #31]
    goto error;
 800528a:	e116      	b.n	80054ba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_SPI_Transmit+0x52>
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800529c:	e10d      	b.n	80054ba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	88fa      	ldrh	r2, [r7, #6]
 80052b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e4:	d10f      	bne.n	8005306 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005310:	2b40      	cmp	r3, #64	@ 0x40
 8005312:	d007      	beq.n	8005324 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800532c:	d14f      	bne.n	80053ce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_SPI_Transmit+0xf6>
 8005336:	8afb      	ldrh	r3, [r7, #22]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d142      	bne.n	80053c2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	1c9a      	adds	r2, r3, #2
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005360:	e02f      	b.n	80053c2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d112      	bne.n	8005396 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005394:	e015      	b.n	80053c2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005396:	f7fd ff0d 	bl	80031b4 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d803      	bhi.n	80053ae <HAL_SPI_Transmit+0x168>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ac:	d102      	bne.n	80053b4 <HAL_SPI_Transmit+0x16e>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80053c0:	e07b      	b.n	80054ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1ca      	bne.n	8005362 <HAL_SPI_Transmit+0x11c>
 80053cc:	e050      	b.n	8005470 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_SPI_Transmit+0x196>
 80053d6:	8afb      	ldrh	r3, [r7, #22]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d144      	bne.n	8005466 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005402:	e030      	b.n	8005466 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b02      	cmp	r3, #2
 8005410:	d113      	bne.n	800543a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	7812      	ldrb	r2, [r2, #0]
 800541e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005438:	e015      	b.n	8005466 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543a:	f7fd febb 	bl	80031b4 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d803      	bhi.n	8005452 <HAL_SPI_Transmit+0x20c>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005450:	d102      	bne.n	8005458 <HAL_SPI_Transmit+0x212>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005464:	e029      	b.n	80054ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1c9      	bne.n	8005404 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	6839      	ldr	r1, [r7, #0]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fbed 	bl	8005c54 <SPI_EndRxTxTransaction>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e003      	b.n	80054ba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80054c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
 80054ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054f0:	e0fb      	b.n	80056ea <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fa:	d112      	bne.n	8005522 <HAL_SPI_Receive+0x56>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10e      	bne.n	8005522 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2204      	movs	r2, #4
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f8ef 	bl	80056fc <HAL_SPI_TransmitReceive>
 800551e:	4603      	mov	r3, r0
 8005520:	e0e8      	b.n	80056f4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_Receive+0x64>
 800552c:	2302      	movs	r3, #2
 800552e:	e0e1      	b.n	80056f4 <HAL_SPI_Receive+0x228>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fd fe3c 	bl	80031b4 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_SPI_Receive+0x7e>
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800554e:	e0cc      	b.n	80056ea <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2204      	movs	r2, #4
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005596:	d10f      	bne.n	80055b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c2:	2b40      	cmp	r3, #64	@ 0x40
 80055c4:	d007      	beq.n	80055d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d16a      	bne.n	80056b4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055de:	e032      	b.n	8005646 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d115      	bne.n	800561a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f103 020c 	add.w	r2, r3, #12
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005618:	e015      	b.n	8005646 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561a:	f7fd fdcb 	bl	80031b4 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d803      	bhi.n	8005632 <HAL_SPI_Receive+0x166>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005630:	d102      	bne.n	8005638 <HAL_SPI_Receive+0x16c>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005644:	e051      	b.n	80056ea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1c7      	bne.n	80055e0 <HAL_SPI_Receive+0x114>
 8005650:	e035      	b.n	80056be <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d113      	bne.n	8005688 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566a:	b292      	uxth	r2, r2
 800566c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005686:	e015      	b.n	80056b4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005688:	f7fd fd94 	bl	80031b4 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d803      	bhi.n	80056a0 <HAL_SPI_Receive+0x1d4>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Receive+0x1da>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80056b2:	e01a      	b.n	80056ea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1c9      	bne.n	8005652 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fa60 	bl	8005b88 <SPI_EndRxTransaction>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	75fb      	strb	r3, [r7, #23]
 80056e0:	e003      	b.n	80056ea <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	@ 0x30
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800570a:	2301      	movs	r3, #1
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_SPI_TransmitReceive+0x26>
 800571e:	2302      	movs	r3, #2
 8005720:	e198      	b.n	8005a54 <HAL_SPI_TransmitReceive+0x358>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572a:	f7fd fd43 	bl	80031b4 <HAL_GetTick>
 800572e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005740:	887b      	ldrh	r3, [r7, #2]
 8005742:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005748:	2b01      	cmp	r3, #1
 800574a:	d00f      	beq.n	800576c <HAL_SPI_TransmitReceive+0x70>
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005752:	d107      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d103      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x68>
 800575c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005760:	2b04      	cmp	r3, #4
 8005762:	d003      	beq.n	800576c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005764:	2302      	movs	r3, #2
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800576a:	e16d      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_SPI_TransmitReceive+0x82>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_TransmitReceive+0x82>
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005784:	e160      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b04      	cmp	r3, #4
 8005790:	d003      	beq.n	800579a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2205      	movs	r2, #5
 8005796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	887a      	ldrh	r2, [r7, #2]
 80057aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	887a      	ldrh	r2, [r7, #2]
 80057b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	887a      	ldrh	r2, [r7, #2]
 80057bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	887a      	ldrh	r2, [r7, #2]
 80057c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057da:	2b40      	cmp	r3, #64	@ 0x40
 80057dc:	d007      	beq.n	80057ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f6:	d17c      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x10a>
 8005800:	8b7b      	ldrh	r3, [r7, #26]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d16a      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582a:	e057      	b.n	80058dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b02      	cmp	r3, #2
 8005838:	d11b      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x176>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d016      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x176>
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d113      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	d119      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x1b8>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d014      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	b292      	uxth	r2, r2
 8005896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b0:	2301      	movs	r3, #1
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058b4:	f7fd fc7e 	bl	80031b4 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d80b      	bhi.n	80058dc <HAL_SPI_TransmitReceive+0x1e0>
 80058c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058ca:	d007      	beq.n	80058dc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80058da:	e0b5      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1a2      	bne.n	800582c <HAL_SPI_TransmitReceive+0x130>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d19d      	bne.n	800582c <HAL_SPI_TransmitReceive+0x130>
 80058f0:	e080      	b.n	80059f4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x204>
 80058fa:	8b7b      	ldrh	r3, [r7, #26]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d16f      	bne.n	80059e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005926:	e05b      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d11c      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x274>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d017      	beq.n	8005970 <HAL_SPI_TransmitReceive+0x274>
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d114      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d119      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x2b6>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d014      	beq.n	80059b2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059ae:	2301      	movs	r3, #1
 80059b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059b2:	f7fd fbff 	bl	80031b4 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059be:	429a      	cmp	r2, r3
 80059c0:	d803      	bhi.n	80059ca <HAL_SPI_TransmitReceive+0x2ce>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059c8:	d102      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x2d4>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d107      	bne.n	80059e0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80059de:	e033      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d19e      	bne.n	8005928 <HAL_SPI_TransmitReceive+0x22c>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d199      	bne.n	8005928 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f92b 	bl	8005c54 <SPI_EndRxTxTransaction>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d006      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005a10:	e01a      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3e:	e003      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005a50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3730      	adds	r7, #48	@ 0x30
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a6a:	b2db      	uxtb	r3, r3
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a88:	f7fd fb94 	bl	80031b4 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	4413      	add	r3, r2
 8005a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a98:	f7fd fb8c 	bl	80031b4 <HAL_GetTick>
 8005a9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a9e:	4b39      	ldr	r3, [pc, #228]	@ (8005b84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	015b      	lsls	r3, r3, #5
 8005aa4:	0d1b      	lsrs	r3, r3, #20
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
 8005aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aae:	e054      	b.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ab6:	d050      	beq.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ab8:	f7fd fb7c 	bl	80031b4 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d902      	bls.n	8005ace <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d13d      	bne.n	8005b4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae6:	d111      	bne.n	8005b0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af0:	d004      	beq.n	8005afc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005afa:	d107      	bne.n	8005b0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b14:	d10f      	bne.n	8005b36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e017      	b.n	8005b7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d19b      	bne.n	8005ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000040 	.word	0x20000040

08005b88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b9c:	d111      	bne.n	8005bc2 <SPI_EndRxTransaction+0x3a>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba6:	d004      	beq.n	8005bb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb0:	d107      	bne.n	8005bc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bca:	d12a      	bne.n	8005c22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd4:	d012      	beq.n	8005bfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2180      	movs	r1, #128	@ 0x80
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff ff49 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02d      	beq.n	8005c48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e026      	b.n	8005c4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	2101      	movs	r1, #1
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff ff36 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01a      	beq.n	8005c48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e013      	b.n	8005c4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff ff23 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	f043 0220 	orr.w	r2, r3, #32
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e000      	b.n	8005c4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2102      	movs	r1, #2
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff ff04 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7a:	f043 0220 	orr.w	r2, r3, #32
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e032      	b.n	8005cec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c86:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <SPI_EndRxTxTransaction+0xa0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf8 <SPI_EndRxTxTransaction+0xa4>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	0d5b      	lsrs	r3, r3, #21
 8005c92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ca4:	d112      	bne.n	8005ccc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2200      	movs	r2, #0
 8005cae:	2180      	movs	r1, #128	@ 0x80
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fee1 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d016      	beq.n	8005cea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e00f      	b.n	8005cec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b80      	cmp	r3, #128	@ 0x80
 8005ce4:	d0f2      	beq.n	8005ccc <SPI_EndRxTxTransaction+0x78>
 8005ce6:	e000      	b.n	8005cea <SPI_EndRxTxTransaction+0x96>
        break;
 8005ce8:	bf00      	nop
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20000040 	.word	0x20000040
 8005cf8:	165e9f81 	.word	0x165e9f81

08005cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e041      	b.n	8005d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fc fe82 	bl	8002a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 fbd2 	bl	80064e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d001      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e04e      	b.n	8005e52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a23      	ldr	r2, [pc, #140]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d022      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dde:	d01d      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d018      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00e      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1b      	ldr	r2, [pc, #108]	@ (8005e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d009      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x80>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a18      	ldr	r2, [pc, #96]	@ (8005e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d111      	bne.n	8005e40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d010      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e3e:	e007      	b.n	8005e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40010400 	.word	0x40010400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40001800 	.word	0x40001800

08005e7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10f      	bne.n	8005ec4 <HAL_TIM_Base_Stop_IT+0x48>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6a1a      	ldr	r2, [r3, #32]
 8005eaa:	f240 4344 	movw	r3, #1092	@ 0x444
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_Base_Stop_IT+0x48>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e041      	b.n	8005f70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f839 	bl	8005f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3304      	adds	r3, #4
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f000 fae3 	bl	80064e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d020      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0202 	mvn.w	r2, #2
 8005fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa65 	bl	80064a6 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa57 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fa68 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d020      	beq.n	800603c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01b      	beq.n	800603c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0204 	mvn.w	r2, #4
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa3f 	bl	80064a6 <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa31 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa42 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d020      	beq.n	8006088 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01b      	beq.n	8006088 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0208 	mvn.w	r2, #8
 8006058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2204      	movs	r2, #4
 800605e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa19 	bl	80064a6 <HAL_TIM_IC_CaptureCallback>
 8006074:	e005      	b.n	8006082 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa0b 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa1c 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b00      	cmp	r3, #0
 8006090:	d020      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01b      	beq.n	80060d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0210 	mvn.w	r2, #16
 80060a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2208      	movs	r2, #8
 80060aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9f3 	bl	80064a6 <HAL_TIM_IC_CaptureCallback>
 80060c0:	e005      	b.n	80060ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f9e5 	bl	8006492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f9f6 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00c      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0201 	mvn.w	r2, #1
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9c3 	bl	800647e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fe6c 	bl	8006df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f9c7 	bl	80064ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0220 	mvn.w	r2, #32
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fe3e 	bl	8006de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006186:	2302      	movs	r3, #2
 8006188:	e0ae      	b.n	80062e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b0c      	cmp	r3, #12
 8006196:	f200 809f 	bhi.w	80062d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800619a:	a201      	add	r2, pc, #4	@ (adr r2, 80061a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080062d9 	.word	0x080062d9
 80061a8:	080062d9 	.word	0x080062d9
 80061ac:	080062d9 	.word	0x080062d9
 80061b0:	08006215 	.word	0x08006215
 80061b4:	080062d9 	.word	0x080062d9
 80061b8:	080062d9 	.word	0x080062d9
 80061bc:	080062d9 	.word	0x080062d9
 80061c0:	08006257 	.word	0x08006257
 80061c4:	080062d9 	.word	0x080062d9
 80061c8:	080062d9 	.word	0x080062d9
 80061cc:	080062d9 	.word	0x080062d9
 80061d0:	08006297 	.word	0x08006297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fa2e 	bl	800663c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0208 	orr.w	r2, r2, #8
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0204 	bic.w	r2, r2, #4
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	619a      	str	r2, [r3, #24]
      break;
 8006212:	e064      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fa7e 	bl	800671c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800622e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6999      	ldr	r1, [r3, #24]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	021a      	lsls	r2, r3, #8
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	619a      	str	r2, [r3, #24]
      break;
 8006254:	e043      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fad3 	bl	8006808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0208 	orr.w	r2, r2, #8
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0204 	bic.w	r2, r2, #4
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	61da      	str	r2, [r3, #28]
      break;
 8006294:	e023      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fb27 	bl	80068f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69d9      	ldr	r1, [r3, #28]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	61da      	str	r2, [r3, #28]
      break;
 80062d6:	e002      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
      break;
 80062dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x1c>
 8006308:	2302      	movs	r3, #2
 800630a:	e0b4      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x186>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006344:	d03e      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800634a:	f200 8087 	bhi.w	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006352:	f000 8086 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x172>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800635a:	d87f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b70      	cmp	r3, #112	@ 0x70
 800635e:	d01a      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0xa6>
 8006360:	2b70      	cmp	r3, #112	@ 0x70
 8006362:	d87b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b60      	cmp	r3, #96	@ 0x60
 8006366:	d050      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x11a>
 8006368:	2b60      	cmp	r3, #96	@ 0x60
 800636a:	d877      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b50      	cmp	r3, #80	@ 0x50
 800636e:	d03c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xfa>
 8006370:	2b50      	cmp	r3, #80	@ 0x50
 8006372:	d873      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b40      	cmp	r3, #64	@ 0x40
 8006376:	d058      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x13a>
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d86f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b30      	cmp	r3, #48	@ 0x30
 800637e:	d064      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	2b30      	cmp	r3, #48	@ 0x30
 8006382:	d86b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d060      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d867      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d05a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15a>
 8006394:	e062      	b.n	800645c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a6:	f000 fb73 	bl	8006a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	609a      	str	r2, [r3, #8]
      break;
 80063c2:	e04f      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063d4:	f000 fb5c 	bl	8006a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063e6:	609a      	str	r2, [r3, #8]
      break;
 80063e8:	e03c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fad0 	bl	800699c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2150      	movs	r1, #80	@ 0x50
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fb29 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 8006408:	e02c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006416:	461a      	mov	r2, r3
 8006418:	f000 faef 	bl	80069fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2160      	movs	r1, #96	@ 0x60
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fb19 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 8006428:	e01c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006436:	461a      	mov	r2, r3
 8006438:	f000 fab0 	bl	800699c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2140      	movs	r1, #64	@ 0x40
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fb09 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 8006448:	e00c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f000 fb00 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 800645a:	e003      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	e000      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
	...

080064e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a46      	ldr	r2, [pc, #280]	@ (8006610 <TIM_Base_SetConfig+0x12c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a43      	ldr	r2, [pc, #268]	@ (8006614 <TIM_Base_SetConfig+0x130>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a42      	ldr	r2, [pc, #264]	@ (8006618 <TIM_Base_SetConfig+0x134>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a41      	ldr	r2, [pc, #260]	@ (800661c <TIM_Base_SetConfig+0x138>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a40      	ldr	r2, [pc, #256]	@ (8006620 <TIM_Base_SetConfig+0x13c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a35      	ldr	r2, [pc, #212]	@ (8006610 <TIM_Base_SetConfig+0x12c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d02b      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006544:	d027      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a32      	ldr	r2, [pc, #200]	@ (8006614 <TIM_Base_SetConfig+0x130>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d023      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a31      	ldr	r2, [pc, #196]	@ (8006618 <TIM_Base_SetConfig+0x134>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01f      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a30      	ldr	r2, [pc, #192]	@ (800661c <TIM_Base_SetConfig+0x138>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01b      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2f      	ldr	r2, [pc, #188]	@ (8006620 <TIM_Base_SetConfig+0x13c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d017      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2e      	ldr	r2, [pc, #184]	@ (8006624 <TIM_Base_SetConfig+0x140>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2d      	ldr	r2, [pc, #180]	@ (8006628 <TIM_Base_SetConfig+0x144>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00f      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2c      	ldr	r2, [pc, #176]	@ (800662c <TIM_Base_SetConfig+0x148>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00b      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2b      	ldr	r2, [pc, #172]	@ (8006630 <TIM_Base_SetConfig+0x14c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d007      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2a      	ldr	r2, [pc, #168]	@ (8006634 <TIM_Base_SetConfig+0x150>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a29      	ldr	r2, [pc, #164]	@ (8006638 <TIM_Base_SetConfig+0x154>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d108      	bne.n	80065a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800659c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a10      	ldr	r2, [pc, #64]	@ (8006610 <TIM_Base_SetConfig+0x12c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_Base_SetConfig+0xf8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a12      	ldr	r2, [pc, #72]	@ (8006620 <TIM_Base_SetConfig+0x13c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d103      	bne.n	80065e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d105      	bne.n	8006602 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	611a      	str	r2, [r3, #16]
  }
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40010000 	.word	0x40010000
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	40010400 	.word	0x40010400
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800
 8006630:	40001800 	.word	0x40001800
 8006634:	40001c00 	.word	0x40001c00
 8006638:	40002000 	.word	0x40002000

0800663c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f023 0201 	bic.w	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f023 0302 	bic.w	r3, r3, #2
 8006684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a20      	ldr	r2, [pc, #128]	@ (8006714 <TIM_OC1_SetConfig+0xd8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_OC1_SetConfig+0x64>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1f      	ldr	r2, [pc, #124]	@ (8006718 <TIM_OC1_SetConfig+0xdc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10c      	bne.n	80066ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0308 	bic.w	r3, r3, #8
 80066a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 0304 	bic.w	r3, r3, #4
 80066b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <TIM_OC1_SetConfig+0xd8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d003      	beq.n	80066ca <TIM_OC1_SetConfig+0x8e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a14      	ldr	r2, [pc, #80]	@ (8006718 <TIM_OC1_SetConfig+0xdc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d111      	bne.n	80066ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40010000 	.word	0x40010000
 8006718:	40010400 	.word	0x40010400

0800671c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 0210 	bic.w	r2, r3, #16
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0320 	bic.w	r3, r3, #32
 8006766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a22      	ldr	r2, [pc, #136]	@ (8006800 <TIM_OC2_SetConfig+0xe4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC2_SetConfig+0x68>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a21      	ldr	r2, [pc, #132]	@ (8006804 <TIM_OC2_SetConfig+0xe8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d10d      	bne.n	80067a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800679e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a17      	ldr	r2, [pc, #92]	@ (8006800 <TIM_OC2_SetConfig+0xe4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC2_SetConfig+0x94>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a16      	ldr	r2, [pc, #88]	@ (8006804 <TIM_OC2_SetConfig+0xe8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d113      	bne.n	80067d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400

08006808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a21      	ldr	r2, [pc, #132]	@ (80068e8 <TIM_OC3_SetConfig+0xe0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_OC3_SetConfig+0x66>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a20      	ldr	r2, [pc, #128]	@ (80068ec <TIM_OC3_SetConfig+0xe4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10d      	bne.n	800688a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a16      	ldr	r2, [pc, #88]	@ (80068e8 <TIM_OC3_SetConfig+0xe0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_OC3_SetConfig+0x92>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <TIM_OC3_SetConfig+0xe4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d113      	bne.n	80068c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40010400 	.word	0x40010400

080068f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800693a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	031b      	lsls	r3, r3, #12
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a12      	ldr	r2, [pc, #72]	@ (8006994 <TIM_OC4_SetConfig+0xa4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC4_SetConfig+0x68>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <TIM_OC4_SetConfig+0xa8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d109      	bne.n	800696c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800695e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	019b      	lsls	r3, r3, #6
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40010000 	.word	0x40010000
 8006998:	40010400 	.word	0x40010400

0800699c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f023 0201 	bic.w	r2, r3, #1
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f023 030a 	bic.w	r3, r3, #10
 80069d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	f023 0210 	bic.w	r2, r3, #16
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	031b      	lsls	r3, r3, #12
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	621a      	str	r2, [r3, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f043 0307 	orr.w	r3, r3, #7
 8006a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	021a      	lsls	r2, r3, #8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_TIMEx_PWMN_Start+0x24>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	e022      	b.n	8006b3a <HAL_TIMEx_PWMN_Start+0x6a>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d109      	bne.n	8006b0e <HAL_TIMEx_PWMN_Start+0x3e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	bf14      	ite	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	2300      	moveq	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	e015      	b.n	8006b3a <HAL_TIMEx_PWMN_Start+0x6a>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d109      	bne.n	8006b28 <HAL_TIMEx_PWMN_Start+0x58>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	e008      	b.n	8006b3a <HAL_TIMEx_PWMN_Start+0x6a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e06d      	b.n	8006c1e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <HAL_TIMEx_PWMN_Start+0x82>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b50:	e013      	b.n	8006b7a <HAL_TIMEx_PWMN_Start+0xaa>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d104      	bne.n	8006b62 <HAL_TIMEx_PWMN_Start+0x92>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b60:	e00b      	b.n	8006b7a <HAL_TIMEx_PWMN_Start+0xaa>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d104      	bne.n	8006b72 <HAL_TIMEx_PWMN_Start+0xa2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b70:	e003      	b.n	8006b7a <HAL_TIMEx_PWMN_Start+0xaa>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f940 	bl	8006e08 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a22      	ldr	r2, [pc, #136]	@ (8006c28 <HAL_TIMEx_PWMN_Start+0x158>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d022      	beq.n	8006be8 <HAL_TIMEx_PWMN_Start+0x118>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	d01d      	beq.n	8006be8 <HAL_TIMEx_PWMN_Start+0x118>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8006c2c <HAL_TIMEx_PWMN_Start+0x15c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d018      	beq.n	8006be8 <HAL_TIMEx_PWMN_Start+0x118>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <HAL_TIMEx_PWMN_Start+0x160>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <HAL_TIMEx_PWMN_Start+0x118>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c34 <HAL_TIMEx_PWMN_Start+0x164>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00e      	beq.n	8006be8 <HAL_TIMEx_PWMN_Start+0x118>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1a      	ldr	r2, [pc, #104]	@ (8006c38 <HAL_TIMEx_PWMN_Start+0x168>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d009      	beq.n	8006be8 <HAL_TIMEx_PWMN_Start+0x118>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a18      	ldr	r2, [pc, #96]	@ (8006c3c <HAL_TIMEx_PWMN_Start+0x16c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <HAL_TIMEx_PWMN_Start+0x118>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a17      	ldr	r2, [pc, #92]	@ (8006c40 <HAL_TIMEx_PWMN_Start+0x170>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d111      	bne.n	8006c0c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b06      	cmp	r3, #6
 8006bf8:	d010      	beq.n	8006c1c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0a:	e007      	b.n	8006c1c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40001800 	.word	0x40001800

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e05a      	b.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a21      	ldr	r2, [pc, #132]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d022      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca8:	d01d      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d018      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d013      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a18      	ldr	r2, [pc, #96]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d009      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a17      	ldr	r2, [pc, #92]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d004      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d10c      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40010000 	.word	0x40010000
 8006d24:	40000400 	.word	0x40000400
 8006d28:	40000800 	.word	0x40000800
 8006d2c:	40000c00 	.word	0x40000c00
 8006d30:	40010400 	.word	0x40010400
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40001800 	.word	0x40001800

08006d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e03d      	b.n	8006dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	431a      	orrs	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e042      	b.n	8006eea <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fb ff5b 	bl	8002d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2224      	movs	r2, #36	@ 0x24
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e94:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 feea 	bl	8007c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006eaa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695a      	ldr	r2, [r3, #20]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006eba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006eca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d112      	bne.n	8006f32 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_UART_Receive_IT+0x26>
 8006f12:	88fb      	ldrh	r3, [r7, #6]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e00b      	b.n	8006f34 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fc8a 	bl	8007842 <UART_Start_Receive_IT>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	e000      	b.n	8006f34 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08c      	sub	sp, #48	@ 0x30
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d156      	bne.n	8007004 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_UART_Transmit_DMA+0x26>
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e04f      	b.n	8007006 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2221      	movs	r2, #33	@ 0x21
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8a:	4a21      	ldr	r2, [pc, #132]	@ (8007010 <HAL_UART_Transmit_DMA+0xd4>)
 8006f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f92:	4a20      	ldr	r2, [pc, #128]	@ (8007014 <HAL_UART_Transmit_DMA+0xd8>)
 8006f94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8007018 <HAL_UART_Transmit_DMA+0xdc>)
 8006f9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	461a      	mov	r2, r3
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	f7fc fd5b 	bl	8003a78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3314      	adds	r3, #20
 8006fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	617b      	str	r3, [r7, #20]
   return(result);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3314      	adds	r3, #20
 8006fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fec:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6a39      	ldr	r1, [r7, #32]
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e5      	bne.n	8006fcc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	e000      	b.n	8007006 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
  }
}
 8007006:	4618      	mov	r0, r3
 8007008:	3730      	adds	r7, #48	@ 0x30
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	080076f9 	.word	0x080076f9
 8007014:	08007793 	.word	0x08007793
 8007018:	080077af 	.word	0x080077af

0800701c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b09a      	sub	sp, #104	@ 0x68
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	330c      	adds	r3, #12
 800702a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800703a:	667b      	str	r3, [r7, #100]	@ 0x64
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	330c      	adds	r3, #12
 8007042:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007044:	657a      	str	r2, [r7, #84]	@ 0x54
 8007046:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800704a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e5      	bne.n	8007024 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3314      	adds	r3, #20
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007078:	643a      	str	r2, [r7, #64]	@ 0x40
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800707e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007090:	2b01      	cmp	r3, #1
 8007092:	d119      	bne.n	80070c8 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f023 0310 	bic.w	r3, r3, #16
 80070aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d2:	2b40      	cmp	r3, #64	@ 0x40
 80070d4:	d13f      	bne.n	8007156 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070f6:	61ba      	str	r2, [r7, #24]
 80070f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	613b      	str	r3, [r7, #16]
   return(result);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e5      	bne.n	80070d6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d013      	beq.n	800713a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	4a19      	ldr	r2, [pc, #100]	@ (800717c <HAL_UART_AbortReceive_IT+0x160>)
 8007118:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711e:	4618      	mov	r0, r3
 8007120:	f7fc fd72 	bl	8003c08 <HAL_DMA_Abort_IT>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d022      	beq.n	8007170 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	e01a      	b.n	8007170 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fabc 	bl	80076cc <HAL_UART_AbortReceiveCpltCallback>
 8007154:	e00c      	b.n	8007170 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 faae 	bl	80076cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3768      	adds	r7, #104	@ 0x68
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	080079f5 	.word	0x080079f5

08007180 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b0ba      	sub	sp, #232	@ 0xe8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80071be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10f      	bne.n	80071e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_UART_IRQHandler+0x66>
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fc88 	bl	8007af4 <UART_Receive_IT>
      return;
 80071e4:	e25b      	b.n	800769e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 80de 	beq.w	80073ac <HAL_UART_IRQHandler+0x22c>
 80071f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007200:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80d1 	beq.w	80073ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <HAL_UART_IRQHandler+0xae>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	f043 0201 	orr.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <HAL_UART_IRQHandler+0xd2>
 800723a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724a:	f043 0202 	orr.w	r2, r3, #2
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_UART_IRQHandler+0xf6>
 800725e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d011      	beq.n	80072a6 <HAL_UART_IRQHandler+0x126>
 8007282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800728e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729e:	f043 0208 	orr.w	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 81f2 	beq.w	8007694 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_UART_IRQHandler+0x14e>
 80072bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fc13 	bl	8007af4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d8:	2b40      	cmp	r3, #64	@ 0x40
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2300      	movne	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <HAL_UART_IRQHandler+0x17a>
 80072f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d04f      	beq.n	800739a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fb03 	bl	8007906 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730a:	2b40      	cmp	r3, #64	@ 0x40
 800730c:	d141      	bne.n	8007392 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3314      	adds	r3, #20
 8007314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800732c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3314      	adds	r3, #20
 8007336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800733a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800733e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1d9      	bne.n	800730e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d013      	beq.n	800738a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007366:	4a7e      	ldr	r2, [pc, #504]	@ (8007560 <HAL_UART_IRQHandler+0x3e0>)
 8007368:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	4618      	mov	r0, r3
 8007370:	f7fc fc4a 	bl	8003c08 <HAL_DMA_Abort_IT>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d016      	beq.n	80073a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007384:	4610      	mov	r0, r2
 8007386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	e00e      	b.n	80073a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f994 	bl	80076b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007390:	e00a      	b.n	80073a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f990 	bl	80076b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007398:	e006      	b.n	80073a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f98c 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80073a6:	e175      	b.n	8007694 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a8:	bf00      	nop
    return;
 80073aa:	e173      	b.n	8007694 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 814f 	bne.w	8007654 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8148 	beq.w	8007654 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8141 	beq.w	8007654 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	f040 80b6 	bne.w	8007564 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8145 	beq.w	8007698 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007416:	429a      	cmp	r2, r3
 8007418:	f080 813e 	bcs.w	8007698 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007422:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800742e:	f000 8088 	beq.w	8007542 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800744c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800745e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800746a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1d9      	bne.n	8007432 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800748e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3314      	adds	r3, #20
 800749e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e1      	bne.n	800747e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3314      	adds	r3, #20
 80074da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e3      	bne.n	80074ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007512:	f023 0310 	bic.w	r3, r3, #16
 8007516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007524:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007526:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800752a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e3      	bne.n	8007500 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753c:	4618      	mov	r0, r3
 800753e:	f7fc faf3 	bl	8003b28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007550:	b29b      	uxth	r3, r3
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	b29b      	uxth	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f8c1 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800755e:	e09b      	b.n	8007698 <HAL_UART_IRQHandler+0x518>
 8007560:	080079cd 	.word	0x080079cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800756c:	b29b      	uxth	r3, r3
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 808e 	beq.w	800769c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8089 	beq.w	800769c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80075ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80075b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e3      	bne.n	800758a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3314      	adds	r3, #20
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	623b      	str	r3, [r7, #32]
   return(result);
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80075e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e3      	bne.n	80075c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	330c      	adds	r3, #12
 800760e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	60fb      	str	r3, [r7, #12]
   return(result);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0310 	bic.w	r3, r3, #16
 800761e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800762c:	61fa      	str	r2, [r7, #28]
 800762e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	69fa      	ldr	r2, [r7, #28]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	617b      	str	r3, [r7, #20]
   return(result);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e3      	bne.n	8007608 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f847 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007652:	e023      	b.n	800769c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <HAL_UART_IRQHandler+0x4f4>
 8007660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f9d9 	bl	8007a24 <UART_Transmit_IT>
    return;
 8007672:	e014      	b.n	800769e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00e      	beq.n	800769e <HAL_UART_IRQHandler+0x51e>
 8007680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fa19 	bl	8007ac4 <UART_EndTransmit_IT>
    return;
 8007692:	e004      	b.n	800769e <HAL_UART_IRQHandler+0x51e>
    return;
 8007694:	bf00      	nop
 8007696:	e002      	b.n	800769e <HAL_UART_IRQHandler+0x51e>
      return;
 8007698:	bf00      	nop
 800769a:	e000      	b.n	800769e <HAL_UART_IRQHandler+0x51e>
      return;
 800769c:	bf00      	nop
  }
}
 800769e:	37e8      	adds	r7, #232	@ 0xe8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b090      	sub	sp, #64	@ 0x40
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d137      	bne.n	8007784 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007716:	2200      	movs	r2, #0
 8007718:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800771a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3314      	adds	r3, #20
 8007720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	623b      	str	r3, [r7, #32]
   return(result);
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007730:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3314      	adds	r3, #20
 8007738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800773a:	633a      	str	r2, [r7, #48]	@ 0x30
 800773c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e5      	bne.n	800771a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800774e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	330c      	adds	r3, #12
 8007754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	60fb      	str	r3, [r7, #12]
   return(result);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
 8007766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800776e:	61fa      	str	r2, [r7, #28]
 8007770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	69b9      	ldr	r1, [r7, #24]
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	617b      	str	r3, [r7, #20]
   return(result);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e5      	bne.n	800774e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007782:	e002      	b.n	800778a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007784:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007786:	f7fa fb0d 	bl	8001da4 <HAL_UART_TxCpltCallback>
}
 800778a:	bf00      	nop
 800778c:	3740      	adds	r7, #64	@ 0x40
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff ff7f 	bl	80076a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ca:	2b80      	cmp	r3, #128	@ 0x80
 80077cc:	bf0c      	ite	eq
 80077ce:	2301      	moveq	r3, #1
 80077d0:	2300      	movne	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b21      	cmp	r3, #33	@ 0x21
 80077e0:	d108      	bne.n	80077f4 <UART_DMAError+0x46>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80077ee:	68b8      	ldr	r0, [r7, #8]
 80077f0:	f000 f861 	bl	80078b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fe:	2b40      	cmp	r3, #64	@ 0x40
 8007800:	bf0c      	ite	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	2300      	movne	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b22      	cmp	r3, #34	@ 0x22
 8007814:	d108      	bne.n	8007828 <UART_DMAError+0x7a>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2200      	movs	r2, #0
 8007820:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007822:	68b8      	ldr	r0, [r7, #8]
 8007824:	f000 f86f 	bl	8007906 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782c:	f043 0210 	orr.w	r2, r3, #16
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007834:	68b8      	ldr	r0, [r7, #8]
 8007836:	f7ff ff3f 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	4613      	mov	r3, r2
 800784e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	88fa      	ldrh	r2, [r7, #6]
 800785a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2222      	movs	r2, #34	@ 0x22
 800786c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007886:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695a      	ldr	r2, [r3, #20]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0220 	orr.w	r2, r2, #32
 80078a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b089      	sub	sp, #36	@ 0x24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	330c      	adds	r3, #12
 80078c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	69fa      	ldr	r2, [r7, #28]
 80078de:	61ba      	str	r2, [r7, #24]
 80078e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6979      	ldr	r1, [r7, #20]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	613b      	str	r3, [r7, #16]
   return(result);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80078fa:	bf00      	nop
 80078fc:	3724      	adds	r7, #36	@ 0x24
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007906:	b480      	push	{r7}
 8007908:	b095      	sub	sp, #84	@ 0x54
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800792e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e5      	bne.n	800790e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3314      	adds	r3, #20
 8007948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	61fb      	str	r3, [r7, #28]
   return(result);
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3314      	adds	r3, #20
 8007960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e5      	bne.n	8007942 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	2b01      	cmp	r3, #1
 800797c:	d119      	bne.n	80079b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	330c      	adds	r3, #12
 8007984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	60bb      	str	r3, [r7, #8]
   return(result);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f023 0310 	bic.w	r3, r3, #16
 8007994:	647b      	str	r3, [r7, #68]	@ 0x44
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	330c      	adds	r3, #12
 800799c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800799e:	61ba      	str	r2, [r7, #24]
 80079a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6979      	ldr	r1, [r7, #20]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	613b      	str	r3, [r7, #16]
   return(result);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e5      	bne.n	800797e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80079c0:	bf00      	nop
 80079c2:	3754      	adds	r7, #84	@ 0x54
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff fe66 	bl	80076b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f7ff fe58 	bl	80076cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b21      	cmp	r3, #33	@ 0x21
 8007a36:	d13e      	bne.n	8007ab6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a40:	d114      	bne.n	8007a6c <UART_Transmit_IT+0x48>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d110      	bne.n	8007a6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	1c9a      	adds	r2, r3, #2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	621a      	str	r2, [r3, #32]
 8007a6a:	e008      	b.n	8007a7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	1c59      	adds	r1, r3, #1
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6211      	str	r1, [r2, #32]
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10f      	bne.n	8007ab2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007aa0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ab0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e000      	b.n	8007ab8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ab6:	2302      	movs	r3, #2
  }
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ada:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fa f95d 	bl	8001da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	@ 0x30
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b22      	cmp	r3, #34	@ 0x22
 8007b06:	f040 80ae 	bne.w	8007c66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b12:	d117      	bne.n	8007b44 <UART_Receive_IT+0x50>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d113      	bne.n	8007b44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	1c9a      	adds	r2, r3, #2
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b42:	e026      	b.n	8007b92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b56:	d007      	beq.n	8007b68 <UART_Receive_IT+0x74>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <UART_Receive_IT+0x82>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	e008      	b.n	8007b88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d15d      	bne.n	8007c62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0220 	bic.w	r2, r2, #32
 8007bb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695a      	ldr	r2, [r3, #20]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d135      	bne.n	8007c58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	613b      	str	r3, [r7, #16]
   return(result);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f023 0310 	bic.w	r3, r3, #16
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c12:	623a      	str	r2, [r7, #32]
 8007c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	69f9      	ldr	r1, [r7, #28]
 8007c18:	6a3a      	ldr	r2, [r7, #32]
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e5      	bne.n	8007bf2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	d10a      	bne.n	8007c4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff fd45 	bl	80076e0 <HAL_UARTEx_RxEventCallback>
 8007c56:	e002      	b.n	8007c5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fa f8b3 	bl	8001dc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e002      	b.n	8007c68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e000      	b.n	8007c68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007c66:	2302      	movs	r3, #2
  }
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3730      	adds	r7, #48	@ 0x30
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c74:	b0c0      	sub	sp, #256	@ 0x100
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8c:	68d9      	ldr	r1, [r3, #12]
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	ea40 0301 	orr.w	r3, r0, r1
 8007c98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007cc8:	f021 010c 	bic.w	r1, r1, #12
 8007ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cea:	6999      	ldr	r1, [r3, #24]
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	ea40 0301 	orr.w	r3, r0, r1
 8007cf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	4b8f      	ldr	r3, [pc, #572]	@ (8007f3c <UART_SetConfig+0x2cc>)
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d005      	beq.n	8007d10 <UART_SetConfig+0xa0>
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007f40 <UART_SetConfig+0x2d0>)
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d104      	bne.n	8007d1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d10:	f7fc fd2e 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 8007d14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d18:	e003      	b.n	8007d22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d1a:	f7fc fd15 	bl	8004748 <HAL_RCC_GetPCLK1Freq>
 8007d1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d2c:	f040 810c 	bne.w	8007f48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d42:	4622      	mov	r2, r4
 8007d44:	462b      	mov	r3, r5
 8007d46:	1891      	adds	r1, r2, r2
 8007d48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d4a:	415b      	adcs	r3, r3
 8007d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d52:	4621      	mov	r1, r4
 8007d54:	eb12 0801 	adds.w	r8, r2, r1
 8007d58:	4629      	mov	r1, r5
 8007d5a:	eb43 0901 	adc.w	r9, r3, r1
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d72:	4690      	mov	r8, r2
 8007d74:	4699      	mov	r9, r3
 8007d76:	4623      	mov	r3, r4
 8007d78:	eb18 0303 	adds.w	r3, r8, r3
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d80:	462b      	mov	r3, r5
 8007d82:	eb49 0303 	adc.w	r3, r9, r3
 8007d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d9e:	460b      	mov	r3, r1
 8007da0:	18db      	adds	r3, r3, r3
 8007da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007da4:	4613      	mov	r3, r2
 8007da6:	eb42 0303 	adc.w	r3, r2, r3
 8007daa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007db0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007db4:	f7f8 fe7a 	bl	8000aac <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4b61      	ldr	r3, [pc, #388]	@ (8007f44 <UART_SetConfig+0x2d4>)
 8007dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	011c      	lsls	r4, r3, #4
 8007dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007dd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	1891      	adds	r1, r2, r2
 8007dde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007de0:	415b      	adcs	r3, r3
 8007de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007de8:	4641      	mov	r1, r8
 8007dea:	eb12 0a01 	adds.w	sl, r2, r1
 8007dee:	4649      	mov	r1, r9
 8007df0:	eb43 0b01 	adc.w	fp, r3, r1
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e08:	4692      	mov	sl, r2
 8007e0a:	469b      	mov	fp, r3
 8007e0c:	4643      	mov	r3, r8
 8007e0e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e16:	464b      	mov	r3, r9
 8007e18:	eb4b 0303 	adc.w	r3, fp, r3
 8007e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e34:	460b      	mov	r3, r1
 8007e36:	18db      	adds	r3, r3, r3
 8007e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	eb42 0303 	adc.w	r3, r2, r3
 8007e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e4a:	f7f8 fe2f 	bl	8000aac <__aeabi_uldivmod>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4611      	mov	r1, r2
 8007e54:	4b3b      	ldr	r3, [pc, #236]	@ (8007f44 <UART_SetConfig+0x2d4>)
 8007e56:	fba3 2301 	umull	r2, r3, r3, r1
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	2264      	movs	r2, #100	@ 0x64
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
 8007e62:	1acb      	subs	r3, r1, r3
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e6a:	4b36      	ldr	r3, [pc, #216]	@ (8007f44 <UART_SetConfig+0x2d4>)
 8007e6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e78:	441c      	add	r4, r3
 8007e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	1891      	adds	r1, r2, r2
 8007e92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e94:	415b      	adcs	r3, r3
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	1851      	adds	r1, r2, r1
 8007ea0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	414b      	adcs	r3, r1
 8007ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	00cb      	lsls	r3, r1, #3
 8007eb8:	4651      	mov	r1, sl
 8007eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ebe:	4651      	mov	r1, sl
 8007ec0:	00ca      	lsls	r2, r1, #3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4642      	mov	r2, r8
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	460a      	mov	r2, r1
 8007ed4:	eb42 0303 	adc.w	r3, r2, r3
 8007ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ee8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007eec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	18db      	adds	r3, r3, r3
 8007ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	eb42 0303 	adc.w	r3, r2, r3
 8007efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007efe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f06:	f7f8 fdd1 	bl	8000aac <__aeabi_uldivmod>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f44 <UART_SetConfig+0x2d4>)
 8007f10:	fba3 1302 	umull	r1, r3, r3, r2
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	2164      	movs	r1, #100	@ 0x64
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	3332      	adds	r3, #50	@ 0x32
 8007f22:	4a08      	ldr	r2, [pc, #32]	@ (8007f44 <UART_SetConfig+0x2d4>)
 8007f24:	fba2 2303 	umull	r2, r3, r2, r3
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	f003 0207 	and.w	r2, r3, #7
 8007f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4422      	add	r2, r4
 8007f36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f38:	e106      	b.n	8008148 <UART_SetConfig+0x4d8>
 8007f3a:	bf00      	nop
 8007f3c:	40011000 	.word	0x40011000
 8007f40:	40011400 	.word	0x40011400
 8007f44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f5a:	4642      	mov	r2, r8
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	1891      	adds	r1, r2, r2
 8007f60:	6239      	str	r1, [r7, #32]
 8007f62:	415b      	adcs	r3, r3
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	1854      	adds	r4, r2, r1
 8007f6e:	4649      	mov	r1, r9
 8007f70:	eb43 0501 	adc.w	r5, r3, r1
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	00eb      	lsls	r3, r5, #3
 8007f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f82:	00e2      	lsls	r2, r4, #3
 8007f84:	4614      	mov	r4, r2
 8007f86:	461d      	mov	r5, r3
 8007f88:	4643      	mov	r3, r8
 8007f8a:	18e3      	adds	r3, r4, r3
 8007f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f90:	464b      	mov	r3, r9
 8007f92:	eb45 0303 	adc.w	r3, r5, r3
 8007f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fa6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	008b      	lsls	r3, r1, #2
 8007fba:	4621      	mov	r1, r4
 8007fbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	008a      	lsls	r2, r1, #2
 8007fc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007fc8:	f7f8 fd70 	bl	8000aac <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4b60      	ldr	r3, [pc, #384]	@ (8008154 <UART_SetConfig+0x4e4>)
 8007fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	011c      	lsls	r4, r3, #4
 8007fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fe4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007fe8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	1891      	adds	r1, r2, r2
 8007ff2:	61b9      	str	r1, [r7, #24]
 8007ff4:	415b      	adcs	r3, r3
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	1851      	adds	r1, r2, r1
 8008000:	6139      	str	r1, [r7, #16]
 8008002:	4649      	mov	r1, r9
 8008004:	414b      	adcs	r3, r1
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	f04f 0200 	mov.w	r2, #0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008014:	4659      	mov	r1, fp
 8008016:	00cb      	lsls	r3, r1, #3
 8008018:	4651      	mov	r1, sl
 800801a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800801e:	4651      	mov	r1, sl
 8008020:	00ca      	lsls	r2, r1, #3
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	4603      	mov	r3, r0
 8008028:	4642      	mov	r2, r8
 800802a:	189b      	adds	r3, r3, r2
 800802c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008030:	464b      	mov	r3, r9
 8008032:	460a      	mov	r2, r1
 8008034:	eb42 0303 	adc.w	r3, r2, r3
 8008038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008046:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008054:	4649      	mov	r1, r9
 8008056:	008b      	lsls	r3, r1, #2
 8008058:	4641      	mov	r1, r8
 800805a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800805e:	4641      	mov	r1, r8
 8008060:	008a      	lsls	r2, r1, #2
 8008062:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008066:	f7f8 fd21 	bl	8000aac <__aeabi_uldivmod>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4611      	mov	r1, r2
 8008070:	4b38      	ldr	r3, [pc, #224]	@ (8008154 <UART_SetConfig+0x4e4>)
 8008072:	fba3 2301 	umull	r2, r3, r3, r1
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	2264      	movs	r2, #100	@ 0x64
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	1acb      	subs	r3, r1, r3
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	3332      	adds	r3, #50	@ 0x32
 8008084:	4a33      	ldr	r2, [pc, #204]	@ (8008154 <UART_SetConfig+0x4e4>)
 8008086:	fba2 2303 	umull	r2, r3, r2, r3
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008090:	441c      	add	r4, r3
 8008092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008096:	2200      	movs	r2, #0
 8008098:	673b      	str	r3, [r7, #112]	@ 0x70
 800809a:	677a      	str	r2, [r7, #116]	@ 0x74
 800809c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80080a0:	4642      	mov	r2, r8
 80080a2:	464b      	mov	r3, r9
 80080a4:	1891      	adds	r1, r2, r2
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	415b      	adcs	r3, r3
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080b0:	4641      	mov	r1, r8
 80080b2:	1851      	adds	r1, r2, r1
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	4649      	mov	r1, r9
 80080b8:	414b      	adcs	r3, r1
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080c8:	4659      	mov	r1, fp
 80080ca:	00cb      	lsls	r3, r1, #3
 80080cc:	4651      	mov	r1, sl
 80080ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080d2:	4651      	mov	r1, sl
 80080d4:	00ca      	lsls	r2, r1, #3
 80080d6:	4610      	mov	r0, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	4603      	mov	r3, r0
 80080dc:	4642      	mov	r2, r8
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080e2:	464b      	mov	r3, r9
 80080e4:	460a      	mov	r2, r1
 80080e6:	eb42 0303 	adc.w	r3, r2, r3
 80080ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80080f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80080f8:	f04f 0200 	mov.w	r2, #0
 80080fc:	f04f 0300 	mov.w	r3, #0
 8008100:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008104:	4649      	mov	r1, r9
 8008106:	008b      	lsls	r3, r1, #2
 8008108:	4641      	mov	r1, r8
 800810a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800810e:	4641      	mov	r1, r8
 8008110:	008a      	lsls	r2, r1, #2
 8008112:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008116:	f7f8 fcc9 	bl	8000aac <__aeabi_uldivmod>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <UART_SetConfig+0x4e4>)
 8008120:	fba3 1302 	umull	r1, r3, r3, r2
 8008124:	095b      	lsrs	r3, r3, #5
 8008126:	2164      	movs	r1, #100	@ 0x64
 8008128:	fb01 f303 	mul.w	r3, r1, r3
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	3332      	adds	r3, #50	@ 0x32
 8008132:	4a08      	ldr	r2, [pc, #32]	@ (8008154 <UART_SetConfig+0x4e4>)
 8008134:	fba2 2303 	umull	r2, r3, r2, r3
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	f003 020f 	and.w	r2, r3, #15
 800813e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4422      	add	r2, r4
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800814e:	46bd      	mov	sp, r7
 8008150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008154:	51eb851f 	.word	0x51eb851f

08008158 <siprintf>:
 8008158:	b40e      	push	{r1, r2, r3}
 800815a:	b500      	push	{lr}
 800815c:	b09c      	sub	sp, #112	@ 0x70
 800815e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008160:	9002      	str	r0, [sp, #8]
 8008162:	9006      	str	r0, [sp, #24]
 8008164:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008168:	4809      	ldr	r0, [pc, #36]	@ (8008190 <siprintf+0x38>)
 800816a:	9107      	str	r1, [sp, #28]
 800816c:	9104      	str	r1, [sp, #16]
 800816e:	4909      	ldr	r1, [pc, #36]	@ (8008194 <siprintf+0x3c>)
 8008170:	f853 2b04 	ldr.w	r2, [r3], #4
 8008174:	9105      	str	r1, [sp, #20]
 8008176:	6800      	ldr	r0, [r0, #0]
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	a902      	add	r1, sp, #8
 800817c:	f000 f9aa 	bl	80084d4 <_svfiprintf_r>
 8008180:	9b02      	ldr	r3, [sp, #8]
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	b01c      	add	sp, #112	@ 0x70
 8008188:	f85d eb04 	ldr.w	lr, [sp], #4
 800818c:	b003      	add	sp, #12
 800818e:	4770      	bx	lr
 8008190:	2000004c 	.word	0x2000004c
 8008194:	ffff0208 	.word	0xffff0208

08008198 <memset>:
 8008198:	4402      	add	r2, r0
 800819a:	4603      	mov	r3, r0
 800819c:	4293      	cmp	r3, r2
 800819e:	d100      	bne.n	80081a2 <memset+0xa>
 80081a0:	4770      	bx	lr
 80081a2:	f803 1b01 	strb.w	r1, [r3], #1
 80081a6:	e7f9      	b.n	800819c <memset+0x4>

080081a8 <__errno>:
 80081a8:	4b01      	ldr	r3, [pc, #4]	@ (80081b0 <__errno+0x8>)
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	2000004c 	.word	0x2000004c

080081b4 <__libc_init_array>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4d0d      	ldr	r5, [pc, #52]	@ (80081ec <__libc_init_array+0x38>)
 80081b8:	4c0d      	ldr	r4, [pc, #52]	@ (80081f0 <__libc_init_array+0x3c>)
 80081ba:	1b64      	subs	r4, r4, r5
 80081bc:	10a4      	asrs	r4, r4, #2
 80081be:	2600      	movs	r6, #0
 80081c0:	42a6      	cmp	r6, r4
 80081c2:	d109      	bne.n	80081d8 <__libc_init_array+0x24>
 80081c4:	4d0b      	ldr	r5, [pc, #44]	@ (80081f4 <__libc_init_array+0x40>)
 80081c6:	4c0c      	ldr	r4, [pc, #48]	@ (80081f8 <__libc_init_array+0x44>)
 80081c8:	f000 fc6e 	bl	8008aa8 <_init>
 80081cc:	1b64      	subs	r4, r4, r5
 80081ce:	10a4      	asrs	r4, r4, #2
 80081d0:	2600      	movs	r6, #0
 80081d2:	42a6      	cmp	r6, r4
 80081d4:	d105      	bne.n	80081e2 <__libc_init_array+0x2e>
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081dc:	4798      	blx	r3
 80081de:	3601      	adds	r6, #1
 80081e0:	e7ee      	b.n	80081c0 <__libc_init_array+0xc>
 80081e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e6:	4798      	blx	r3
 80081e8:	3601      	adds	r6, #1
 80081ea:	e7f2      	b.n	80081d2 <__libc_init_array+0x1e>
 80081ec:	08008d50 	.word	0x08008d50
 80081f0:	08008d50 	.word	0x08008d50
 80081f4:	08008d50 	.word	0x08008d50
 80081f8:	08008d54 	.word	0x08008d54

080081fc <__retarget_lock_acquire_recursive>:
 80081fc:	4770      	bx	lr

080081fe <__retarget_lock_release_recursive>:
 80081fe:	4770      	bx	lr

08008200 <strcpy>:
 8008200:	4603      	mov	r3, r0
 8008202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008206:	f803 2b01 	strb.w	r2, [r3], #1
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1f9      	bne.n	8008202 <strcpy+0x2>
 800820e:	4770      	bx	lr

08008210 <memcpy>:
 8008210:	440a      	add	r2, r1
 8008212:	4291      	cmp	r1, r2
 8008214:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008218:	d100      	bne.n	800821c <memcpy+0xc>
 800821a:	4770      	bx	lr
 800821c:	b510      	push	{r4, lr}
 800821e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008226:	4291      	cmp	r1, r2
 8008228:	d1f9      	bne.n	800821e <memcpy+0xe>
 800822a:	bd10      	pop	{r4, pc}

0800822c <_free_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4605      	mov	r5, r0
 8008230:	2900      	cmp	r1, #0
 8008232:	d041      	beq.n	80082b8 <_free_r+0x8c>
 8008234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008238:	1f0c      	subs	r4, r1, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfb8      	it	lt
 800823e:	18e4      	addlt	r4, r4, r3
 8008240:	f000 f8e0 	bl	8008404 <__malloc_lock>
 8008244:	4a1d      	ldr	r2, [pc, #116]	@ (80082bc <_free_r+0x90>)
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	b933      	cbnz	r3, 8008258 <_free_r+0x2c>
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6014      	str	r4, [r2, #0]
 800824e:	4628      	mov	r0, r5
 8008250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008254:	f000 b8dc 	b.w	8008410 <__malloc_unlock>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d908      	bls.n	800826e <_free_r+0x42>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	1821      	adds	r1, r4, r0
 8008260:	428b      	cmp	r3, r1
 8008262:	bf01      	itttt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	1809      	addeq	r1, r1, r0
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	e7ed      	b.n	800824a <_free_r+0x1e>
 800826e:	461a      	mov	r2, r3
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b10b      	cbz	r3, 8008278 <_free_r+0x4c>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d9fa      	bls.n	800826e <_free_r+0x42>
 8008278:	6811      	ldr	r1, [r2, #0]
 800827a:	1850      	adds	r0, r2, r1
 800827c:	42a0      	cmp	r0, r4
 800827e:	d10b      	bne.n	8008298 <_free_r+0x6c>
 8008280:	6820      	ldr	r0, [r4, #0]
 8008282:	4401      	add	r1, r0
 8008284:	1850      	adds	r0, r2, r1
 8008286:	4283      	cmp	r3, r0
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	d1e0      	bne.n	800824e <_free_r+0x22>
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	4408      	add	r0, r1
 8008294:	6010      	str	r0, [r2, #0]
 8008296:	e7da      	b.n	800824e <_free_r+0x22>
 8008298:	d902      	bls.n	80082a0 <_free_r+0x74>
 800829a:	230c      	movs	r3, #12
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	e7d6      	b.n	800824e <_free_r+0x22>
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	1821      	adds	r1, r4, r0
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf04      	itt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	bf04      	itt	eq
 80082b0:	1809      	addeq	r1, r1, r0
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6054      	str	r4, [r2, #4]
 80082b6:	e7ca      	b.n	800824e <_free_r+0x22>
 80082b8:	bd38      	pop	{r3, r4, r5, pc}
 80082ba:	bf00      	nop
 80082bc:	20000768 	.word	0x20000768

080082c0 <sbrk_aligned>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	4e0f      	ldr	r6, [pc, #60]	@ (8008300 <sbrk_aligned+0x40>)
 80082c4:	460c      	mov	r4, r1
 80082c6:	6831      	ldr	r1, [r6, #0]
 80082c8:	4605      	mov	r5, r0
 80082ca:	b911      	cbnz	r1, 80082d2 <sbrk_aligned+0x12>
 80082cc:	f000 fba6 	bl	8008a1c <_sbrk_r>
 80082d0:	6030      	str	r0, [r6, #0]
 80082d2:	4621      	mov	r1, r4
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 fba1 	bl	8008a1c <_sbrk_r>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	d103      	bne.n	80082e6 <sbrk_aligned+0x26>
 80082de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80082e2:	4620      	mov	r0, r4
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
 80082e6:	1cc4      	adds	r4, r0, #3
 80082e8:	f024 0403 	bic.w	r4, r4, #3
 80082ec:	42a0      	cmp	r0, r4
 80082ee:	d0f8      	beq.n	80082e2 <sbrk_aligned+0x22>
 80082f0:	1a21      	subs	r1, r4, r0
 80082f2:	4628      	mov	r0, r5
 80082f4:	f000 fb92 	bl	8008a1c <_sbrk_r>
 80082f8:	3001      	adds	r0, #1
 80082fa:	d1f2      	bne.n	80082e2 <sbrk_aligned+0x22>
 80082fc:	e7ef      	b.n	80082de <sbrk_aligned+0x1e>
 80082fe:	bf00      	nop
 8008300:	20000764 	.word	0x20000764

08008304 <_malloc_r>:
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008308:	1ccd      	adds	r5, r1, #3
 800830a:	f025 0503 	bic.w	r5, r5, #3
 800830e:	3508      	adds	r5, #8
 8008310:	2d0c      	cmp	r5, #12
 8008312:	bf38      	it	cc
 8008314:	250c      	movcc	r5, #12
 8008316:	2d00      	cmp	r5, #0
 8008318:	4606      	mov	r6, r0
 800831a:	db01      	blt.n	8008320 <_malloc_r+0x1c>
 800831c:	42a9      	cmp	r1, r5
 800831e:	d904      	bls.n	800832a <_malloc_r+0x26>
 8008320:	230c      	movs	r3, #12
 8008322:	6033      	str	r3, [r6, #0]
 8008324:	2000      	movs	r0, #0
 8008326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008400 <_malloc_r+0xfc>
 800832e:	f000 f869 	bl	8008404 <__malloc_lock>
 8008332:	f8d8 3000 	ldr.w	r3, [r8]
 8008336:	461c      	mov	r4, r3
 8008338:	bb44      	cbnz	r4, 800838c <_malloc_r+0x88>
 800833a:	4629      	mov	r1, r5
 800833c:	4630      	mov	r0, r6
 800833e:	f7ff ffbf 	bl	80082c0 <sbrk_aligned>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	4604      	mov	r4, r0
 8008346:	d158      	bne.n	80083fa <_malloc_r+0xf6>
 8008348:	f8d8 4000 	ldr.w	r4, [r8]
 800834c:	4627      	mov	r7, r4
 800834e:	2f00      	cmp	r7, #0
 8008350:	d143      	bne.n	80083da <_malloc_r+0xd6>
 8008352:	2c00      	cmp	r4, #0
 8008354:	d04b      	beq.n	80083ee <_malloc_r+0xea>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	4639      	mov	r1, r7
 800835a:	4630      	mov	r0, r6
 800835c:	eb04 0903 	add.w	r9, r4, r3
 8008360:	f000 fb5c 	bl	8008a1c <_sbrk_r>
 8008364:	4581      	cmp	r9, r0
 8008366:	d142      	bne.n	80083ee <_malloc_r+0xea>
 8008368:	6821      	ldr	r1, [r4, #0]
 800836a:	1a6d      	subs	r5, r5, r1
 800836c:	4629      	mov	r1, r5
 800836e:	4630      	mov	r0, r6
 8008370:	f7ff ffa6 	bl	80082c0 <sbrk_aligned>
 8008374:	3001      	adds	r0, #1
 8008376:	d03a      	beq.n	80083ee <_malloc_r+0xea>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	442b      	add	r3, r5
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	f8d8 3000 	ldr.w	r3, [r8]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	bb62      	cbnz	r2, 80083e0 <_malloc_r+0xdc>
 8008386:	f8c8 7000 	str.w	r7, [r8]
 800838a:	e00f      	b.n	80083ac <_malloc_r+0xa8>
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	1b52      	subs	r2, r2, r5
 8008390:	d420      	bmi.n	80083d4 <_malloc_r+0xd0>
 8008392:	2a0b      	cmp	r2, #11
 8008394:	d917      	bls.n	80083c6 <_malloc_r+0xc2>
 8008396:	1961      	adds	r1, r4, r5
 8008398:	42a3      	cmp	r3, r4
 800839a:	6025      	str	r5, [r4, #0]
 800839c:	bf18      	it	ne
 800839e:	6059      	strne	r1, [r3, #4]
 80083a0:	6863      	ldr	r3, [r4, #4]
 80083a2:	bf08      	it	eq
 80083a4:	f8c8 1000 	streq.w	r1, [r8]
 80083a8:	5162      	str	r2, [r4, r5]
 80083aa:	604b      	str	r3, [r1, #4]
 80083ac:	4630      	mov	r0, r6
 80083ae:	f000 f82f 	bl	8008410 <__malloc_unlock>
 80083b2:	f104 000b 	add.w	r0, r4, #11
 80083b6:	1d23      	adds	r3, r4, #4
 80083b8:	f020 0007 	bic.w	r0, r0, #7
 80083bc:	1ac2      	subs	r2, r0, r3
 80083be:	bf1c      	itt	ne
 80083c0:	1a1b      	subne	r3, r3, r0
 80083c2:	50a3      	strne	r3, [r4, r2]
 80083c4:	e7af      	b.n	8008326 <_malloc_r+0x22>
 80083c6:	6862      	ldr	r2, [r4, #4]
 80083c8:	42a3      	cmp	r3, r4
 80083ca:	bf0c      	ite	eq
 80083cc:	f8c8 2000 	streq.w	r2, [r8]
 80083d0:	605a      	strne	r2, [r3, #4]
 80083d2:	e7eb      	b.n	80083ac <_malloc_r+0xa8>
 80083d4:	4623      	mov	r3, r4
 80083d6:	6864      	ldr	r4, [r4, #4]
 80083d8:	e7ae      	b.n	8008338 <_malloc_r+0x34>
 80083da:	463c      	mov	r4, r7
 80083dc:	687f      	ldr	r7, [r7, #4]
 80083de:	e7b6      	b.n	800834e <_malloc_r+0x4a>
 80083e0:	461a      	mov	r2, r3
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	d1fb      	bne.n	80083e0 <_malloc_r+0xdc>
 80083e8:	2300      	movs	r3, #0
 80083ea:	6053      	str	r3, [r2, #4]
 80083ec:	e7de      	b.n	80083ac <_malloc_r+0xa8>
 80083ee:	230c      	movs	r3, #12
 80083f0:	6033      	str	r3, [r6, #0]
 80083f2:	4630      	mov	r0, r6
 80083f4:	f000 f80c 	bl	8008410 <__malloc_unlock>
 80083f8:	e794      	b.n	8008324 <_malloc_r+0x20>
 80083fa:	6005      	str	r5, [r0, #0]
 80083fc:	e7d6      	b.n	80083ac <_malloc_r+0xa8>
 80083fe:	bf00      	nop
 8008400:	20000768 	.word	0x20000768

08008404 <__malloc_lock>:
 8008404:	4801      	ldr	r0, [pc, #4]	@ (800840c <__malloc_lock+0x8>)
 8008406:	f7ff bef9 	b.w	80081fc <__retarget_lock_acquire_recursive>
 800840a:	bf00      	nop
 800840c:	20000760 	.word	0x20000760

08008410 <__malloc_unlock>:
 8008410:	4801      	ldr	r0, [pc, #4]	@ (8008418 <__malloc_unlock+0x8>)
 8008412:	f7ff bef4 	b.w	80081fe <__retarget_lock_release_recursive>
 8008416:	bf00      	nop
 8008418:	20000760 	.word	0x20000760

0800841c <__ssputs_r>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	688e      	ldr	r6, [r1, #8]
 8008422:	461f      	mov	r7, r3
 8008424:	42be      	cmp	r6, r7
 8008426:	680b      	ldr	r3, [r1, #0]
 8008428:	4682      	mov	sl, r0
 800842a:	460c      	mov	r4, r1
 800842c:	4690      	mov	r8, r2
 800842e:	d82d      	bhi.n	800848c <__ssputs_r+0x70>
 8008430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008434:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008438:	d026      	beq.n	8008488 <__ssputs_r+0x6c>
 800843a:	6965      	ldr	r5, [r4, #20]
 800843c:	6909      	ldr	r1, [r1, #16]
 800843e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008442:	eba3 0901 	sub.w	r9, r3, r1
 8008446:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800844a:	1c7b      	adds	r3, r7, #1
 800844c:	444b      	add	r3, r9
 800844e:	106d      	asrs	r5, r5, #1
 8008450:	429d      	cmp	r5, r3
 8008452:	bf38      	it	cc
 8008454:	461d      	movcc	r5, r3
 8008456:	0553      	lsls	r3, r2, #21
 8008458:	d527      	bpl.n	80084aa <__ssputs_r+0x8e>
 800845a:	4629      	mov	r1, r5
 800845c:	f7ff ff52 	bl	8008304 <_malloc_r>
 8008460:	4606      	mov	r6, r0
 8008462:	b360      	cbz	r0, 80084be <__ssputs_r+0xa2>
 8008464:	6921      	ldr	r1, [r4, #16]
 8008466:	464a      	mov	r2, r9
 8008468:	f7ff fed2 	bl	8008210 <memcpy>
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	6126      	str	r6, [r4, #16]
 800847a:	6165      	str	r5, [r4, #20]
 800847c:	444e      	add	r6, r9
 800847e:	eba5 0509 	sub.w	r5, r5, r9
 8008482:	6026      	str	r6, [r4, #0]
 8008484:	60a5      	str	r5, [r4, #8]
 8008486:	463e      	mov	r6, r7
 8008488:	42be      	cmp	r6, r7
 800848a:	d900      	bls.n	800848e <__ssputs_r+0x72>
 800848c:	463e      	mov	r6, r7
 800848e:	6820      	ldr	r0, [r4, #0]
 8008490:	4632      	mov	r2, r6
 8008492:	4641      	mov	r1, r8
 8008494:	f000 faa8 	bl	80089e8 <memmove>
 8008498:	68a3      	ldr	r3, [r4, #8]
 800849a:	1b9b      	subs	r3, r3, r6
 800849c:	60a3      	str	r3, [r4, #8]
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	4433      	add	r3, r6
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	2000      	movs	r0, #0
 80084a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084aa:	462a      	mov	r2, r5
 80084ac:	f000 fac6 	bl	8008a3c <_realloc_r>
 80084b0:	4606      	mov	r6, r0
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d1e0      	bne.n	8008478 <__ssputs_r+0x5c>
 80084b6:	6921      	ldr	r1, [r4, #16]
 80084b8:	4650      	mov	r0, sl
 80084ba:	f7ff feb7 	bl	800822c <_free_r>
 80084be:	230c      	movs	r3, #12
 80084c0:	f8ca 3000 	str.w	r3, [sl]
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084d0:	e7e9      	b.n	80084a6 <__ssputs_r+0x8a>
	...

080084d4 <_svfiprintf_r>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4698      	mov	r8, r3
 80084da:	898b      	ldrh	r3, [r1, #12]
 80084dc:	061b      	lsls	r3, r3, #24
 80084de:	b09d      	sub	sp, #116	@ 0x74
 80084e0:	4607      	mov	r7, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	4614      	mov	r4, r2
 80084e6:	d510      	bpl.n	800850a <_svfiprintf_r+0x36>
 80084e8:	690b      	ldr	r3, [r1, #16]
 80084ea:	b973      	cbnz	r3, 800850a <_svfiprintf_r+0x36>
 80084ec:	2140      	movs	r1, #64	@ 0x40
 80084ee:	f7ff ff09 	bl	8008304 <_malloc_r>
 80084f2:	6028      	str	r0, [r5, #0]
 80084f4:	6128      	str	r0, [r5, #16]
 80084f6:	b930      	cbnz	r0, 8008506 <_svfiprintf_r+0x32>
 80084f8:	230c      	movs	r3, #12
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008500:	b01d      	add	sp, #116	@ 0x74
 8008502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008506:	2340      	movs	r3, #64	@ 0x40
 8008508:	616b      	str	r3, [r5, #20]
 800850a:	2300      	movs	r3, #0
 800850c:	9309      	str	r3, [sp, #36]	@ 0x24
 800850e:	2320      	movs	r3, #32
 8008510:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008514:	f8cd 800c 	str.w	r8, [sp, #12]
 8008518:	2330      	movs	r3, #48	@ 0x30
 800851a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086b8 <_svfiprintf_r+0x1e4>
 800851e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008522:	f04f 0901 	mov.w	r9, #1
 8008526:	4623      	mov	r3, r4
 8008528:	469a      	mov	sl, r3
 800852a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852e:	b10a      	cbz	r2, 8008534 <_svfiprintf_r+0x60>
 8008530:	2a25      	cmp	r2, #37	@ 0x25
 8008532:	d1f9      	bne.n	8008528 <_svfiprintf_r+0x54>
 8008534:	ebba 0b04 	subs.w	fp, sl, r4
 8008538:	d00b      	beq.n	8008552 <_svfiprintf_r+0x7e>
 800853a:	465b      	mov	r3, fp
 800853c:	4622      	mov	r2, r4
 800853e:	4629      	mov	r1, r5
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff ff6b 	bl	800841c <__ssputs_r>
 8008546:	3001      	adds	r0, #1
 8008548:	f000 80a7 	beq.w	800869a <_svfiprintf_r+0x1c6>
 800854c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800854e:	445a      	add	r2, fp
 8008550:	9209      	str	r2, [sp, #36]	@ 0x24
 8008552:	f89a 3000 	ldrb.w	r3, [sl]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 809f 	beq.w	800869a <_svfiprintf_r+0x1c6>
 800855c:	2300      	movs	r3, #0
 800855e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008566:	f10a 0a01 	add.w	sl, sl, #1
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	9307      	str	r3, [sp, #28]
 800856e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008572:	931a      	str	r3, [sp, #104]	@ 0x68
 8008574:	4654      	mov	r4, sl
 8008576:	2205      	movs	r2, #5
 8008578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857c:	484e      	ldr	r0, [pc, #312]	@ (80086b8 <_svfiprintf_r+0x1e4>)
 800857e:	f7f7 fe4f 	bl	8000220 <memchr>
 8008582:	9a04      	ldr	r2, [sp, #16]
 8008584:	b9d8      	cbnz	r0, 80085be <_svfiprintf_r+0xea>
 8008586:	06d0      	lsls	r0, r2, #27
 8008588:	bf44      	itt	mi
 800858a:	2320      	movmi	r3, #32
 800858c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008590:	0711      	lsls	r1, r2, #28
 8008592:	bf44      	itt	mi
 8008594:	232b      	movmi	r3, #43	@ 0x2b
 8008596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800859a:	f89a 3000 	ldrb.w	r3, [sl]
 800859e:	2b2a      	cmp	r3, #42	@ 0x2a
 80085a0:	d015      	beq.n	80085ce <_svfiprintf_r+0xfa>
 80085a2:	9a07      	ldr	r2, [sp, #28]
 80085a4:	4654      	mov	r4, sl
 80085a6:	2000      	movs	r0, #0
 80085a8:	f04f 0c0a 	mov.w	ip, #10
 80085ac:	4621      	mov	r1, r4
 80085ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b2:	3b30      	subs	r3, #48	@ 0x30
 80085b4:	2b09      	cmp	r3, #9
 80085b6:	d94b      	bls.n	8008650 <_svfiprintf_r+0x17c>
 80085b8:	b1b0      	cbz	r0, 80085e8 <_svfiprintf_r+0x114>
 80085ba:	9207      	str	r2, [sp, #28]
 80085bc:	e014      	b.n	80085e8 <_svfiprintf_r+0x114>
 80085be:	eba0 0308 	sub.w	r3, r0, r8
 80085c2:	fa09 f303 	lsl.w	r3, r9, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	46a2      	mov	sl, r4
 80085cc:	e7d2      	b.n	8008574 <_svfiprintf_r+0xa0>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	1d19      	adds	r1, r3, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	9103      	str	r1, [sp, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfbb      	ittet	lt
 80085da:	425b      	neglt	r3, r3
 80085dc:	f042 0202 	orrlt.w	r2, r2, #2
 80085e0:	9307      	strge	r3, [sp, #28]
 80085e2:	9307      	strlt	r3, [sp, #28]
 80085e4:	bfb8      	it	lt
 80085e6:	9204      	strlt	r2, [sp, #16]
 80085e8:	7823      	ldrb	r3, [r4, #0]
 80085ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80085ec:	d10a      	bne.n	8008604 <_svfiprintf_r+0x130>
 80085ee:	7863      	ldrb	r3, [r4, #1]
 80085f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80085f2:	d132      	bne.n	800865a <_svfiprintf_r+0x186>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	1d1a      	adds	r2, r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	9203      	str	r2, [sp, #12]
 80085fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008600:	3402      	adds	r4, #2
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086c8 <_svfiprintf_r+0x1f4>
 8008608:	7821      	ldrb	r1, [r4, #0]
 800860a:	2203      	movs	r2, #3
 800860c:	4650      	mov	r0, sl
 800860e:	f7f7 fe07 	bl	8000220 <memchr>
 8008612:	b138      	cbz	r0, 8008624 <_svfiprintf_r+0x150>
 8008614:	9b04      	ldr	r3, [sp, #16]
 8008616:	eba0 000a 	sub.w	r0, r0, sl
 800861a:	2240      	movs	r2, #64	@ 0x40
 800861c:	4082      	lsls	r2, r0
 800861e:	4313      	orrs	r3, r2
 8008620:	3401      	adds	r4, #1
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008628:	4824      	ldr	r0, [pc, #144]	@ (80086bc <_svfiprintf_r+0x1e8>)
 800862a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800862e:	2206      	movs	r2, #6
 8008630:	f7f7 fdf6 	bl	8000220 <memchr>
 8008634:	2800      	cmp	r0, #0
 8008636:	d036      	beq.n	80086a6 <_svfiprintf_r+0x1d2>
 8008638:	4b21      	ldr	r3, [pc, #132]	@ (80086c0 <_svfiprintf_r+0x1ec>)
 800863a:	bb1b      	cbnz	r3, 8008684 <_svfiprintf_r+0x1b0>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	3307      	adds	r3, #7
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	3308      	adds	r3, #8
 8008646:	9303      	str	r3, [sp, #12]
 8008648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864a:	4433      	add	r3, r6
 800864c:	9309      	str	r3, [sp, #36]	@ 0x24
 800864e:	e76a      	b.n	8008526 <_svfiprintf_r+0x52>
 8008650:	fb0c 3202 	mla	r2, ip, r2, r3
 8008654:	460c      	mov	r4, r1
 8008656:	2001      	movs	r0, #1
 8008658:	e7a8      	b.n	80085ac <_svfiprintf_r+0xd8>
 800865a:	2300      	movs	r3, #0
 800865c:	3401      	adds	r4, #1
 800865e:	9305      	str	r3, [sp, #20]
 8008660:	4619      	mov	r1, r3
 8008662:	f04f 0c0a 	mov.w	ip, #10
 8008666:	4620      	mov	r0, r4
 8008668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866c:	3a30      	subs	r2, #48	@ 0x30
 800866e:	2a09      	cmp	r2, #9
 8008670:	d903      	bls.n	800867a <_svfiprintf_r+0x1a6>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0c6      	beq.n	8008604 <_svfiprintf_r+0x130>
 8008676:	9105      	str	r1, [sp, #20]
 8008678:	e7c4      	b.n	8008604 <_svfiprintf_r+0x130>
 800867a:	fb0c 2101 	mla	r1, ip, r1, r2
 800867e:	4604      	mov	r4, r0
 8008680:	2301      	movs	r3, #1
 8008682:	e7f0      	b.n	8008666 <_svfiprintf_r+0x192>
 8008684:	ab03      	add	r3, sp, #12
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	462a      	mov	r2, r5
 800868a:	4b0e      	ldr	r3, [pc, #56]	@ (80086c4 <_svfiprintf_r+0x1f0>)
 800868c:	a904      	add	r1, sp, #16
 800868e:	4638      	mov	r0, r7
 8008690:	f3af 8000 	nop.w
 8008694:	1c42      	adds	r2, r0, #1
 8008696:	4606      	mov	r6, r0
 8008698:	d1d6      	bne.n	8008648 <_svfiprintf_r+0x174>
 800869a:	89ab      	ldrh	r3, [r5, #12]
 800869c:	065b      	lsls	r3, r3, #25
 800869e:	f53f af2d 	bmi.w	80084fc <_svfiprintf_r+0x28>
 80086a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086a4:	e72c      	b.n	8008500 <_svfiprintf_r+0x2c>
 80086a6:	ab03      	add	r3, sp, #12
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	462a      	mov	r2, r5
 80086ac:	4b05      	ldr	r3, [pc, #20]	@ (80086c4 <_svfiprintf_r+0x1f0>)
 80086ae:	a904      	add	r1, sp, #16
 80086b0:	4638      	mov	r0, r7
 80086b2:	f000 f879 	bl	80087a8 <_printf_i>
 80086b6:	e7ed      	b.n	8008694 <_svfiprintf_r+0x1c0>
 80086b8:	08008d14 	.word	0x08008d14
 80086bc:	08008d1e 	.word	0x08008d1e
 80086c0:	00000000 	.word	0x00000000
 80086c4:	0800841d 	.word	0x0800841d
 80086c8:	08008d1a 	.word	0x08008d1a

080086cc <_printf_common>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	4616      	mov	r6, r2
 80086d2:	4698      	mov	r8, r3
 80086d4:	688a      	ldr	r2, [r1, #8]
 80086d6:	690b      	ldr	r3, [r1, #16]
 80086d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086dc:	4293      	cmp	r3, r2
 80086de:	bfb8      	it	lt
 80086e0:	4613      	movlt	r3, r2
 80086e2:	6033      	str	r3, [r6, #0]
 80086e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086e8:	4607      	mov	r7, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	b10a      	cbz	r2, 80086f2 <_printf_common+0x26>
 80086ee:	3301      	adds	r3, #1
 80086f0:	6033      	str	r3, [r6, #0]
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	0699      	lsls	r1, r3, #26
 80086f6:	bf42      	ittt	mi
 80086f8:	6833      	ldrmi	r3, [r6, #0]
 80086fa:	3302      	addmi	r3, #2
 80086fc:	6033      	strmi	r3, [r6, #0]
 80086fe:	6825      	ldr	r5, [r4, #0]
 8008700:	f015 0506 	ands.w	r5, r5, #6
 8008704:	d106      	bne.n	8008714 <_printf_common+0x48>
 8008706:	f104 0a19 	add.w	sl, r4, #25
 800870a:	68e3      	ldr	r3, [r4, #12]
 800870c:	6832      	ldr	r2, [r6, #0]
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	42ab      	cmp	r3, r5
 8008712:	dc26      	bgt.n	8008762 <_printf_common+0x96>
 8008714:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	3b00      	subs	r3, #0
 800871c:	bf18      	it	ne
 800871e:	2301      	movne	r3, #1
 8008720:	0692      	lsls	r2, r2, #26
 8008722:	d42b      	bmi.n	800877c <_printf_common+0xb0>
 8008724:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008728:	4641      	mov	r1, r8
 800872a:	4638      	mov	r0, r7
 800872c:	47c8      	blx	r9
 800872e:	3001      	adds	r0, #1
 8008730:	d01e      	beq.n	8008770 <_printf_common+0xa4>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	6922      	ldr	r2, [r4, #16]
 8008736:	f003 0306 	and.w	r3, r3, #6
 800873a:	2b04      	cmp	r3, #4
 800873c:	bf02      	ittt	eq
 800873e:	68e5      	ldreq	r5, [r4, #12]
 8008740:	6833      	ldreq	r3, [r6, #0]
 8008742:	1aed      	subeq	r5, r5, r3
 8008744:	68a3      	ldr	r3, [r4, #8]
 8008746:	bf0c      	ite	eq
 8008748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800874c:	2500      	movne	r5, #0
 800874e:	4293      	cmp	r3, r2
 8008750:	bfc4      	itt	gt
 8008752:	1a9b      	subgt	r3, r3, r2
 8008754:	18ed      	addgt	r5, r5, r3
 8008756:	2600      	movs	r6, #0
 8008758:	341a      	adds	r4, #26
 800875a:	42b5      	cmp	r5, r6
 800875c:	d11a      	bne.n	8008794 <_printf_common+0xc8>
 800875e:	2000      	movs	r0, #0
 8008760:	e008      	b.n	8008774 <_printf_common+0xa8>
 8008762:	2301      	movs	r3, #1
 8008764:	4652      	mov	r2, sl
 8008766:	4641      	mov	r1, r8
 8008768:	4638      	mov	r0, r7
 800876a:	47c8      	blx	r9
 800876c:	3001      	adds	r0, #1
 800876e:	d103      	bne.n	8008778 <_printf_common+0xac>
 8008770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008778:	3501      	adds	r5, #1
 800877a:	e7c6      	b.n	800870a <_printf_common+0x3e>
 800877c:	18e1      	adds	r1, r4, r3
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	2030      	movs	r0, #48	@ 0x30
 8008782:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008786:	4422      	add	r2, r4
 8008788:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800878c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008790:	3302      	adds	r3, #2
 8008792:	e7c7      	b.n	8008724 <_printf_common+0x58>
 8008794:	2301      	movs	r3, #1
 8008796:	4622      	mov	r2, r4
 8008798:	4641      	mov	r1, r8
 800879a:	4638      	mov	r0, r7
 800879c:	47c8      	blx	r9
 800879e:	3001      	adds	r0, #1
 80087a0:	d0e6      	beq.n	8008770 <_printf_common+0xa4>
 80087a2:	3601      	adds	r6, #1
 80087a4:	e7d9      	b.n	800875a <_printf_common+0x8e>
	...

080087a8 <_printf_i>:
 80087a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	7e0f      	ldrb	r7, [r1, #24]
 80087ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087b0:	2f78      	cmp	r7, #120	@ 0x78
 80087b2:	4691      	mov	r9, r2
 80087b4:	4680      	mov	r8, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	469a      	mov	sl, r3
 80087ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087be:	d807      	bhi.n	80087d0 <_printf_i+0x28>
 80087c0:	2f62      	cmp	r7, #98	@ 0x62
 80087c2:	d80a      	bhi.n	80087da <_printf_i+0x32>
 80087c4:	2f00      	cmp	r7, #0
 80087c6:	f000 80d2 	beq.w	800896e <_printf_i+0x1c6>
 80087ca:	2f58      	cmp	r7, #88	@ 0x58
 80087cc:	f000 80b9 	beq.w	8008942 <_printf_i+0x19a>
 80087d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087d8:	e03a      	b.n	8008850 <_printf_i+0xa8>
 80087da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087de:	2b15      	cmp	r3, #21
 80087e0:	d8f6      	bhi.n	80087d0 <_printf_i+0x28>
 80087e2:	a101      	add	r1, pc, #4	@ (adr r1, 80087e8 <_printf_i+0x40>)
 80087e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e8:	08008841 	.word	0x08008841
 80087ec:	08008855 	.word	0x08008855
 80087f0:	080087d1 	.word	0x080087d1
 80087f4:	080087d1 	.word	0x080087d1
 80087f8:	080087d1 	.word	0x080087d1
 80087fc:	080087d1 	.word	0x080087d1
 8008800:	08008855 	.word	0x08008855
 8008804:	080087d1 	.word	0x080087d1
 8008808:	080087d1 	.word	0x080087d1
 800880c:	080087d1 	.word	0x080087d1
 8008810:	080087d1 	.word	0x080087d1
 8008814:	08008955 	.word	0x08008955
 8008818:	0800887f 	.word	0x0800887f
 800881c:	0800890f 	.word	0x0800890f
 8008820:	080087d1 	.word	0x080087d1
 8008824:	080087d1 	.word	0x080087d1
 8008828:	08008977 	.word	0x08008977
 800882c:	080087d1 	.word	0x080087d1
 8008830:	0800887f 	.word	0x0800887f
 8008834:	080087d1 	.word	0x080087d1
 8008838:	080087d1 	.word	0x080087d1
 800883c:	08008917 	.word	0x08008917
 8008840:	6833      	ldr	r3, [r6, #0]
 8008842:	1d1a      	adds	r2, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6032      	str	r2, [r6, #0]
 8008848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800884c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008850:	2301      	movs	r3, #1
 8008852:	e09d      	b.n	8008990 <_printf_i+0x1e8>
 8008854:	6833      	ldr	r3, [r6, #0]
 8008856:	6820      	ldr	r0, [r4, #0]
 8008858:	1d19      	adds	r1, r3, #4
 800885a:	6031      	str	r1, [r6, #0]
 800885c:	0606      	lsls	r6, r0, #24
 800885e:	d501      	bpl.n	8008864 <_printf_i+0xbc>
 8008860:	681d      	ldr	r5, [r3, #0]
 8008862:	e003      	b.n	800886c <_printf_i+0xc4>
 8008864:	0645      	lsls	r5, r0, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0xb8>
 8008868:	f9b3 5000 	ldrsh.w	r5, [r3]
 800886c:	2d00      	cmp	r5, #0
 800886e:	da03      	bge.n	8008878 <_printf_i+0xd0>
 8008870:	232d      	movs	r3, #45	@ 0x2d
 8008872:	426d      	negs	r5, r5
 8008874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008878:	4859      	ldr	r0, [pc, #356]	@ (80089e0 <_printf_i+0x238>)
 800887a:	230a      	movs	r3, #10
 800887c:	e011      	b.n	80088a2 <_printf_i+0xfa>
 800887e:	6821      	ldr	r1, [r4, #0]
 8008880:	6833      	ldr	r3, [r6, #0]
 8008882:	0608      	lsls	r0, r1, #24
 8008884:	f853 5b04 	ldr.w	r5, [r3], #4
 8008888:	d402      	bmi.n	8008890 <_printf_i+0xe8>
 800888a:	0649      	lsls	r1, r1, #25
 800888c:	bf48      	it	mi
 800888e:	b2ad      	uxthmi	r5, r5
 8008890:	2f6f      	cmp	r7, #111	@ 0x6f
 8008892:	4853      	ldr	r0, [pc, #332]	@ (80089e0 <_printf_i+0x238>)
 8008894:	6033      	str	r3, [r6, #0]
 8008896:	bf14      	ite	ne
 8008898:	230a      	movne	r3, #10
 800889a:	2308      	moveq	r3, #8
 800889c:	2100      	movs	r1, #0
 800889e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088a2:	6866      	ldr	r6, [r4, #4]
 80088a4:	60a6      	str	r6, [r4, #8]
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	bfa2      	ittt	ge
 80088aa:	6821      	ldrge	r1, [r4, #0]
 80088ac:	f021 0104 	bicge.w	r1, r1, #4
 80088b0:	6021      	strge	r1, [r4, #0]
 80088b2:	b90d      	cbnz	r5, 80088b8 <_printf_i+0x110>
 80088b4:	2e00      	cmp	r6, #0
 80088b6:	d04b      	beq.n	8008950 <_printf_i+0x1a8>
 80088b8:	4616      	mov	r6, r2
 80088ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80088be:	fb03 5711 	mls	r7, r3, r1, r5
 80088c2:	5dc7      	ldrb	r7, [r0, r7]
 80088c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088c8:	462f      	mov	r7, r5
 80088ca:	42bb      	cmp	r3, r7
 80088cc:	460d      	mov	r5, r1
 80088ce:	d9f4      	bls.n	80088ba <_printf_i+0x112>
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d10b      	bne.n	80088ec <_printf_i+0x144>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	07df      	lsls	r7, r3, #31
 80088d8:	d508      	bpl.n	80088ec <_printf_i+0x144>
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	6861      	ldr	r1, [r4, #4]
 80088de:	4299      	cmp	r1, r3
 80088e0:	bfde      	ittt	le
 80088e2:	2330      	movle	r3, #48	@ 0x30
 80088e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80088ec:	1b92      	subs	r2, r2, r6
 80088ee:	6122      	str	r2, [r4, #16]
 80088f0:	f8cd a000 	str.w	sl, [sp]
 80088f4:	464b      	mov	r3, r9
 80088f6:	aa03      	add	r2, sp, #12
 80088f8:	4621      	mov	r1, r4
 80088fa:	4640      	mov	r0, r8
 80088fc:	f7ff fee6 	bl	80086cc <_printf_common>
 8008900:	3001      	adds	r0, #1
 8008902:	d14a      	bne.n	800899a <_printf_i+0x1f2>
 8008904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008908:	b004      	add	sp, #16
 800890a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f043 0320 	orr.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	4833      	ldr	r0, [pc, #204]	@ (80089e4 <_printf_i+0x23c>)
 8008918:	2778      	movs	r7, #120	@ 0x78
 800891a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	6831      	ldr	r1, [r6, #0]
 8008922:	061f      	lsls	r7, r3, #24
 8008924:	f851 5b04 	ldr.w	r5, [r1], #4
 8008928:	d402      	bmi.n	8008930 <_printf_i+0x188>
 800892a:	065f      	lsls	r7, r3, #25
 800892c:	bf48      	it	mi
 800892e:	b2ad      	uxthmi	r5, r5
 8008930:	6031      	str	r1, [r6, #0]
 8008932:	07d9      	lsls	r1, r3, #31
 8008934:	bf44      	itt	mi
 8008936:	f043 0320 	orrmi.w	r3, r3, #32
 800893a:	6023      	strmi	r3, [r4, #0]
 800893c:	b11d      	cbz	r5, 8008946 <_printf_i+0x19e>
 800893e:	2310      	movs	r3, #16
 8008940:	e7ac      	b.n	800889c <_printf_i+0xf4>
 8008942:	4827      	ldr	r0, [pc, #156]	@ (80089e0 <_printf_i+0x238>)
 8008944:	e7e9      	b.n	800891a <_printf_i+0x172>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	f023 0320 	bic.w	r3, r3, #32
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	e7f6      	b.n	800893e <_printf_i+0x196>
 8008950:	4616      	mov	r6, r2
 8008952:	e7bd      	b.n	80088d0 <_printf_i+0x128>
 8008954:	6833      	ldr	r3, [r6, #0]
 8008956:	6825      	ldr	r5, [r4, #0]
 8008958:	6961      	ldr	r1, [r4, #20]
 800895a:	1d18      	adds	r0, r3, #4
 800895c:	6030      	str	r0, [r6, #0]
 800895e:	062e      	lsls	r6, r5, #24
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	d501      	bpl.n	8008968 <_printf_i+0x1c0>
 8008964:	6019      	str	r1, [r3, #0]
 8008966:	e002      	b.n	800896e <_printf_i+0x1c6>
 8008968:	0668      	lsls	r0, r5, #25
 800896a:	d5fb      	bpl.n	8008964 <_printf_i+0x1bc>
 800896c:	8019      	strh	r1, [r3, #0]
 800896e:	2300      	movs	r3, #0
 8008970:	6123      	str	r3, [r4, #16]
 8008972:	4616      	mov	r6, r2
 8008974:	e7bc      	b.n	80088f0 <_printf_i+0x148>
 8008976:	6833      	ldr	r3, [r6, #0]
 8008978:	1d1a      	adds	r2, r3, #4
 800897a:	6032      	str	r2, [r6, #0]
 800897c:	681e      	ldr	r6, [r3, #0]
 800897e:	6862      	ldr	r2, [r4, #4]
 8008980:	2100      	movs	r1, #0
 8008982:	4630      	mov	r0, r6
 8008984:	f7f7 fc4c 	bl	8000220 <memchr>
 8008988:	b108      	cbz	r0, 800898e <_printf_i+0x1e6>
 800898a:	1b80      	subs	r0, r0, r6
 800898c:	6060      	str	r0, [r4, #4]
 800898e:	6863      	ldr	r3, [r4, #4]
 8008990:	6123      	str	r3, [r4, #16]
 8008992:	2300      	movs	r3, #0
 8008994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008998:	e7aa      	b.n	80088f0 <_printf_i+0x148>
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	4632      	mov	r2, r6
 800899e:	4649      	mov	r1, r9
 80089a0:	4640      	mov	r0, r8
 80089a2:	47d0      	blx	sl
 80089a4:	3001      	adds	r0, #1
 80089a6:	d0ad      	beq.n	8008904 <_printf_i+0x15c>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	079b      	lsls	r3, r3, #30
 80089ac:	d413      	bmi.n	80089d6 <_printf_i+0x22e>
 80089ae:	68e0      	ldr	r0, [r4, #12]
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	4298      	cmp	r0, r3
 80089b4:	bfb8      	it	lt
 80089b6:	4618      	movlt	r0, r3
 80089b8:	e7a6      	b.n	8008908 <_printf_i+0x160>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4632      	mov	r2, r6
 80089be:	4649      	mov	r1, r9
 80089c0:	4640      	mov	r0, r8
 80089c2:	47d0      	blx	sl
 80089c4:	3001      	adds	r0, #1
 80089c6:	d09d      	beq.n	8008904 <_printf_i+0x15c>
 80089c8:	3501      	adds	r5, #1
 80089ca:	68e3      	ldr	r3, [r4, #12]
 80089cc:	9903      	ldr	r1, [sp, #12]
 80089ce:	1a5b      	subs	r3, r3, r1
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	dcf2      	bgt.n	80089ba <_printf_i+0x212>
 80089d4:	e7eb      	b.n	80089ae <_printf_i+0x206>
 80089d6:	2500      	movs	r5, #0
 80089d8:	f104 0619 	add.w	r6, r4, #25
 80089dc:	e7f5      	b.n	80089ca <_printf_i+0x222>
 80089de:	bf00      	nop
 80089e0:	08008d25 	.word	0x08008d25
 80089e4:	08008d36 	.word	0x08008d36

080089e8 <memmove>:
 80089e8:	4288      	cmp	r0, r1
 80089ea:	b510      	push	{r4, lr}
 80089ec:	eb01 0402 	add.w	r4, r1, r2
 80089f0:	d902      	bls.n	80089f8 <memmove+0x10>
 80089f2:	4284      	cmp	r4, r0
 80089f4:	4623      	mov	r3, r4
 80089f6:	d807      	bhi.n	8008a08 <memmove+0x20>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	42a1      	cmp	r1, r4
 80089fc:	d008      	beq.n	8008a10 <memmove+0x28>
 80089fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a06:	e7f8      	b.n	80089fa <memmove+0x12>
 8008a08:	4402      	add	r2, r0
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	428a      	cmp	r2, r1
 8008a0e:	d100      	bne.n	8008a12 <memmove+0x2a>
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a1a:	e7f7      	b.n	8008a0c <memmove+0x24>

08008a1c <_sbrk_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	@ (8008a38 <_sbrk_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f9 fd82 	bl	8002530 <_sbrk>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_sbrk_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_sbrk_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	2000075c 	.word	0x2000075c

08008a3c <_realloc_r>:
 8008a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a40:	4680      	mov	r8, r0
 8008a42:	4615      	mov	r5, r2
 8008a44:	460c      	mov	r4, r1
 8008a46:	b921      	cbnz	r1, 8008a52 <_realloc_r+0x16>
 8008a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	f7ff bc59 	b.w	8008304 <_malloc_r>
 8008a52:	b92a      	cbnz	r2, 8008a60 <_realloc_r+0x24>
 8008a54:	f7ff fbea 	bl	800822c <_free_r>
 8008a58:	2400      	movs	r4, #0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a60:	f000 f81a 	bl	8008a98 <_malloc_usable_size_r>
 8008a64:	4285      	cmp	r5, r0
 8008a66:	4606      	mov	r6, r0
 8008a68:	d802      	bhi.n	8008a70 <_realloc_r+0x34>
 8008a6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a6e:	d8f4      	bhi.n	8008a5a <_realloc_r+0x1e>
 8008a70:	4629      	mov	r1, r5
 8008a72:	4640      	mov	r0, r8
 8008a74:	f7ff fc46 	bl	8008304 <_malloc_r>
 8008a78:	4607      	mov	r7, r0
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0ec      	beq.n	8008a58 <_realloc_r+0x1c>
 8008a7e:	42b5      	cmp	r5, r6
 8008a80:	462a      	mov	r2, r5
 8008a82:	4621      	mov	r1, r4
 8008a84:	bf28      	it	cs
 8008a86:	4632      	movcs	r2, r6
 8008a88:	f7ff fbc2 	bl	8008210 <memcpy>
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f7ff fbcc 	bl	800822c <_free_r>
 8008a94:	463c      	mov	r4, r7
 8008a96:	e7e0      	b.n	8008a5a <_realloc_r+0x1e>

08008a98 <_malloc_usable_size_r>:
 8008a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a9c:	1f18      	subs	r0, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfbc      	itt	lt
 8008aa2:	580b      	ldrlt	r3, [r1, r0]
 8008aa4:	18c0      	addlt	r0, r0, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_init>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr

08008ab4 <_fini>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr
