
AMP_PCBv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005c90  08005c90  00006c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d50  08005d50  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d58  08005d58  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d5c  08005d5c  00006d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  08005d6c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005d6c  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001083e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221a  00000000  00000000  0001787a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00019a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  0001aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e14  00000000  00000000  0001b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a39  00000000  00000000  0003e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc138  00000000  00000000  0004ff25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c05d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  0012c0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005c74 	.word	0x08005c74

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005c74 	.word	0x08005c74

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_uldivmod>:
 80009f0:	b953      	cbnz	r3, 8000a08 <__aeabi_uldivmod+0x18>
 80009f2:	b94a      	cbnz	r2, 8000a08 <__aeabi_uldivmod+0x18>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	bf08      	it	eq
 80009f8:	2800      	cmpeq	r0, #0
 80009fa:	bf1c      	itt	ne
 80009fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a00:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a04:	f000 b96a 	b.w	8000cdc <__aeabi_idiv0>
 8000a08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a10:	f000 f806 	bl	8000a20 <__udivmoddi4>
 8000a14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9d08      	ldr	r5, [sp, #32]
 8000a26:	460c      	mov	r4, r1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d14e      	bne.n	8000aca <__udivmoddi4+0xaa>
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	458c      	cmp	ip, r1
 8000a30:	4686      	mov	lr, r0
 8000a32:	fab2 f282 	clz	r2, r2
 8000a36:	d962      	bls.n	8000afe <__udivmoddi4+0xde>
 8000a38:	b14a      	cbz	r2, 8000a4e <__udivmoddi4+0x2e>
 8000a3a:	f1c2 0320 	rsb	r3, r2, #32
 8000a3e:	4091      	lsls	r1, r2
 8000a40:	fa20 f303 	lsr.w	r3, r0, r3
 8000a44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a48:	4319      	orrs	r1, r3
 8000a4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f f68c 	uxth.w	r6, ip
 8000a56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a66:	fb04 f106 	mul.w	r1, r4, r6
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x64>
 8000a6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a72:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a76:	f080 8112 	bcs.w	8000c9e <__udivmoddi4+0x27e>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 810f 	bls.w	8000c9e <__udivmoddi4+0x27e>
 8000a80:	3c02      	subs	r4, #2
 8000a82:	4463      	add	r3, ip
 8000a84:	1a59      	subs	r1, r3, r1
 8000a86:	fa1f f38e 	uxth.w	r3, lr
 8000a8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a96:	fb00 f606 	mul.w	r6, r0, r6
 8000a9a:	429e      	cmp	r6, r3
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x94>
 8000a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aa6:	f080 80fc 	bcs.w	8000ca2 <__udivmoddi4+0x282>
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	f240 80f9 	bls.w	8000ca2 <__udivmoddi4+0x282>
 8000ab0:	4463      	add	r3, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	1b9b      	subs	r3, r3, r6
 8000ab6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11d      	cbz	r5, 8000ac6 <__udivmoddi4+0xa6>
 8000abe:	40d3      	lsrs	r3, r2
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d905      	bls.n	8000ada <__udivmoddi4+0xba>
 8000ace:	b10d      	cbz	r5, 8000ad4 <__udivmoddi4+0xb4>
 8000ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e7f5      	b.n	8000ac6 <__udivmoddi4+0xa6>
 8000ada:	fab3 f183 	clz	r1, r3
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d146      	bne.n	8000b70 <__udivmoddi4+0x150>
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	d302      	bcc.n	8000aec <__udivmoddi4+0xcc>
 8000ae6:	4290      	cmp	r0, r2
 8000ae8:	f0c0 80f0 	bcc.w	8000ccc <__udivmoddi4+0x2ac>
 8000aec:	1a86      	subs	r6, r0, r2
 8000aee:	eb64 0303 	sbc.w	r3, r4, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d0e6      	beq.n	8000ac6 <__udivmoddi4+0xa6>
 8000af8:	e9c5 6300 	strd	r6, r3, [r5]
 8000afc:	e7e3      	b.n	8000ac6 <__udivmoddi4+0xa6>
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	f040 8090 	bne.w	8000c24 <__udivmoddi4+0x204>
 8000b04:	eba1 040c 	sub.w	r4, r1, ip
 8000b08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b0c:	fa1f f78c 	uxth.w	r7, ip
 8000b10:	2101      	movs	r1, #1
 8000b12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb07 f006 	mul.w	r0, r7, r6
 8000b26:	4298      	cmp	r0, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x11c>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x11a>
 8000b34:	4298      	cmp	r0, r3
 8000b36:	f200 80cd 	bhi.w	8000cd4 <__udivmoddi4+0x2b4>
 8000b3a:	4626      	mov	r6, r4
 8000b3c:	1a1c      	subs	r4, r3, r0
 8000b3e:	fa1f f38e 	uxth.w	r3, lr
 8000b42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b46:	fb08 4410 	mls	r4, r8, r0, r4
 8000b4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b4e:	fb00 f707 	mul.w	r7, r0, r7
 8000b52:	429f      	cmp	r7, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x148>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x146>
 8000b60:	429f      	cmp	r7, r3
 8000b62:	f200 80b0 	bhi.w	8000cc6 <__udivmoddi4+0x2a6>
 8000b66:	4620      	mov	r0, r4
 8000b68:	1bdb      	subs	r3, r3, r7
 8000b6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0x9c>
 8000b70:	f1c1 0620 	rsb	r6, r1, #32
 8000b74:	408b      	lsls	r3, r1
 8000b76:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b80:	fa04 f301 	lsl.w	r3, r4, r1
 8000b84:	ea43 030c 	orr.w	r3, r3, ip
 8000b88:	40f4      	lsrs	r4, r6
 8000b8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b8e:	0c38      	lsrs	r0, r7, #16
 8000b90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b94:	fbb4 fef0 	udiv	lr, r4, r0
 8000b98:	fa1f fc87 	uxth.w	ip, r7
 8000b9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000ba0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba4:	fb0e f90c 	mul.w	r9, lr, ip
 8000ba8:	45a1      	cmp	r9, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x1a6>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bb6:	f080 8084 	bcs.w	8000cc2 <__udivmoddi4+0x2a2>
 8000bba:	45a1      	cmp	r9, r4
 8000bbc:	f240 8081 	bls.w	8000cc2 <__udivmoddi4+0x2a2>
 8000bc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	eba4 0409 	sub.w	r4, r4, r9
 8000bca:	fa1f f983 	uxth.w	r9, r3
 8000bce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000bd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	d907      	bls.n	8000bf2 <__udivmoddi4+0x1d2>
 8000be2:	193c      	adds	r4, r7, r4
 8000be4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000be8:	d267      	bcs.n	8000cba <__udivmoddi4+0x29a>
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0x29a>
 8000bee:	3b02      	subs	r3, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bf6:	fba0 9302 	umull	r9, r3, r0, r2
 8000bfa:	eba4 040c 	sub.w	r4, r4, ip
 8000bfe:	429c      	cmp	r4, r3
 8000c00:	46ce      	mov	lr, r9
 8000c02:	469c      	mov	ip, r3
 8000c04:	d351      	bcc.n	8000caa <__udivmoddi4+0x28a>
 8000c06:	d04e      	beq.n	8000ca6 <__udivmoddi4+0x286>
 8000c08:	b155      	cbz	r5, 8000c20 <__udivmoddi4+0x200>
 8000c0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c12:	fa04 f606 	lsl.w	r6, r4, r6
 8000c16:	40cb      	lsrs	r3, r1
 8000c18:	431e      	orrs	r6, r3
 8000c1a:	40cc      	lsrs	r4, r1
 8000c1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	e750      	b.n	8000ac6 <__udivmoddi4+0xa6>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f103 	lsr.w	r1, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	fa24 f303 	lsr.w	r3, r4, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	430c      	orrs	r4, r1
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c40:	fa1f f78c 	uxth.w	r7, ip
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3110 	mls	r1, r8, r0, r3
 8000c4c:	0c23      	lsrs	r3, r4, #16
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f107 	mul.w	r1, r0, r7
 8000c56:	4299      	cmp	r1, r3
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x24c>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c62:	d22c      	bcs.n	8000cbe <__udivmoddi4+0x29e>
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d92a      	bls.n	8000cbe <__udivmoddi4+0x29e>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c74:	fb08 3311 	mls	r3, r8, r1, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb01 f307 	mul.w	r3, r1, r7
 8000c80:	42a3      	cmp	r3, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x276>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c8c:	d213      	bcs.n	8000cb6 <__udivmoddi4+0x296>
 8000c8e:	42a3      	cmp	r3, r4
 8000c90:	d911      	bls.n	8000cb6 <__udivmoddi4+0x296>
 8000c92:	3902      	subs	r1, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	1ae4      	subs	r4, r4, r3
 8000c98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c9c:	e739      	b.n	8000b12 <__udivmoddi4+0xf2>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	e6f0      	b.n	8000a84 <__udivmoddi4+0x64>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e706      	b.n	8000ab4 <__udivmoddi4+0x94>
 8000ca6:	45c8      	cmp	r8, r9
 8000ca8:	d2ae      	bcs.n	8000c08 <__udivmoddi4+0x1e8>
 8000caa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cb2:	3801      	subs	r0, #1
 8000cb4:	e7a8      	b.n	8000c08 <__udivmoddi4+0x1e8>
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	e7ed      	b.n	8000c96 <__udivmoddi4+0x276>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	e799      	b.n	8000bf2 <__udivmoddi4+0x1d2>
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	e7d4      	b.n	8000c6c <__udivmoddi4+0x24c>
 8000cc2:	46d6      	mov	lr, sl
 8000cc4:	e77f      	b.n	8000bc6 <__udivmoddi4+0x1a6>
 8000cc6:	4463      	add	r3, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e74d      	b.n	8000b68 <__udivmoddi4+0x148>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	4623      	mov	r3, r4
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e70f      	b.n	8000af4 <__udivmoddi4+0xd4>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	e730      	b.n	8000b3c <__udivmoddi4+0x11c>
 8000cda:	bf00      	nop

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000ce0:	b4b0      	push	{r4, r5, r7}
 8000ce2:	b08f      	sub	sp, #60	@ 0x3c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000ce8:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d00:	23ff      	movs	r3, #255	@ 0xff
 8000d02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d06:	2364      	movs	r3, #100	@ 0x64
 8000d08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	461d      	mov	r5, r3
 8000d14:	f107 040c 	add.w	r4, r7, #12
 8000d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	373c      	adds	r7, #60	@ 0x3c
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bcb0      	pop	{r4, r5, r7}
 8000d30:	4770      	bx	lr

08000d32 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6898      	ldr	r0, [r3, #8]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	899b      	ldrh	r3, [r3, #12]
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	f002 f899 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f001 fb5a 	bl	8002404 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6898      	ldr	r0, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	899b      	ldrh	r3, [r3, #12]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f002 f88e 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d60:	2064      	movs	r0, #100	@ 0x64
 8000d62:	f001 fb4f 	bl	8002404 <HAL_Delay>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 f9ff 	bl	800117e <LoRa_read>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d107      	bne.n	8000d9e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d8e:	7bbb      	ldrb	r3, [r7, #14]
 8000d90:	f023 0307 	bic.w	r3, r3, #7
 8000d94:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
 8000d9c:	e03e      	b.n	8000e1c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10c      	bne.n	8000dbe <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000da8:	f023 0307 	bic.w	r3, r3, #7
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
 8000dbc:	e02e      	b.n	8000e1c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d10c      	bne.n	8000dde <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dc8:	f023 0307 	bic.w	r3, r3, #7
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	f043 0303 	orr.w	r3, r3, #3
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	61da      	str	r2, [r3, #28]
 8000ddc:	e01e      	b.n	8000e1c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d10c      	bne.n	8000dfe <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000de8:	f023 0307 	bic.w	r3, r3, #7
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	f043 0305 	orr.w	r3, r3, #5
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2205      	movs	r2, #5
 8000dfa:	61da      	str	r2, [r3, #28]
 8000dfc:	e00e      	b.n	8000e1c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b06      	cmp	r3, #6
 8000e02:	d10b      	bne.n	8000e1c <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e08:	f023 0307 	bic.w	r3, r3, #7
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	f043 0306 	orr.w	r3, r3, #6
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2206      	movs	r2, #6
 8000e1a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2101      	movs	r1, #1
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f9c5 	bl	80011b2 <LoRa_write>
	//HAL_Delay(10);
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f002 f816 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6998      	ldr	r0, [r3, #24]
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	f002 febd 	bl	8003bda <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e60:	bf00      	nop
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 fac2 	bl	80043f0 <HAL_SPI_GetState>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d1f7      	bne.n	8000e62 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6998      	ldr	r0, [r3, #24]
 8000e76:	8b3a      	ldrh	r2, [r7, #24]
 8000e78:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e7c:	6839      	ldr	r1, [r7, #0]
 8000e7e:	f002 ffef 	bl	8003e60 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e82:	bf00      	nop
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fab1 	bl	80043f0 <HAL_SPI_GetState>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d1f7      	bne.n	8000e84 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	889b      	ldrh	r3, [r3, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f001 ffec 	bl	8002e7c <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	889b      	ldrh	r3, [r3, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f001 ffd8 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6998      	ldr	r0, [r3, #24]
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	f002 fe7f 	bl	8003bda <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000edc:	bf00      	nop
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fa84 	bl	80043f0 <HAL_SPI_GetState>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d1f7      	bne.n	8000ede <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6998      	ldr	r0, [r3, #24]
 8000ef2:	8b3a      	ldrh	r2, [r7, #24]
 8000ef4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ef8:	6839      	ldr	r1, [r7, #0]
 8000efa:	f002 fe6e 	bl	8003bda <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000efe:	bf00      	nop
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fa73 	bl	80043f0 <HAL_SPI_GetState>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d1f7      	bne.n	8000f00 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	889b      	ldrh	r3, [r3, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f001 ffae 	bl	8002e7c <HAL_GPIO_WritePin>
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000f34:	2126      	movs	r1, #38	@ 0x26
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f921 	bl	800117e <LoRa_read>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e003      	b.n	8000f58 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	f023 0308 	bic.w	r3, r3, #8
 8000f56:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2126      	movs	r1, #38	@ 0x26
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f927 	bl	80011b2 <LoRa_write>
	HAL_Delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f001 fa4d 	bl	8002404 <HAL_Delay>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	@ 0x58
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f7c:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <LoRa_setAutoLDO+0x68>)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4611      	mov	r1, r2
 8000f84:	2250      	movs	r2, #80	@ 0x50
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 fe66 	bl	8005c58 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f92:	461a      	mov	r2, r3
 8000f94:	2301      	movs	r3, #1
 8000f96:	4093      	lsls	r3, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fa85 	bl	80004a8 <__aeabi_i2d>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	3358      	adds	r3, #88	@ 0x58
 8000fa8:	443b      	add	r3, r7
 8000faa:	3b50      	subs	r3, #80	@ 0x50
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fc0e 	bl	80007d0 <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fcf0 	bl	80009a0 <__aeabi_d2iz>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b10      	cmp	r3, #16
 8000fc4:	bfcc      	ite	gt
 8000fc6:	2301      	movgt	r3, #1
 8000fc8:	2300      	movle	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffaa 	bl	8000f28 <LoRa_setLowDaraRateOptimization>
}
 8000fd4:	bf00      	nop
 8000fd6:	3758      	adds	r7, #88	@ 0x58
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	08005c90 	.word	0x08005c90

08000fe0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	04db      	lsls	r3, r3, #19
 8000fee:	115b      	asrs	r3, r3, #5
 8000ff0:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2106      	movs	r1, #6
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f8d7 	bl	80011b2 <LoRa_write>
	HAL_Delay(5);
 8001004:	2005      	movs	r0, #5
 8001006:	f001 f9fd 	bl	8002404 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	461a      	mov	r2, r3
 8001014:	2107      	movs	r1, #7
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f8cb 	bl	80011b2 <LoRa_write>
	HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f001 f9f1 	bl	8002404 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	461a      	mov	r2, r3
 800102a:	2108      	movs	r1, #8
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f8c0 	bl	80011b2 <LoRa_write>
	HAL_Delay(5);
 8001032:	2005      	movs	r0, #5
 8001034:	f001 f9e6 	bl	8002404 <HAL_Delay>
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b0c      	cmp	r3, #12
 800104e:	dd01      	ble.n	8001054 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001050:	230c      	movs	r3, #12
 8001052:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b06      	cmp	r3, #6
 8001058:	dc01      	bgt.n	800105e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800105a:	2307      	movs	r3, #7
 800105c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800105e:	211e      	movs	r1, #30
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f88c 	bl	800117e <LoRa_read>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f001 f9ca 	bl	8002404 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	b2da      	uxtb	r2, r3
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	461a      	mov	r2, r3
 8001088:	211e      	movs	r1, #30
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f891 	bl	80011b2 <LoRa_write>
	HAL_Delay(10);
 8001090:	200a      	movs	r0, #10
 8001092:	f001 f9b7 	bl	8002404 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff6c 	bl	8000f74 <LoRa_setAutoLDO>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2109      	movs	r1, #9
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f87b 	bl	80011b2 <LoRa_write>
	HAL_Delay(10);
 80010bc:	200a      	movs	r0, #10
 80010be:	f001 f9a1 	bl	8002404 <HAL_Delay>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b2c      	cmp	r3, #44	@ 0x2c
 80010e0:	d801      	bhi.n	80010e6 <LoRa_setOCP+0x1a>
		current = 45;
 80010e2:	232d      	movs	r3, #45	@ 0x2d
 80010e4:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80010ea:	d901      	bls.n	80010f0 <LoRa_setOCP+0x24>
		current = 240;
 80010ec:	23f0      	movs	r3, #240	@ 0xf0
 80010ee:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2b78      	cmp	r3, #120	@ 0x78
 80010f4:	d809      	bhi.n	800110a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	3b2d      	subs	r3, #45	@ 0x2d
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <LoRa_setOCP+0x78>)
 80010fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001100:	1052      	asrs	r2, r2, #1
 8001102:	17db      	asrs	r3, r3, #31
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e00b      	b.n	8001122 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	2bf0      	cmp	r3, #240	@ 0xf0
 800110e:	d808      	bhi.n	8001122 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	331e      	adds	r3, #30
 8001114:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <LoRa_setOCP+0x78>)
 8001116:	fb82 1203 	smull	r1, r2, r2, r3
 800111a:	1092      	asrs	r2, r2, #2
 800111c:	17db      	asrs	r3, r3, #31
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	3320      	adds	r3, #32
 8001126:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	461a      	mov	r2, r3
 800112c:	210b      	movs	r1, #11
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f83f 	bl	80011b2 <LoRa_write>
	HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f001 f965 	bl	8002404 <HAL_Delay>
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	66666667 	.word	0x66666667

08001148 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001150:	211e      	movs	r1, #30
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f813 	bl	800117e <LoRa_read>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	f043 0307 	orr.w	r3, r3, #7
 8001162:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	461a      	mov	r2, r3
 8001168:	211e      	movs	r1, #30
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f821 	bl	80011b2 <LoRa_write>
	HAL_Delay(10);
 8001170:	200a      	movs	r0, #10
 8001172:	f001 f947 	bl	8002404 <HAL_Delay>
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af02      	add	r7, sp, #8
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001190:	b2db      	uxtb	r3, r3
 8001192:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001194:	f107 030f 	add.w	r3, r7, #15
 8001198:	f107 010e 	add.w	r1, r7, #14
 800119c:	2201      	movs	r2, #1
 800119e:	9200      	str	r2, [sp, #0]
 80011a0:	2201      	movs	r2, #1
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe44 	bl	8000e30 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af02      	add	r7, sp, #8
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
 80011be:	4613      	mov	r3, r2
 80011c0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	73bb      	strb	r3, [r7, #14]
	data = value;
 80011cc:	78bb      	ldrb	r3, [r7, #2]
 80011ce:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80011d0:	f107 030f 	add.w	r3, r7, #15
 80011d4:	f107 010e 	add.w	r1, r7, #14
 80011d8:	2201      	movs	r2, #1
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	2201      	movs	r2, #1
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fe64 	bl	8000eac <LoRa_writeReg>
	//HAL_Delay(5);
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

	return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffee 	bl	80011ec <LoRa_isvalid>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8096 	beq.w	8001344 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fda7 	bl	8000d6e <LoRa_gotoMode>
			HAL_Delay(10);
 8001220:	200a      	movs	r0, #10
 8001222:	f001 f8ef 	bl	8002404 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001226:	2101      	movs	r1, #1
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffa8 	bl	800117e <LoRa_read>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001232:	200a      	movs	r0, #10
 8001234:	f001 f8e6 	bl	8002404 <HAL_Delay>
			data = read | 0x80;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800123e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	461a      	mov	r2, r3
 8001244:	2101      	movs	r1, #1
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffb3 	bl	80011b2 <LoRa_write>
			HAL_Delay(100);
 800124c:	2064      	movs	r0, #100	@ 0x64
 800124e:	f001 f8d9 	bl	8002404 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4619      	mov	r1, r3
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fec1 	bl	8000fe0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff1c 	bl	80010a4 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800127a:	2223      	movs	r2, #35	@ 0x23
 800127c:	210c      	movs	r1, #12
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff97 	bl	80011b2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff5f 	bl	8001148 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fed4 	bl	8001040 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001298:	22ff      	movs	r2, #255	@ 0xff
 800129a:	211f      	movs	r1, #31
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff88 	bl	80011b2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	461a      	mov	r2, r3
 80012c2:	211d      	movs	r1, #29
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff74 	bl	80011b2 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fe52 	bl	8000f74 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	2120      	movs	r1, #32
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff67 	bl	80011b2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	2121      	movs	r1, #33	@ 0x21
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff5f 	bl	80011b2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80012f4:	2140      	movs	r1, #64	@ 0x40
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff41 	bl	800117e <LoRa_read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001306:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	461a      	mov	r2, r3
 800130c:	2140      	movs	r1, #64	@ 0x40
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff4f 	bl	80011b2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001314:	2101      	movs	r1, #1
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fd29 	bl	8000d6e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001322:	200a      	movs	r0, #10
 8001324:	f001 f86e 	bl	8002404 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001328:	2142      	movs	r1, #66	@ 0x42
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff27 	bl	800117e <LoRa_read>
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b12      	cmp	r3, #18
 8001338:	d101      	bne.n	800133e <LoRa_init+0x13c>
				return LORA_OK;
 800133a:	23c8      	movs	r3, #200	@ 0xc8
 800133c:	e004      	b.n	8001348 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800133e:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001342:	e001      	b.n	8001348 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001344:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b0bc      	sub	sp, #240	@ 0xf0
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001356:	f000 ffe3 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135a:	f000 f8b9 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135e:	f000 fc1b 	bl	8001b98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001362:	f000 fbef 	bl	8001b44 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001366:	f000 fb99 	bl	8001a9c <MX_UART4_Init>
  MX_SPI2_Init();
 800136a:	f000 f971 	bl	8001650 <MX_SPI2_Init>
  MX_TIM3_Init();
 800136e:	f000 fa6b 	bl	8001848 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001372:	f000 faf5 	bl	8001960 <MX_TIM8_Init>
  MX_UART5_Init();
 8001376:	f000 fbbb 	bl	8001af0 <MX_UART5_Init>
  MX_TIM1_Init();
 800137a:	f000 f99f 	bl	80016bc <MX_TIM1_Init>
  MX_ADC1_Init();
 800137e:	f000 f915 	bl	80015ac <MX_ADC1_Init>
  MX_TIM2_Init();
 8001382:	f000 f9eb 	bl	800175c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t welcome_msg[] = "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n";
 8001386:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <main+0x160>)
 8001388:	f107 04b4 	add.w	r4, r7, #180	@ 0xb4
 800138c:	461d      	mov	r5, r3
 800138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800139e:	c403      	stmia	r4!, {r0, r1}
 80013a0:	8022      	strh	r2, [r4, #0]
  HAL_UART_Transmit(&huart2, welcome_msg, sizeof(welcome_msg), 10);
 80013a2:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 80013a6:	230a      	movs	r3, #10
 80013a8:	223a      	movs	r2, #58	@ 0x3a
 80013aa:	4842      	ldr	r0, [pc, #264]	@ (80014b4 <main+0x164>)
 80013ac:	f004 f86c 	bl	8005488 <HAL_UART_Transmit>
  uint8_t welcome_msg2[] = "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n";
 80013b0:	4b3f      	ldr	r3, [pc, #252]	@ (80014b0 <main+0x160>)
 80013b2:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 80013b6:	461d      	mov	r5, r3
 80013b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c8:	c403      	stmia	r4!, {r0, r1}
 80013ca:	8022      	strh	r2, [r4, #0]
  HAL_UART_Transmit(&huart4, welcome_msg2, sizeof(welcome_msg2), 10);
 80013cc:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80013d0:	230a      	movs	r3, #10
 80013d2:	223a      	movs	r2, #58	@ 0x3a
 80013d4:	4838      	ldr	r0, [pc, #224]	@ (80014b8 <main+0x168>)
 80013d6:	f004 f857 	bl	8005488 <HAL_UART_Transmit>

  LoRa lora;
    lora = newLoRa();
 80013da:	463b      	mov	r3, r7
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fc7f 	bl	8000ce0 <newLoRa>
 80013e2:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80013e6:	463d      	mov	r5, r7
 80013e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    lora.CS_port = LORA_NSS_GPIO_Port;
 80013f8:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <main+0x16c>)
 80013fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    lora.CS_pin = LORA_NSS_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001400:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    lora.reset_port = LORA_RST_GPIO_Port;
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <main+0x16c>)
 8001406:	657b      	str	r3, [r7, #84]	@ 0x54
    lora.reset_pin = LORA_RST_Pin;
 8001408:	2310      	movs	r3, #16
 800140a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    lora.DIO0_port = LORA_DIO0_GPIO_Port;
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <main+0x16c>)
 8001410:	65fb      	str	r3, [r7, #92]	@ 0x5c
    lora.DIO0_pin = LORA_DIO0_Pin;
 8001412:	2320      	movs	r3, #32
 8001414:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    lora.hSPIx = &hspi2;
 8001418:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <main+0x170>)
 800141a:	667b      	str	r3, [r7, #100]	@ 0x64

    lora.frequency = 915;
 800141c:	f240 3393 	movw	r3, #915	@ 0x393
 8001420:	66fb      	str	r3, [r7, #108]	@ 0x6c

    LoRa_reset(&lora);
 8001422:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fc83 	bl	8000d32 <LoRa_reset>
    uint16_t lora_status = LoRa_init(&lora);
 800142c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fee6 	bl	8001202 <LoRa_init>
 8001436:	4603      	mov	r3, r0
 8001438:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
    if (lora_status == LORA_OK)
 800143c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8001440:	2bc8      	cmp	r3, #200	@ 0xc8
 8001442:	d10d      	bne.n	8001460 <main+0x110>
    {
    	  uint8_t msg[] = "LoRa OK\r\n";
 8001444:	4a1f      	ldr	r2, [pc, #124]	@ (80014c4 <main+0x174>)
 8001446:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	c303      	stmia	r3!, {r0, r1}
 800144e:	801a      	strh	r2, [r3, #0]
    	  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 10);
 8001450:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001454:	230a      	movs	r3, #10
 8001456:	220a      	movs	r2, #10
 8001458:	4816      	ldr	r0, [pc, #88]	@ (80014b4 <main+0x164>)
 800145a:	f004 f815 	bl	8005488 <HAL_UART_Transmit>
 800145e:	e00c      	b.n	800147a <main+0x12a>
    }
    else
    {
    	  uint8_t msg[] = "LoRa FAILED\r\n";
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <main+0x178>)
 8001462:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	c407      	stmia	r4!, {r0, r1, r2}
 800146a:	8023      	strh	r3, [r4, #0]
    	  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 10);
 800146c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001470:	230a      	movs	r3, #10
 8001472:	220e      	movs	r2, #14
 8001474:	480f      	ldr	r0, [pc, #60]	@ (80014b4 <main+0x164>)
 8001476:	f004 f807 	bl	8005488 <HAL_UART_Transmit>
    }

    HAL_Delay(2000);
 800147a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800147e:	f000 ffc1 	bl	8002404 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(FAN1_GPIO_Port, FAN1_Pin, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001488:	4810      	ldr	r0, [pc, #64]	@ (80014cc <main+0x17c>)
 800148a:	f001 fcf7 	bl	8002e7c <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 800148e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001492:	f000 ffb7 	bl	8002404 <HAL_Delay>
	  HAL_GPIO_WritePin(FAN1_GPIO_Port, FAN1_Pin, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800149c:	480b      	ldr	r0, [pc, #44]	@ (80014cc <main+0x17c>)
 800149e:	f001 fced 	bl	8002e7c <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80014a2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014a6:	f000 ffad 	bl	8002404 <HAL_Delay>
	  HAL_GPIO_WritePin(FAN1_GPIO_Port, FAN1_Pin, 1);
 80014aa:	bf00      	nop
 80014ac:	e7e9      	b.n	8001482 <main+0x132>
 80014ae:	bf00      	nop
 80014b0:	08005ce0 	.word	0x08005ce0
 80014b4:	20000278 	.word	0x20000278
 80014b8:	200001e8 	.word	0x200001e8
 80014bc:	40020400 	.word	0x40020400
 80014c0:	20000070 	.word	0x20000070
 80014c4:	08005d1c 	.word	0x08005d1c
 80014c8:	08005d28 	.word	0x08005d28
 80014cc:	40020800 	.word	0x40020800

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	@ 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	2234      	movs	r2, #52	@ 0x34
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fb8e 	bl	8005c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <SystemClock_Config+0xd4>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a29      	ldr	r2, [pc, #164]	@ (80015a4 <SystemClock_Config+0xd4>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <SystemClock_Config+0xd4>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <SystemClock_Config+0xd8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800151c:	4a22      	ldr	r2, [pc, #136]	@ (80015a8 <SystemClock_Config+0xd8>)
 800151e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <SystemClock_Config+0xd8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001538:	2310      	movs	r3, #16
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001540:	2300      	movs	r3, #0
 8001542:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001544:	2310      	movs	r3, #16
 8001546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001548:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800154c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800154e:	2304      	movs	r3, #4
 8001550:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001552:	2302      	movs	r3, #2
 8001554:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4618      	mov	r0, r3
 8001560:	f002 f814 	bl	800358c <HAL_RCC_OscConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800156a:	f000 fbe9 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2302      	movs	r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	2102      	movs	r1, #2
 800158a:	4618      	mov	r0, r3
 800158c:	f001 fcb4 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001596:	f000 fbd3 	bl	8001d40 <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3750      	adds	r7, #80	@ 0x50
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015c0:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <MX_ADC1_Init+0x9c>)
 80015c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015de:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ec:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015ee:	4a17      	ldr	r2, [pc, #92]	@ (800164c <MX_ADC1_Init+0xa0>)
 80015f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <MX_ADC1_Init+0x98>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <MX_ADC1_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <MX_ADC1_Init+0x98>)
 8001608:	2201      	movs	r2, #1
 800160a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160c:	480d      	ldr	r0, [pc, #52]	@ (8001644 <MX_ADC1_Init+0x98>)
 800160e:	f000 ff1d 	bl	800244c <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001618:	f000 fb92 	bl	8001d40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800161c:	230f      	movs	r3, #15
 800161e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_ADC1_Init+0x98>)
 800162e:	f000 ff51 	bl	80024d4 <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001638:	f000 fb82 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000028 	.word	0x20000028
 8001648:	40012000 	.word	0x40012000
 800164c:	0f000001 	.word	0x0f000001

08001650 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_SPI2_Init+0x64>)
 8001656:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <MX_SPI2_Init+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_SPI2_Init+0x64>)
 800165c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001660:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_SPI2_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <MX_SPI2_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_SPI2_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <MX_SPI2_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MX_SPI2_Init+0x64>)
 800167c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001680:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_SPI2_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <MX_SPI2_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_SPI2_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <MX_SPI2_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_SPI2_Init+0x64>)
 800169c:	220a      	movs	r2, #10
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	@ (80016b4 <MX_SPI2_Init+0x64>)
 80016a2:	f002 fa11 	bl	8003ac8 <HAL_SPI_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016ac:	f000 fb48 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000070 	.word	0x20000070
 80016b8:	40003800 	.word	0x40003800

080016bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <MX_TIM1_Init+0x98>)
 80016da:	4a1f      	ldr	r2, [pc, #124]	@ (8001758 <MX_TIM1_Init+0x9c>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_TIM1_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <MX_TIM1_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_TIM1_Init+0x98>)
 80016ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_TIM1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <MX_TIM1_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_TIM1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001704:	4813      	ldr	r0, [pc, #76]	@ (8001754 <MX_TIM1_Init+0x98>)
 8001706:	f002 ffc3 	bl	8004690 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 fb16 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001718:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <MX_TIM1_Init+0x98>)
 8001722:	f003 f9d5 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800172c:	f000 fb08 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_TIM1_Init+0x98>)
 800173e:	f003 fd85 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001748:	f000 fafa 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000c8 	.word	0x200000c8
 8001758:	40010000 	.word	0x40010000

0800175c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08e      	sub	sp, #56	@ 0x38
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178c:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <MX_TIM2_Init+0xe8>)
 800178e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001794:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <MX_TIM2_Init+0xe8>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017a0:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b4:	4823      	ldr	r0, [pc, #140]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017b6:	f002 ff6b 	bl	8004690 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017c0:	f000 fabe 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ce:	4619      	mov	r1, r3
 80017d0:	481c      	ldr	r0, [pc, #112]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017d2:	f003 f97d 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017dc:	f000 fab0 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80017e0:	4818      	ldr	r0, [pc, #96]	@ (8001844 <MX_TIM2_Init+0xe8>)
 80017e2:	f002 ffa4 	bl	800472e <HAL_TIM_OC_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017ec:	f000 faa8 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	4619      	mov	r1, r3
 80017fe:	4811      	ldr	r0, [pc, #68]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001800:	f003 fd24 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800180a:	f000 fa99 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2204      	movs	r2, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4807      	ldr	r0, [pc, #28]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001826:	f003 f835 	bl	8004894 <HAL_TIM_OC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001830:	f000 fa86 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <MX_TIM2_Init+0xe8>)
 8001836:	f000 fb9f 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 800183a:	bf00      	nop
 800183c:	3738      	adds	r7, #56	@ 0x38
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000110 	.word	0x20000110

08001848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	@ 0x38
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	f107 0320 	add.w	r3, r7, #32
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001878:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <MX_TIM3_Init+0x110>)
 800187a:	4a38      	ldr	r2, [pc, #224]	@ (800195c <MX_TIM3_Init+0x114>)
 800187c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800187e:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <MX_TIM3_Init+0x110>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b34      	ldr	r3, [pc, #208]	@ (8001958 <MX_TIM3_Init+0x110>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800188a:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <MX_TIM3_Init+0x110>)
 800188c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001890:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <MX_TIM3_Init+0x110>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <MX_TIM3_Init+0x110>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800189e:	482e      	ldr	r0, [pc, #184]	@ (8001958 <MX_TIM3_Init+0x110>)
 80018a0:	f002 fef6 	bl	8004690 <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018aa:	f000 fa49 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018b8:	4619      	mov	r1, r3
 80018ba:	4827      	ldr	r0, [pc, #156]	@ (8001958 <MX_TIM3_Init+0x110>)
 80018bc:	f003 f908 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018c6:	f000 fa3b 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80018ca:	4823      	ldr	r0, [pc, #140]	@ (8001958 <MX_TIM3_Init+0x110>)
 80018cc:	f002 ff2f 	bl	800472e <HAL_TIM_OC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018d6:	f000 fa33 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018da:	481f      	ldr	r0, [pc, #124]	@ (8001958 <MX_TIM3_Init+0x110>)
 80018dc:	f002 ff80 	bl	80047e0 <HAL_TIM_PWM_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80018e6:	f000 fa2b 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	4619      	mov	r1, r3
 80018f8:	4817      	ldr	r0, [pc, #92]	@ (8001958 <MX_TIM3_Init+0x110>)
 80018fa:	f003 fca7 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001904:	f000 fa1c 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2208      	movs	r2, #8
 800191c:	4619      	mov	r1, r3
 800191e:	480e      	ldr	r0, [pc, #56]	@ (8001958 <MX_TIM3_Init+0x110>)
 8001920:	f002 ffb8 	bl	8004894 <HAL_TIM_OC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800192a:	f000 fa09 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192e:	2360      	movs	r3, #96	@ 0x60
 8001930:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	220c      	movs	r2, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	@ (8001958 <MX_TIM3_Init+0x110>)
 800193a:	f003 f807 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001944:	f000 f9fc 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001948:	4803      	ldr	r0, [pc, #12]	@ (8001958 <MX_TIM3_Init+0x110>)
 800194a:	f000 fb15 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 800194e:	bf00      	nop
 8001950:	3738      	adds	r7, #56	@ 0x38
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000158 	.word	0x20000158
 800195c:	40000400 	.word	0x40000400

08001960 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b096      	sub	sp, #88	@ 0x58
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2220      	movs	r2, #32
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f004 f931 	bl	8005c00 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800199e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001a98 <MX_TIM8_Init+0x138>)
 80019a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019b0:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019be:	4b35      	ldr	r3, [pc, #212]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019ca:	4832      	ldr	r0, [pc, #200]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019cc:	f002 fe60 	bl	8004690 <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80019d6:	f000 f9b3 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019e4:	4619      	mov	r1, r3
 80019e6:	482b      	ldr	r0, [pc, #172]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019e8:	f003 f872 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80019f2:	f000 f9a5 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019f6:	4827      	ldr	r0, [pc, #156]	@ (8001a94 <MX_TIM8_Init+0x134>)
 80019f8:	f002 fef2 	bl	80047e0 <HAL_TIM_PWM_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001a02:	f000 f99d 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a12:	4619      	mov	r1, r3
 8001a14:	481f      	ldr	r0, [pc, #124]	@ (8001a94 <MX_TIM8_Init+0x134>)
 8001a16:	f003 fc19 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a20:	f000 f98e 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a24:	2360      	movs	r3, #96	@ 0x60
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a40:	220c      	movs	r2, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	4813      	ldr	r0, [pc, #76]	@ (8001a94 <MX_TIM8_Init+0x134>)
 8001a46:	f002 ff81 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001a50:	f000 f976 	bl	8001d40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4807      	ldr	r0, [pc, #28]	@ (8001a94 <MX_TIM8_Init+0x134>)
 8001a78:	f003 fc64 	bl	8005344 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001a82:	f000 f95d 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a86:	4803      	ldr	r0, [pc, #12]	@ (8001a94 <MX_TIM8_Init+0x134>)
 8001a88:	f000 fa76 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 8001a8c:	bf00      	nop
 8001a8e:	3758      	adds	r7, #88	@ 0x58
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200001a0 	.word	0x200001a0
 8001a98:	40010400 	.word	0x40010400

08001a9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <MX_UART4_Init+0x50>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_UART4_Init+0x4c>)
 8001ad4:	f003 fc88 	bl	80053e8 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ade:	f000 f92f 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200001e8 	.word	0x200001e8
 8001aec:	40004c00 	.word	0x40004c00

08001af0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <MX_UART5_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_UART5_Init+0x4c>)
 8001b28:	f003 fc5e 	bl	80053e8 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 f905 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000230 	.word	0x20000230
 8001b40:	40005000 	.word	0x40005000

08001b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <MX_USART2_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b7c:	f003 fc34 	bl	80053e8 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b86:	f000 f8db 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000278 	.word	0x20000278
 8001b94:	40004400 	.word	0x40004400

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b58      	ldr	r3, [pc, #352]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a57      	ldr	r2, [pc, #348]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b55      	ldr	r3, [pc, #340]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b51      	ldr	r3, [pc, #324]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a50      	ldr	r2, [pc, #320]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b4a      	ldr	r3, [pc, #296]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a49      	ldr	r2, [pc, #292]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b43      	ldr	r3, [pc, #268]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a42      	ldr	r2, [pc, #264]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b40      	ldr	r3, [pc, #256]	@ (8001d30 <MX_GPIO_Init+0x198>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f640 5147 	movw	r1, #3399	@ 0xd47
 8001c40:	483c      	ldr	r0, [pc, #240]	@ (8001d34 <MX_GPIO_Init+0x19c>)
 8001c42:	f001 f91b 	bl	8002e7c <HAL_GPIO_WritePin>
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 8001c46:	2200      	movs	r2, #0
 8001c48:	f649 4130 	movw	r1, #39984	@ 0x9c30
 8001c4c:	483a      	ldr	r0, [pc, #232]	@ (8001d38 <MX_GPIO_Init+0x1a0>)
 8001c4e:	f001 f915 	bl	8002e7c <HAL_GPIO_WritePin>
                          |STAT4_Pin|FAN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 8001c52:	2200      	movs	r2, #0
 8001c54:	f243 1190 	movw	r1, #12688	@ 0x3190
 8001c58:	4838      	ldr	r0, [pc, #224]	@ (8001d3c <MX_GPIO_Init+0x1a4>)
 8001c5a:	f001 f90f 	bl	8002e7c <HAL_GPIO_WritePin>
                          |BRAKE_SEL0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	482f      	ldr	r0, [pc, #188]	@ (8001d34 <MX_GPIO_Init+0x19c>)
 8001c76:	f000 ff6d 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : STR_EN__Pin STR_INPUTA__Pin STR_INPUTA__DIR_Pin BRAKE_INB_Pin
                           BRAKE_INA_Pin FAN1_Pin FAN2_Pin */
  GPIO_InitStruct.Pin = STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 8001c7a:	f640 5347 	movw	r3, #3399	@ 0xd47
 8001c7e:	617b      	str	r3, [r7, #20]
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	4828      	ldr	r0, [pc, #160]	@ (8001d34 <MX_GPIO_Init+0x19c>)
 8001c94:	f000 ff5e 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : STR_INPUTB__DIR_Pin STAT3_Pin IMU_CS_Pin STAT2_Pin
                           STAT4_Pin FAN4_Pin */
  GPIO_InitStruct.Pin = STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 8001c98:	f649 4330 	movw	r3, #39984	@ 0x9c30
 8001c9c:	617b      	str	r3, [r7, #20]
                          |STAT4_Pin|FAN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4821      	ldr	r0, [pc, #132]	@ (8001d38 <MX_GPIO_Init+0x1a0>)
 8001cb2:	f000 ff4f 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481a      	ldr	r0, [pc, #104]	@ (8001d34 <MX_GPIO_Init+0x19c>)
 8001ccc:	f000 ff42 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin LORA_NSS_Pin LORA_RST_Pin FAN3_Pin
                           BRAKE_SEL0_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 8001cd0:	f243 1390 	movw	r3, #12688	@ 0x3190
 8001cd4:	617b      	str	r3, [r7, #20]
                          |BRAKE_SEL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4814      	ldr	r0, [pc, #80]	@ (8001d3c <MX_GPIO_Init+0x1a4>)
 8001cea:	f000 ff33 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	480e      	ldr	r0, [pc, #56]	@ (8001d3c <MX_GPIO_Init+0x1a4>)
 8001d04:	f000 ff26 	bl	8002b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f000 feea 	bl	8002ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d12:	200a      	movs	r0, #10
 8001d14:	f000 ff03 	bl	8002b1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2017      	movs	r0, #23
 8001d1e:	f000 fee2 	bl	8002ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d22:	2017      	movs	r0, #23
 8001d24:	f000 fefb 	bl	8002b1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	@ 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <Error_Handler+0x8>

08001d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d8a:	2007      	movs	r0, #7
 8001d8c:	f000 fea0 	bl	8002ad0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a17      	ldr	r2, [pc, #92]	@ (8001e18 <HAL_ADC_MspInit+0x7c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d127      	bne.n	8001e0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a15      	ldr	r2, [pc, #84]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <HAL_ADC_MspInit+0x80>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BRAKE_CS_Pin;
 8001df6:	2320      	movs	r3, #32
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BRAKE_CS_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <HAL_ADC_MspInit+0x84>)
 8001e0a:	f000 fea3 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	@ 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40012000 	.word	0x40012000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020800 	.word	0x40020800

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_SPI_MspInit+0x84>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12c      	bne.n	8001ea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <HAL_SPI_MspInit+0x88>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <HAL_SPI_MspInit+0x88>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_SPI_MspInit+0x88>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_SPI_MspInit+0x88>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a10      	ldr	r2, [pc, #64]	@ (8001eac <HAL_SPI_MspInit+0x88>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <HAL_SPI_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001e7e:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e90:	2305      	movs	r3, #5
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <HAL_SPI_MspInit+0x8c>)
 8001e9c:	f000 fe5a 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	@ 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40003800 	.word	0x40003800
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <HAL_TIM_Base_MspInit+0xb4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ee2:	e03a      	b.n	8001f5a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
}
 8001f0a:	e026      	b.n	8001f5a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_TIM_Base_MspInit+0xbc>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	e012      	b.n	8001f5a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0e      	ldr	r2, [pc, #56]	@ (8001f74 <HAL_TIM_Base_MspInit+0xc0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_TIM_Base_MspInit+0xb8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f98:	d11f      	bne.n	8001fda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b35      	ldr	r3, [pc, #212]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a34      	ldr	r2, [pc, #208]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BRAKE_PWM_Pin;
 8001fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BRAKE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4829      	ldr	r0, [pc, #164]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 8001fd4:	f000 fdbe 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001fd8:	e047      	b.n	800206a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a27      	ldr	r2, [pc, #156]	@ (800207c <HAL_TIM_MspPostInit+0x104>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d11e      	bne.n	8002022 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STR_INPUTB__Pin|LED_SIG_Pin;
 8002000:	2303      	movs	r3, #3
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002010:	2302      	movs	r3, #2
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4817      	ldr	r0, [pc, #92]	@ (8002078 <HAL_TIM_MspPostInit+0x100>)
 800201c:	f000 fd9a 	bl	8002b54 <HAL_GPIO_Init>
}
 8002020:	e023      	b.n	800206a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a16      	ldr	r2, [pc, #88]	@ (8002080 <HAL_TIM_MspPostInit+0x108>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d11e      	bne.n	800206a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a0f      	ldr	r2, [pc, #60]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_TIM_MspPostInit+0xfc>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VESC_PPM_Pin;
 8002048:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800205a:	2303      	movs	r3, #3
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VESC_PPM_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <HAL_TIM_MspPostInit+0x10c>)
 8002066:	f000 fd75 	bl	8002b54 <HAL_GPIO_Init>
}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	@ 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400
 800207c:	40000400 	.word	0x40000400
 8002080:	40010400 	.word	0x40010400
 8002084:	40020800 	.word	0x40020800

08002088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	@ 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002210 <HAL_UART_MspInit+0x188>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12c      	bne.n	8002104 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80020b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b56      	ldr	r3, [pc, #344]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	4b52      	ldr	r3, [pc, #328]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a51      	ldr	r2, [pc, #324]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020e2:	2303      	movs	r3, #3
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020f2:	2308      	movs	r3, #8
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fa:	4619      	mov	r1, r3
 80020fc:	4846      	ldr	r0, [pc, #280]	@ (8002218 <HAL_UART_MspInit+0x190>)
 80020fe:	f000 fd29 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002102:	e081      	b.n	8002208 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==UART5)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a44      	ldr	r2, [pc, #272]	@ (800221c <HAL_UART_MspInit+0x194>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d14b      	bne.n	80021a6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a3f      	ldr	r2, [pc, #252]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 8002118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	4b3d      	ldr	r3, [pc, #244]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	4b39      	ldr	r3, [pc, #228]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a38      	ldr	r2, [pc, #224]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b36      	ldr	r3, [pc, #216]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b32      	ldr	r3, [pc, #200]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a31      	ldr	r2, [pc, #196]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002174:	2308      	movs	r3, #8
 8002176:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217c:	4619      	mov	r1, r3
 800217e:	4828      	ldr	r0, [pc, #160]	@ (8002220 <HAL_UART_MspInit+0x198>)
 8002180:	f000 fce8 	bl	8002b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002184:	2304      	movs	r3, #4
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002194:	2308      	movs	r3, #8
 8002196:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	4821      	ldr	r0, [pc, #132]	@ (8002224 <HAL_UART_MspInit+0x19c>)
 80021a0:	f000 fcd8 	bl	8002b54 <HAL_GPIO_Init>
}
 80021a4:	e030      	b.n	8002208 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002228 <HAL_UART_MspInit+0x1a0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d12b      	bne.n	8002208 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	4a16      	ldr	r2, [pc, #88]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80021ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021be:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c0:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6313      	str	r3, [r2, #48]	@ 0x30
 80021dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <HAL_UART_MspInit+0x18c>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021e8:	230c      	movs	r3, #12
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f8:	2307      	movs	r3, #7
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <HAL_UART_MspInit+0x190>)
 8002204:	f000 fca6 	bl	8002b54 <HAL_GPIO_Init>
}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	@ 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40004c00 	.word	0x40004c00
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	40005000 	.word	0x40005000
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40004400 	.word	0x40004400

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <NMI_Handler+0x4>

08002234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <MemManage_Handler+0x4>

08002244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <UsageFault_Handler+0x4>

08002254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002282:	f000 f89f 	bl	80023c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}

0800228a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 800228e:	2010      	movs	r0, #16
 8002290:	f000 fe0e 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 800229c:	2020      	movs	r0, #32
 800229e:	f000 fe07 	bl	8002eb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022d0:	f7ff ffea 	bl	80022a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d4:	480c      	ldr	r0, [pc, #48]	@ (8002308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d6:	490d      	ldr	r1, [pc, #52]	@ (800230c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f003 fc89 	bl	8005c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fe:	f7ff f827 	bl	8001350 <main>
  bx  lr    
 8002302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002310:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 8002314:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002318:	200002c4 	.word	0x200002c4

0800231c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <HAL_Init+0x40>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <HAL_Init+0x40>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800233a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <HAL_Init+0x40>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 fbc1 	bl	8002ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	2000      	movs	r0, #0
 8002350:	f000 f808 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7ff fcfa 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_InitTick+0x54>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_InitTick+0x58>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237a:	fbb3 f3f1 	udiv	r3, r3, r1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fbd9 	bl	8002b3a <HAL_SYSTICK_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00e      	b.n	80023b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d80a      	bhi.n	80023ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a0:	f000 fba1 	bl	8002ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a4:	4a06      	ldr	r2, [pc, #24]	@ (80023c0 <HAL_InitTick+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_IncTick+0x20>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_IncTick+0x24>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_IncTick+0x24>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000008 	.word	0x20000008
 80023e8:	200002c0 	.word	0x200002c0

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_GetTick+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	200002c0 	.word	0x200002c0

08002404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff ffee 	bl	80023ec <HAL_GetTick>
 8002410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800241c:	d005      	beq.n	800242a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_Delay+0x44>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800242a:	bf00      	nop
 800242c:	f7ff ffde 	bl	80023ec <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	429a      	cmp	r2, r3
 800243a:	d8f7      	bhi.n	800242c <HAL_Delay+0x28>
  {
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000008 	.word	0x20000008

0800244c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e033      	b.n	80024ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fc96 	bl	8001d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002492:	f023 0302 	bic.w	r3, r3, #2
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f94a 	bl	8002738 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ba:	e001      	b.n	80024c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e113      	b.n	8002718 <HAL_ADC_ConfigChannel+0x244>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d925      	bls.n	800254c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68d9      	ldr	r1, [r3, #12]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	3b1e      	subs	r3, #30
 8002516:	2207      	movs	r2, #7
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43da      	mvns	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	400a      	ands	r2, r1
 8002524:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68d9      	ldr	r1, [r3, #12]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4618      	mov	r0, r3
 8002538:	4603      	mov	r3, r0
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4403      	add	r3, r0
 800253e:	3b1e      	subs	r3, #30
 8002540:	409a      	lsls	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	e022      	b.n	8002592 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	2207      	movs	r2, #7
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	400a      	ands	r2, r1
 800256e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	4603      	mov	r3, r0
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4403      	add	r3, r0
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d824      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b05      	subs	r3, #5
 80025ac:	221f      	movs	r2, #31
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b05      	subs	r3, #5
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e2:	e04c      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d824      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b23      	subs	r3, #35	@ 0x23
 80025fe:	221f      	movs	r2, #31
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43da      	mvns	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	400a      	ands	r2, r1
 800260c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b23      	subs	r3, #35	@ 0x23
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
 8002634:	e023      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b41      	subs	r3, #65	@ 0x41
 8002648:	221f      	movs	r2, #31
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	400a      	ands	r2, r1
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b41      	subs	r3, #65	@ 0x41
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267e:	4b29      	ldr	r3, [pc, #164]	@ (8002724 <HAL_ADC_ConfigChannel+0x250>)
 8002680:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a28      	ldr	r2, [pc, #160]	@ (8002728 <HAL_ADC_ConfigChannel+0x254>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10f      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1d8>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b12      	cmp	r3, #18
 8002692:	d10b      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_ADC_ConfigChannel+0x254>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d12b      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1c      	ldr	r2, [pc, #112]	@ (800272c <HAL_ADC_ConfigChannel+0x258>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x1f4>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b11      	cmp	r3, #17
 80026c6:	d122      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a11      	ldr	r2, [pc, #68]	@ (800272c <HAL_ADC_ConfigChannel+0x258>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d111      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_ADC_ConfigChannel+0x25c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <HAL_ADC_ConfigChannel+0x260>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	0c9a      	lsrs	r2, r3, #18
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002700:	e002      	b.n	8002708 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3b01      	subs	r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f9      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40012300 	.word	0x40012300
 8002728:	40012000 	.word	0x40012000
 800272c:	10000012 	.word	0x10000012
 8002730:	20000000 	.word	0x20000000
 8002734:	431bde83 	.word	0x431bde83

08002738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002740:	4b79      	ldr	r3, [pc, #484]	@ (8002928 <ADC_Init+0x1f0>)
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	4a58      	ldr	r2, [pc, #352]	@ (800292c <ADC_Init+0x1f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00f      	b.n	8002836 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002834:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0202 	bic.w	r2, r2, #2
 8002844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002872:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	035a      	lsls	r2, r3, #13
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e007      	b.n	80028ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	051a      	lsls	r2, r3, #20
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ee:	025a      	lsls	r2, r3, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	029a      	lsls	r2, r3, #10
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	0f000001 	.word	0x0f000001

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800295c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	db0b      	blt.n	80029be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4907      	ldr	r1, [pc, #28]	@ (80029cc <__NVIC_EnableIRQ+0x38>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2001      	movs	r0, #1
 80029b6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100

080029d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db0a      	blt.n	80029fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	490c      	ldr	r1, [pc, #48]	@ (8002a1c <__NVIC_SetPriority+0x4c>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	440b      	add	r3, r1
 80029f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f8:	e00a      	b.n	8002a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4908      	ldr	r1, [pc, #32]	@ (8002a20 <__NVIC_SetPriority+0x50>)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3b04      	subs	r3, #4
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	761a      	strb	r2, [r3, #24]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000e100 	.word	0xe000e100
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	@ 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f1c3 0307 	rsb	r3, r3, #7
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	bf28      	it	cs
 8002a42:	2304      	movcs	r3, #4
 8002a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d902      	bls.n	8002a54 <NVIC_EncodePriority+0x30>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3b03      	subs	r3, #3
 8002a52:	e000      	b.n	8002a56 <NVIC_EncodePriority+0x32>
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	4313      	orrs	r3, r2
         );
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	@ 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a9c:	d301      	bcc.n	8002aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00f      	b.n	8002ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002acc <SysTick_Config+0x40>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aaa:	210f      	movs	r1, #15
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ab0:	f7ff ff8e 	bl	80029d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <SysTick_Config+0x40>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aba:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <SysTick_Config+0x40>)
 8002abc:	2207      	movs	r2, #7
 8002abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	e000e010 	.word	0xe000e010

08002ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff29 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af8:	f7ff ff3e 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff8e 	bl	8002a24 <NVIC_EncodePriority>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff5d 	bl	80029d0 <__NVIC_SetPriority>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff31 	bl	8002994 <__NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ffa2 	bl	8002a8c <SysTick_Config>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	@ 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e165      	b.n	8002e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f040 8154 	bne.w	8002e36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d005      	beq.n	8002ba6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d130      	bne.n	8002c08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0201 	and.w	r2, r3, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d017      	beq.n	8002c44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d123      	bne.n	8002c98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80ae 	beq.w	8002e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b5d      	ldr	r3, [pc, #372]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cea:	4b5a      	ldr	r3, [pc, #360]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf6:	4a58      	ldr	r2, [pc, #352]	@ (8002e58 <HAL_GPIO_Init+0x304>)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e5c <HAL_GPIO_Init+0x308>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d025      	beq.n	8002d6e <HAL_GPIO_Init+0x21a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4e      	ldr	r2, [pc, #312]	@ (8002e60 <HAL_GPIO_Init+0x30c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01f      	beq.n	8002d6a <HAL_GPIO_Init+0x216>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e64 <HAL_GPIO_Init+0x310>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0x212>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4c      	ldr	r2, [pc, #304]	@ (8002e68 <HAL_GPIO_Init+0x314>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0x20e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e6c <HAL_GPIO_Init+0x318>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00d      	beq.n	8002d5e <HAL_GPIO_Init+0x20a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4a      	ldr	r2, [pc, #296]	@ (8002e70 <HAL_GPIO_Init+0x31c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0x206>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a49      	ldr	r2, [pc, #292]	@ (8002e74 <HAL_GPIO_Init+0x320>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_GPIO_Init+0x202>
 8002d52:	2306      	movs	r3, #6
 8002d54:	e00c      	b.n	8002d70 <HAL_GPIO_Init+0x21c>
 8002d56:	2307      	movs	r3, #7
 8002d58:	e00a      	b.n	8002d70 <HAL_GPIO_Init+0x21c>
 8002d5a:	2305      	movs	r3, #5
 8002d5c:	e008      	b.n	8002d70 <HAL_GPIO_Init+0x21c>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x21c>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e004      	b.n	8002d70 <HAL_GPIO_Init+0x21c>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_Init+0x21c>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_GPIO_Init+0x21c>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f002 0203 	and.w	r2, r2, #3
 8002d76:	0092      	lsls	r2, r2, #2
 8002d78:	4093      	lsls	r3, r2
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d80:	4935      	ldr	r1, [pc, #212]	@ (8002e58 <HAL_GPIO_Init+0x304>)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	089b      	lsrs	r3, r3, #2
 8002d86:	3302      	adds	r3, #2
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db2:	4a31      	ldr	r2, [pc, #196]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002db8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ddc:	4a26      	ldr	r2, [pc, #152]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de2:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e06:	4a1c      	ldr	r2, [pc, #112]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e30:	4a11      	ldr	r2, [pc, #68]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	f67f ae96 	bls.w	8002b70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40020800 	.word	0x40020800
 8002e68:	40020c00 	.word	0x40020c00
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40021400 	.word	0x40021400
 8002e74:	40021800 	.word	0x40021800
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ec6:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f806 	bl	8002ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0cc      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b68      	ldr	r3, [pc, #416]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90c      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b65      	ldr	r3, [pc, #404]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b63      	ldr	r3, [pc, #396]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b8      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b59      	ldr	r3, [pc, #356]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a58      	ldr	r2, [pc, #352]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f64:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a52      	ldr	r2, [pc, #328]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b50      	ldr	r3, [pc, #320]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	494d      	ldr	r1, [pc, #308]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d044      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b47      	ldr	r3, [pc, #284]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d119      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e067      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b37      	ldr	r3, [pc, #220]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4934      	ldr	r1, [pc, #208]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7ff fa00 	bl	80023ec <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7ff f9fc 	bl	80023ec <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e04f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b2b      	ldr	r3, [pc, #172]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d20c      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b22      	ldr	r3, [pc, #136]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e032      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4916      	ldr	r1, [pc, #88]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	490e      	ldr	r1, [pc, #56]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307e:	f000 f855 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490a      	ldr	r1, [pc, #40]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	4a09      	ldr	r2, [pc, #36]	@ (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800309a:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f960 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08005d38 	.word	0x08005d38
 80030bc:	20000000 	.word	0x20000000
 80030c0:	20000004 	.word	0x20000004

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	@ (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	@ (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	08005d48 	.word	0x08005d48

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003108:	f7ff ffdc 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0b5b      	lsrs	r3, r3, #13
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	@ (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	08005d48 	.word	0x08005d48

0800312c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003130:	b0ae      	sub	sp, #184	@ 0xb8
 8003132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003152:	4bcb      	ldr	r3, [pc, #812]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b0c      	cmp	r3, #12
 800315c:	f200 8206 	bhi.w	800356c <HAL_RCC_GetSysClockFreq+0x440>
 8003160:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800319d 	.word	0x0800319d
 800316c:	0800356d 	.word	0x0800356d
 8003170:	0800356d 	.word	0x0800356d
 8003174:	0800356d 	.word	0x0800356d
 8003178:	080031a5 	.word	0x080031a5
 800317c:	0800356d 	.word	0x0800356d
 8003180:	0800356d 	.word	0x0800356d
 8003184:	0800356d 	.word	0x0800356d
 8003188:	080031ad 	.word	0x080031ad
 800318c:	0800356d 	.word	0x0800356d
 8003190:	0800356d 	.word	0x0800356d
 8003194:	0800356d 	.word	0x0800356d
 8003198:	0800339d 	.word	0x0800339d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4bb9      	ldr	r3, [pc, #740]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x358>)
 800319e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80031a2:	e1e7      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a4:	4bb8      	ldr	r3, [pc, #736]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031aa:	e1e3      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ac:	4bb4      	ldr	r3, [pc, #720]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b8:	4bb1      	ldr	r3, [pc, #708]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d071      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c4:	4bae      	ldr	r3, [pc, #696]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031ea:	4622      	mov	r2, r4
 80031ec:	462b      	mov	r3, r5
 80031ee:	f04f 0000 	mov.w	r0, #0
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	0159      	lsls	r1, r3, #5
 80031f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fc:	0150      	lsls	r0, r2, #5
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4621      	mov	r1, r4
 8003204:	1a51      	subs	r1, r2, r1
 8003206:	6439      	str	r1, [r7, #64]	@ 0x40
 8003208:	4629      	mov	r1, r5
 800320a:	eb63 0301 	sbc.w	r3, r3, r1
 800320e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800321c:	4649      	mov	r1, r9
 800321e:	018b      	lsls	r3, r1, #6
 8003220:	4641      	mov	r1, r8
 8003222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003226:	4641      	mov	r1, r8
 8003228:	018a      	lsls	r2, r1, #6
 800322a:	4641      	mov	r1, r8
 800322c:	1a51      	subs	r1, r2, r1
 800322e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003230:	4649      	mov	r1, r9
 8003232:	eb63 0301 	sbc.w	r3, r3, r1
 8003236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003244:	4649      	mov	r1, r9
 8003246:	00cb      	lsls	r3, r1, #3
 8003248:	4641      	mov	r1, r8
 800324a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324e:	4641      	mov	r1, r8
 8003250:	00ca      	lsls	r2, r1, #3
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	4603      	mov	r3, r0
 8003258:	4622      	mov	r2, r4
 800325a:	189b      	adds	r3, r3, r2
 800325c:	633b      	str	r3, [r7, #48]	@ 0x30
 800325e:	462b      	mov	r3, r5
 8003260:	460a      	mov	r2, r1
 8003262:	eb42 0303 	adc.w	r3, r2, r3
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003274:	4629      	mov	r1, r5
 8003276:	024b      	lsls	r3, r1, #9
 8003278:	4621      	mov	r1, r4
 800327a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800327e:	4621      	mov	r1, r4
 8003280:	024a      	lsls	r2, r1, #9
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003290:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003294:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003298:	f7fd fbaa 	bl	80009f0 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032a6:	e067      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a8:	4b75      	ldr	r3, [pc, #468]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80032b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032c2:	2300      	movs	r3, #0
 80032c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032ca:	4622      	mov	r2, r4
 80032cc:	462b      	mov	r3, r5
 80032ce:	f04f 0000 	mov.w	r0, #0
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	0159      	lsls	r1, r3, #5
 80032d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032dc:	0150      	lsls	r0, r2, #5
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4621      	mov	r1, r4
 80032e4:	1a51      	subs	r1, r2, r1
 80032e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80032e8:	4629      	mov	r1, r5
 80032ea:	eb63 0301 	sbc.w	r3, r3, r1
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032fc:	4649      	mov	r1, r9
 80032fe:	018b      	lsls	r3, r1, #6
 8003300:	4641      	mov	r1, r8
 8003302:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003306:	4641      	mov	r1, r8
 8003308:	018a      	lsls	r2, r1, #6
 800330a:	4641      	mov	r1, r8
 800330c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003310:	4649      	mov	r1, r9
 8003312:	eb63 0b01 	sbc.w	fp, r3, r1
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003322:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800332a:	4692      	mov	sl, r2
 800332c:	469b      	mov	fp, r3
 800332e:	4623      	mov	r3, r4
 8003330:	eb1a 0303 	adds.w	r3, sl, r3
 8003334:	623b      	str	r3, [r7, #32]
 8003336:	462b      	mov	r3, r5
 8003338:	eb4b 0303 	adc.w	r3, fp, r3
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800334a:	4629      	mov	r1, r5
 800334c:	028b      	lsls	r3, r1, #10
 800334e:	4621      	mov	r1, r4
 8003350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003354:	4621      	mov	r1, r4
 8003356:	028a      	lsls	r2, r1, #10
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003360:	2200      	movs	r2, #0
 8003362:	673b      	str	r3, [r7, #112]	@ 0x70
 8003364:	677a      	str	r2, [r7, #116]	@ 0x74
 8003366:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800336a:	f7fd fb41 	bl	80009f0 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4613      	mov	r3, r2
 8003374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003378:	4b41      	ldr	r3, [pc, #260]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	0c1b      	lsrs	r3, r3, #16
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	3301      	adds	r3, #1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800338a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800338e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800339a:	e0eb      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800339c:	4b38      	ldr	r3, [pc, #224]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a8:	4b35      	ldr	r3, [pc, #212]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d06b      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b4:	4b32      	ldr	r3, [pc, #200]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x354>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	2200      	movs	r2, #0
 80033bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033c8:	2300      	movs	r3, #0
 80033ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80033cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033d0:	4622      	mov	r2, r4
 80033d2:	462b      	mov	r3, r5
 80033d4:	f04f 0000 	mov.w	r0, #0
 80033d8:	f04f 0100 	mov.w	r1, #0
 80033dc:	0159      	lsls	r1, r3, #5
 80033de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e2:	0150      	lsls	r0, r2, #5
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4621      	mov	r1, r4
 80033ea:	1a51      	subs	r1, r2, r1
 80033ec:	61b9      	str	r1, [r7, #24]
 80033ee:	4629      	mov	r1, r5
 80033f0:	eb63 0301 	sbc.w	r3, r3, r1
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003402:	4659      	mov	r1, fp
 8003404:	018b      	lsls	r3, r1, #6
 8003406:	4651      	mov	r1, sl
 8003408:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340c:	4651      	mov	r1, sl
 800340e:	018a      	lsls	r2, r1, #6
 8003410:	4651      	mov	r1, sl
 8003412:	ebb2 0801 	subs.w	r8, r2, r1
 8003416:	4659      	mov	r1, fp
 8003418:	eb63 0901 	sbc.w	r9, r3, r1
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003428:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003430:	4690      	mov	r8, r2
 8003432:	4699      	mov	r9, r3
 8003434:	4623      	mov	r3, r4
 8003436:	eb18 0303 	adds.w	r3, r8, r3
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	462b      	mov	r3, r5
 800343e:	eb49 0303 	adc.w	r3, r9, r3
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003450:	4629      	mov	r1, r5
 8003452:	024b      	lsls	r3, r1, #9
 8003454:	4621      	mov	r1, r4
 8003456:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800345a:	4621      	mov	r1, r4
 800345c:	024a      	lsls	r2, r1, #9
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003466:	2200      	movs	r2, #0
 8003468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800346a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800346c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003470:	f7fd fabe 	bl	80009f0 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800347e:	e065      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x420>
 8003480:	40023800 	.word	0x40023800
 8003484:	00f42400 	.word	0x00f42400
 8003488:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348c:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x458>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	2200      	movs	r2, #0
 8003494:	4618      	mov	r0, r3
 8003496:	4611      	mov	r1, r2
 8003498:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800349c:	653b      	str	r3, [r7, #80]	@ 0x50
 800349e:	2300      	movs	r3, #0
 80034a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80034a6:	4642      	mov	r2, r8
 80034a8:	464b      	mov	r3, r9
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b8:	0150      	lsls	r0, r2, #5
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4641      	mov	r1, r8
 80034c0:	1a51      	subs	r1, r2, r1
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	4649      	mov	r1, r9
 80034c6:	eb63 0301 	sbc.w	r3, r3, r1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034d8:	4659      	mov	r1, fp
 80034da:	018b      	lsls	r3, r1, #6
 80034dc:	4651      	mov	r1, sl
 80034de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e2:	4651      	mov	r1, sl
 80034e4:	018a      	lsls	r2, r1, #6
 80034e6:	4651      	mov	r1, sl
 80034e8:	1a54      	subs	r4, r2, r1
 80034ea:	4659      	mov	r1, fp
 80034ec:	eb63 0501 	sbc.w	r5, r3, r1
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	00eb      	lsls	r3, r5, #3
 80034fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	4614      	mov	r4, r2
 8003502:	461d      	mov	r5, r3
 8003504:	4643      	mov	r3, r8
 8003506:	18e3      	adds	r3, r4, r3
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	464b      	mov	r3, r9
 800350c:	eb45 0303 	adc.w	r3, r5, r3
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003534:	2200      	movs	r2, #0
 8003536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003538:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800353a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800353e:	f7fd fa57 	bl	80009f0 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4613      	mov	r3, r2
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800354c:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x458>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	0f1b      	lsrs	r3, r3, #28
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800355a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800355e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800356a:	e003      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x45c>)
 800356e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003572:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003578:	4618      	mov	r0, r3
 800357a:	37b8      	adds	r7, #184	@ 0xb8
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	00f42400 	.word	0x00f42400

0800358c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e28d      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8083 	beq.w	80036b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035ac:	4b94      	ldr	r3, [pc, #592]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d019      	beq.n	80035ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b8:	4b91      	ldr	r3, [pc, #580]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d0:	d00c      	beq.n	80035ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4b88      	ldr	r3, [pc, #544]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b84      	ldr	r3, [pc, #528]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05b      	beq.n	80036b0 <HAL_RCC_OscConfig+0x124>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d157      	bne.n	80036b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e25a      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x90>
 800360e:	4b7c      	ldr	r3, [pc, #496]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7b      	ldr	r2, [pc, #492]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xcc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0xb4>
 8003626:	4b76      	ldr	r3, [pc, #472]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a75      	ldr	r2, [pc, #468]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a72      	ldr	r2, [pc, #456]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xcc>
 8003640:	4b6f      	ldr	r3, [pc, #444]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6e      	ldr	r2, [pc, #440]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b6c      	ldr	r3, [pc, #432]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6b      	ldr	r2, [pc, #428]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fec4 	bl	80023ec <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe fec0 	bl	80023ec <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e21f      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b61      	ldr	r3, [pc, #388]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xdc>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fe feb0 	bl	80023ec <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fe feac 	bl	80023ec <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	@ 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e20b      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	4b57      	ldr	r3, [pc, #348]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x104>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d06f      	beq.n	800379e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036be:	4b50      	ldr	r3, [pc, #320]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e2:	4b47      	ldr	r3, [pc, #284]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d11c      	bne.n	8003728 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ee:	4b44      	ldr	r3, [pc, #272]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d116      	bne.n	8003728 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	4b41      	ldr	r3, [pc, #260]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_RCC_OscConfig+0x186>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e1d3      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003712:	4b3b      	ldr	r3, [pc, #236]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4937      	ldr	r1, [pc, #220]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	e03a      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003730:	4b34      	ldr	r3, [pc, #208]	@ (8003804 <HAL_RCC_OscConfig+0x278>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fe fe59 	bl	80023ec <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373e:	f7fe fe55 	bl	80023ec <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e1b4      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	4b2b      	ldr	r3, [pc, #172]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b28      	ldr	r3, [pc, #160]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4925      	ldr	r1, [pc, #148]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
 8003770:	e015      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003772:	4b24      	ldr	r3, [pc, #144]	@ (8003804 <HAL_RCC_OscConfig+0x278>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fe38 	bl	80023ec <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe fe34 	bl	80023ec <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e193      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d036      	beq.n	8003818 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b2:	4b15      	ldr	r3, [pc, #84]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fe fe18 	bl	80023ec <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c0:	f7fe fe14 	bl	80023ec <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e173      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <HAL_RCC_OscConfig+0x274>)
 80037d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x234>
 80037de:	e01b      	b.n	8003818 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e0:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e6:	f7fe fe01 	bl	80023ec <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	e00e      	b.n	800380c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ee:	f7fe fdfd 	bl	80023ec <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d907      	bls.n	800380c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e15c      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
 8003800:	40023800 	.word	0x40023800
 8003804:	42470000 	.word	0x42470000
 8003808:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	4b8a      	ldr	r3, [pc, #552]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ea      	bne.n	80037ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8097 	beq.w	8003954 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4b83      	ldr	r3, [pc, #524]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003844:	6413      	str	r3, [r2, #64]	@ 0x40
 8003846:	4b7c      	ldr	r3, [pc, #496]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003852:	2301      	movs	r3, #1
 8003854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003856:	4b79      	ldr	r3, [pc, #484]	@ (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d118      	bne.n	8003894 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003862:	4b76      	ldr	r3, [pc, #472]	@ (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a75      	ldr	r2, [pc, #468]	@ (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386e:	f7fe fdbd 	bl	80023ec <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003876:	f7fe fdb9 	bl	80023ec <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e118      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	4b6c      	ldr	r3, [pc, #432]	@ (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x31e>
 800389c:	4b66      	ldr	r3, [pc, #408]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a0:	4a65      	ldr	r2, [pc, #404]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a8:	e01c      	b.n	80038e4 <HAL_RCC_OscConfig+0x358>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x340>
 80038b2:	4b61      	ldr	r3, [pc, #388]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b6:	4a60      	ldr	r2, [pc, #384]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	f043 0304 	orr.w	r3, r3, #4
 80038bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038be:	4b5e      	ldr	r3, [pc, #376]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0x358>
 80038cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d0:	4a59      	ldr	r2, [pc, #356]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d8:	4b57      	ldr	r3, [pc, #348]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038dc:	4a56      	ldr	r2, [pc, #344]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038de:	f023 0304 	bic.w	r3, r3, #4
 80038e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe fd7e 	bl	80023ec <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f2:	e00a      	b.n	800390a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f4:	f7fe fd7a 	bl	80023ec <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e0d7      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0ee      	beq.n	80038f4 <HAL_RCC_OscConfig+0x368>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fe fd68 	bl	80023ec <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fe fd64 	bl	80023ec <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0c1      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003936:	4b40      	ldr	r3, [pc, #256]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1ee      	bne.n	8003920 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003948:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003952:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80ad 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800395e:	4b36      	ldr	r3, [pc, #216]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b08      	cmp	r3, #8
 8003968:	d060      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d145      	bne.n	80039fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b33      	ldr	r3, [pc, #204]	@ (8003a40 <HAL_RCC_OscConfig+0x4b4>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fd38 	bl	80023ec <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003980:	f7fe fd34 	bl	80023ec <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e093      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	4b29      	ldr	r3, [pc, #164]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	3b01      	subs	r3, #1
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	071b      	lsls	r3, r3, #28
 80039ca:	491b      	ldr	r1, [pc, #108]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <HAL_RCC_OscConfig+0x4b4>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fe fd09 	bl	80023ec <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039de:	f7fe fd05 	bl	80023ec <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e064      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f0:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x452>
 80039fc:	e05c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <HAL_RCC_OscConfig+0x4b4>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe fcf2 	bl	80023ec <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fe fcee 	bl	80023ec <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04d      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x480>
 8003a2a:	e045      	b.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e040      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <HAL_RCC_OscConfig+0x538>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d030      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d129      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d122      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d119      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d10f      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800

08003ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e07b      	b.n	8003bd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aea:	d009      	beq.n	8003b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fe f982 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	ea42 0103 	orr.w	r1, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0104 	and.w	r1, r3, #4
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	f003 0210 	and.w	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b088      	sub	sp, #32
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_SPI_Transmit+0x22>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e12d      	b.n	8003e58 <HAL_SPI_Transmit+0x27e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c04:	f7fe fbf2 	bl	80023ec <HAL_GetTick>
 8003c08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c1e:	e116      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x52>
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c30:	e10d      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c78:	d10f      	bne.n	8003c9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d007      	beq.n	8003cb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc0:	d14f      	bne.n	8003d62 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0xf6>
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d142      	bne.n	8003d56 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cf4:	e02f      	b.n	8003d56 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d112      	bne.n	8003d2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d28:	e015      	b.n	8003d56 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2a:	f7fe fb5f 	bl	80023ec <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d803      	bhi.n	8003d42 <HAL_SPI_Transmit+0x168>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d40:	d102      	bne.n	8003d48 <HAL_SPI_Transmit+0x16e>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003d54:	e07b      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ca      	bne.n	8003cf6 <HAL_SPI_Transmit+0x11c>
 8003d60:	e050      	b.n	8003e04 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0x196>
 8003d6a:	8afb      	ldrh	r3, [r7, #22]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d144      	bne.n	8003dfa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	7812      	ldrb	r2, [r2, #0]
 8003d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d96:	e030      	b.n	8003dfa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d113      	bne.n	8003dce <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003dcc:	e015      	b.n	8003dfa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dce:	f7fe fb0d 	bl	80023ec <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d803      	bhi.n	8003de6 <HAL_SPI_Transmit+0x20c>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003de4:	d102      	bne.n	8003dec <HAL_SPI_Transmit+0x212>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003df8:	e029      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1c9      	bne.n	8003d98 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fbed 	bl	80045e8 <SPI_EndRxTxTransaction>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e003      	b.n	8003e4e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d002      	beq.n	8003e86 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
 8003e82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e84:	e0fb      	b.n	800407e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8e:	d112      	bne.n	8003eb6 <HAL_SPI_Receive+0x56>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10e      	bne.n	8003eb6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f8ef 	bl	8004090 <HAL_SPI_TransmitReceive>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	e0e8      	b.n	8004088 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_SPI_Receive+0x64>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0e1      	b.n	8004088 <HAL_SPI_Receive+0x228>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ecc:	f7fe fa8e 	bl	80023ec <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_Receive+0x7e>
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ee2:	e0cc      	b.n	800407e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2a:	d10f      	bne.n	8003f4c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f56:	2b40      	cmp	r3, #64	@ 0x40
 8003f58:	d007      	beq.n	8003f6a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d16a      	bne.n	8004048 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f72:	e032      	b.n	8003fda <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d115      	bne.n	8003fae <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f103 020c 	add.w	r2, r3, #12
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fac:	e015      	b.n	8003fda <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fae:	f7fe fa1d 	bl	80023ec <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d803      	bhi.n	8003fc6 <HAL_SPI_Receive+0x166>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fc4:	d102      	bne.n	8003fcc <HAL_SPI_Receive+0x16c>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003fd8:	e051      	b.n	800407e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1c7      	bne.n	8003f74 <HAL_SPI_Receive+0x114>
 8003fe4:	e035      	b.n	8004052 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d113      	bne.n	800401c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	b292      	uxth	r2, r2
 8004000:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	1c9a      	adds	r2, r3, #2
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800401a:	e015      	b.n	8004048 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800401c:	f7fe f9e6 	bl	80023ec <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d803      	bhi.n	8004034 <HAL_SPI_Receive+0x1d4>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004032:	d102      	bne.n	800403a <HAL_SPI_Receive+0x1da>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004046:	e01a      	b.n	800407e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1c9      	bne.n	8003fe6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fa60 	bl	800451c <SPI_EndRxTransaction>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
 8004074:	e003      	b.n	800407e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	@ 0x30
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800409e:	2301      	movs	r3, #1
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x26>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e198      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x358>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040be:	f7fe f995 	bl	80023ec <HAL_GetTick>
 80040c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d00f      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x70>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040e6:	d107      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x68>
 80040f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d003      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80040fe:	e16d      	b.n	80043dc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x82>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x82>
 800410c:	887b      	ldrh	r3, [r7, #2]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004118:	e160      	b.n	80043dc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b04      	cmp	r3, #4
 8004124:	d003      	beq.n	800412e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2205      	movs	r2, #5
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	887a      	ldrh	r2, [r7, #2]
 800413e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	887a      	ldrh	r2, [r7, #2]
 8004144:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	887a      	ldrh	r2, [r7, #2]
 8004156:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416e:	2b40      	cmp	r3, #64	@ 0x40
 8004170:	d007      	beq.n	8004182 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418a:	d17c      	bne.n	8004286 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_TransmitReceive+0x10a>
 8004194:	8b7b      	ldrh	r3, [r7, #26]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d16a      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041be:	e057      	b.n	8004270 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d11b      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x176>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d016      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x176>
 80041d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d113      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	881a      	ldrh	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ee:	1c9a      	adds	r2, r3, #2
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d119      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x1b8>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d014      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	b292      	uxth	r2, r2
 800422a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	1c9a      	adds	r2, r3, #2
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004244:	2301      	movs	r3, #1
 8004246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004248:	f7fe f8d0 	bl	80023ec <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004254:	429a      	cmp	r2, r3
 8004256:	d80b      	bhi.n	8004270 <HAL_SPI_TransmitReceive+0x1e0>
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800425e:	d007      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800426e:	e0b5      	b.n	80043dc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1a2      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x130>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d19d      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x130>
 8004284:	e080      	b.n	8004388 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x204>
 800428e:	8b7b      	ldrh	r3, [r7, #26]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d16f      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ba:	e05b      	b.n	8004374 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d11c      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x274>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d017      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x274>
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d114      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d119      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x2b6>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d014      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004342:	2301      	movs	r3, #1
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004346:	f7fe f851 	bl	80023ec <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004352:	429a      	cmp	r2, r3
 8004354:	d803      	bhi.n	800435e <HAL_SPI_TransmitReceive+0x2ce>
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800435c:	d102      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x2d4>
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004372:	e033      	b.n	80043dc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d19e      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x22c>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d199      	bne.n	80042bc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f92b 	bl	80045e8 <SPI_EndRxTxTransaction>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d006      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80043a4:	e01a      	b.n	80043dc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d2:	e003      	b.n	80043dc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80043e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3730      	adds	r7, #48	@ 0x30
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043fe:	b2db      	uxtb	r3, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800441c:	f7fd ffe6 	bl	80023ec <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	4413      	add	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800442c:	f7fd ffde 	bl	80023ec <HAL_GetTick>
 8004430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004432:	4b39      	ldr	r3, [pc, #228]	@ (8004518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	015b      	lsls	r3, r3, #5
 8004438:	0d1b      	lsrs	r3, r3, #20
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	fb02 f303 	mul.w	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004442:	e054      	b.n	80044ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800444a:	d050      	beq.n	80044ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800444c:	f7fd ffce 	bl	80023ec <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	429a      	cmp	r2, r3
 800445a:	d902      	bls.n	8004462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13d      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800447a:	d111      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004484:	d004      	beq.n	8004490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448e:	d107      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800449e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044a8:	d10f      	bne.n	80044ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e017      	b.n	800450e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d19b      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000000 	.word	0x20000000

0800451c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004530:	d111      	bne.n	8004556 <SPI_EndRxTransaction+0x3a>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d004      	beq.n	8004546 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004544:	d107      	bne.n	8004556 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004554:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800455e:	d12a      	bne.n	80045b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004568:	d012      	beq.n	8004590 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	@ 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff ff49 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d02d      	beq.n	80045dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e026      	b.n	80045de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	2101      	movs	r1, #1
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ff36 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01a      	beq.n	80045dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045aa:	f043 0220 	orr.w	r2, r3, #32
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e013      	b.n	80045de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2200      	movs	r2, #0
 80045be:	2101      	movs	r1, #1
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff ff23 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e000      	b.n	80045de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2201      	movs	r2, #1
 80045fc:	2102      	movs	r1, #2
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff ff04 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e032      	b.n	8004680 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800461a:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <SPI_EndRxTxTransaction+0xa0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	@ (800468c <SPI_EndRxTxTransaction+0xa4>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	0d5b      	lsrs	r3, r3, #21
 8004626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004638:	d112      	bne.n	8004660 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2200      	movs	r2, #0
 8004642:	2180      	movs	r1, #128	@ 0x80
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fee1 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e00f      	b.n	8004680 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3b01      	subs	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b80      	cmp	r3, #128	@ 0x80
 8004678:	d0f2      	beq.n	8004660 <SPI_EndRxTxTransaction+0x78>
 800467a:	e000      	b.n	800467e <SPI_EndRxTxTransaction+0x96>
        break;
 800467c:	bf00      	nop
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000000 	.word	0x20000000
 800468c:	165e9f81 	.word	0x165e9f81

08004690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e041      	b.n	8004726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd fbfc 	bl	8001eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f000 fac6 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e041      	b.n	80047c4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f839 	bl	80047cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f000 fa77 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e041      	b.n	8004876 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f839 	bl	800487e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 fa1e 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e048      	b.n	8004944 <HAL_TIM_OC_ConfigChannel+0xb0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b0c      	cmp	r3, #12
 80048be:	d839      	bhi.n	8004934 <HAL_TIM_OC_ConfigChannel+0xa0>
 80048c0:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	08004935 	.word	0x08004935
 80048d0:	08004935 	.word	0x08004935
 80048d4:	08004935 	.word	0x08004935
 80048d8:	0800490b 	.word	0x0800490b
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004935 	.word	0x08004935
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004919 	.word	0x08004919
 80048ec:	08004935 	.word	0x08004935
 80048f0:	08004935 	.word	0x08004935
 80048f4:	08004935 	.word	0x08004935
 80048f8:	08004927 	.word	0x08004927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fa58 	bl	8004db8 <TIM_OC1_SetConfig>
      break;
 8004908:	e017      	b.n	800493a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fac1 	bl	8004e98 <TIM_OC2_SetConfig>
      break;
 8004916:	e010      	b.n	800493a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fb30 	bl	8004f84 <TIM_OC3_SetConfig>
      break;
 8004924:	e009      	b.n	800493a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fb9d 	bl	800506c <TIM_OC4_SetConfig>
      break;
 8004932:	e002      	b.n	800493a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e0ae      	b.n	8004ac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	f200 809f 	bhi.w	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800497a:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004ab9 	.word	0x08004ab9
 8004988:	08004ab9 	.word	0x08004ab9
 800498c:	08004ab9 	.word	0x08004ab9
 8004990:	080049f5 	.word	0x080049f5
 8004994:	08004ab9 	.word	0x08004ab9
 8004998:	08004ab9 	.word	0x08004ab9
 800499c:	08004ab9 	.word	0x08004ab9
 80049a0:	08004a37 	.word	0x08004a37
 80049a4:	08004ab9 	.word	0x08004ab9
 80049a8:	08004ab9 	.word	0x08004ab9
 80049ac:	08004ab9 	.word	0x08004ab9
 80049b0:	08004a77 	.word	0x08004a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f9fc 	bl	8004db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0208 	orr.w	r2, r2, #8
 80049ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0204 	bic.w	r2, r2, #4
 80049de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6999      	ldr	r1, [r3, #24]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	619a      	str	r2, [r3, #24]
      break;
 80049f2:	e064      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fa4c 	bl	8004e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6999      	ldr	r1, [r3, #24]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]
      break;
 8004a34:	e043      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 faa1 	bl	8004f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0208 	orr.w	r2, r2, #8
 8004a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0204 	bic.w	r2, r2, #4
 8004a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69d9      	ldr	r1, [r3, #28]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	61da      	str	r2, [r3, #28]
      break;
 8004a74:	e023      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 faf5 	bl	800506c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69d9      	ldr	r1, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	021a      	lsls	r2, r3, #8
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	61da      	str	r2, [r3, #28]
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
      break;
 8004abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x1c>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0b4      	b.n	8004c56 <HAL_TIM_ConfigClockSource+0x186>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b24:	d03e      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2a:	f200 8087 	bhi.w	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b32:	f000 8086 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x172>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3a:	d87f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b70      	cmp	r3, #112	@ 0x70
 8004b3e:	d01a      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xa6>
 8004b40:	2b70      	cmp	r3, #112	@ 0x70
 8004b42:	d87b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b60      	cmp	r3, #96	@ 0x60
 8004b46:	d050      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0x11a>
 8004b48:	2b60      	cmp	r3, #96	@ 0x60
 8004b4a:	d877      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b50      	cmp	r3, #80	@ 0x50
 8004b4e:	d03c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0xfa>
 8004b50:	2b50      	cmp	r3, #80	@ 0x50
 8004b52:	d873      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d058      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x13a>
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	d86f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b30      	cmp	r3, #48	@ 0x30
 8004b5e:	d064      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b60:	2b30      	cmp	r3, #48	@ 0x30
 8004b62:	d86b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d060      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d867      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05c      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d05a      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	e062      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b86:	f000 fb41 	bl	800520c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	609a      	str	r2, [r3, #8]
      break;
 8004ba2:	e04f      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb4:	f000 fb2a 	bl	800520c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc6:	609a      	str	r2, [r3, #8]
      break;
 8004bc8:	e03c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f000 fa9e 	bl	8005118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2150      	movs	r1, #80	@ 0x50
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 faf7 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004be8:	e02c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 fabd 	bl	8005176 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2160      	movs	r1, #96	@ 0x60
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fae7 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c08:	e01c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fa7e 	bl	8005118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2140      	movs	r1, #64	@ 0x40
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fad7 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c28:	e00c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f000 face 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c3a:	e003      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c40:	e000      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a46      	ldr	r2, [pc, #280]	@ (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a43      	ldr	r2, [pc, #268]	@ (8004d90 <TIM_Base_SetConfig+0x130>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a42      	ldr	r2, [pc, #264]	@ (8004d94 <TIM_Base_SetConfig+0x134>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a41      	ldr	r2, [pc, #260]	@ (8004d98 <TIM_Base_SetConfig+0x138>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a40      	ldr	r2, [pc, #256]	@ (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a35      	ldr	r2, [pc, #212]	@ (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a32      	ldr	r2, [pc, #200]	@ (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a31      	ldr	r2, [pc, #196]	@ (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a30      	ldr	r2, [pc, #192]	@ (8004d98 <TIM_Base_SetConfig+0x138>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8004da0 <TIM_Base_SetConfig+0x140>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2d      	ldr	r2, [pc, #180]	@ (8004da4 <TIM_Base_SetConfig+0x144>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <TIM_Base_SetConfig+0x148>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004dac <TIM_Base_SetConfig+0x14c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2a      	ldr	r2, [pc, #168]	@ (8004db0 <TIM_Base_SetConfig+0x150>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a29      	ldr	r2, [pc, #164]	@ (8004db4 <TIM_Base_SetConfig+0x154>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a10      	ldr	r2, [pc, #64]	@ (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d105      	bne.n	8004d7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f023 0201 	bic.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800
 8004dac:	40001800 	.word	0x40001800
 8004db0:	40001c00 	.word	0x40001c00
 8004db4:	40002000 	.word	0x40002000

08004db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 0201 	bic.w	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 0302 	bic.w	r3, r3, #2
 8004e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a20      	ldr	r2, [pc, #128]	@ (8004e90 <TIM_OC1_SetConfig+0xd8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC1_SetConfig+0x64>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <TIM_OC1_SetConfig+0xdc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d10c      	bne.n	8004e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0308 	bic.w	r3, r3, #8
 8004e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a15      	ldr	r2, [pc, #84]	@ (8004e90 <TIM_OC1_SetConfig+0xd8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC1_SetConfig+0x8e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a14      	ldr	r2, [pc, #80]	@ (8004e94 <TIM_OC1_SetConfig+0xdc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d111      	bne.n	8004e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40010400 	.word	0x40010400

08004e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f023 0210 	bic.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a22      	ldr	r2, [pc, #136]	@ (8004f7c <TIM_OC2_SetConfig+0xe4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC2_SetConfig+0x68>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a21      	ldr	r2, [pc, #132]	@ (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <TIM_OC2_SetConfig+0xe4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC2_SetConfig+0x94>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	@ (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d113      	bne.n	8004f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40010400 	.word	0x40010400

08004f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a21      	ldr	r2, [pc, #132]	@ (8005064 <TIM_OC3_SetConfig+0xe0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC3_SetConfig+0x66>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	@ (8005068 <TIM_OC3_SetConfig+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10d      	bne.n	8005006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a16      	ldr	r2, [pc, #88]	@ (8005064 <TIM_OC3_SetConfig+0xe0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC3_SetConfig+0x92>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <TIM_OC3_SetConfig+0xe4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d113      	bne.n	800503e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40010000 	.word	0x40010000
 8005068:	40010400 	.word	0x40010400

0800506c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	031b      	lsls	r3, r3, #12
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a12      	ldr	r2, [pc, #72]	@ (8005110 <TIM_OC4_SetConfig+0xa4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_OC4_SetConfig+0x68>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a11      	ldr	r2, [pc, #68]	@ (8005114 <TIM_OC4_SetConfig+0xa8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d109      	bne.n	80050e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400

08005118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 030a 	bic.w	r3, r3, #10
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f023 0210 	bic.w	r2, r3, #16
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f043 0307 	orr.w	r3, r3, #7
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	021a      	lsls	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	431a      	orrs	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005260:	2302      	movs	r3, #2
 8005262:	e05a      	b.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b0:	d01d      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1d      	ldr	r2, [pc, #116]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a18      	ldr	r2, [pc, #96]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a17      	ldr	r2, [pc, #92]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a15      	ldr	r2, [pc, #84]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10c      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40010400 	.word	0x40010400
 800533c:	40014000 	.word	0x40014000
 8005340:	40001800 	.word	0x40001800

08005344 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800535c:	2302      	movs	r3, #2
 800535e:	e03d      	b.n	80053dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e042      	b.n	8005480 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fc fe3a 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	@ 0x24
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800542a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f973 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	@ 0x28
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d175      	bne.n	8005594 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_UART_Transmit+0x2c>
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e06e      	b.n	8005596 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2221      	movs	r2, #33	@ 0x21
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054c6:	f7fc ff91 	bl	80023ec <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	88fa      	ldrh	r2, [r7, #6]
 80054d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e0:	d108      	bne.n	80054f4 <HAL_UART_Transmit+0x6c>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e003      	b.n	80054fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054fc:	e02e      	b.n	800555c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2200      	movs	r2, #0
 8005506:	2180      	movs	r1, #128	@ 0x80
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f848 	bl	800559e <UART_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e03a      	b.n	8005596 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	3302      	adds	r3, #2
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e007      	b.n	800554e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	3301      	adds	r3, #1
 800554c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1cb      	bne.n	80054fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2200      	movs	r2, #0
 800556e:	2140      	movs	r1, #64	@ 0x40
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f814 	bl	800559e <UART_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e006      	b.n	8005596 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	4613      	mov	r3, r2
 80055ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ae:	e03b      	b.n	8005628 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055b6:	d037      	beq.n	8005628 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b8:	f7fc ff18 	bl	80023ec <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	6a3a      	ldr	r2, [r7, #32]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d302      	bcc.n	80055ce <UART_WaitOnFlagUntilTimeout+0x30>
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e03a      	b.n	8005648 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d023      	beq.n	8005628 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b80      	cmp	r3, #128	@ 0x80
 80055e4:	d020      	beq.n	8005628 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d01d      	beq.n	8005628 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d116      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f81d 	bl	8005650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2208      	movs	r2, #8
 800561a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e00f      	b.n	8005648 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4013      	ands	r3, r2
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	429a      	cmp	r2, r3
 8005644:	d0b4      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b095      	sub	sp, #84	@ 0x54
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800566e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	330c      	adds	r3, #12
 8005676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005678:	643a      	str	r2, [r7, #64]	@ 0x40
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800567e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e5      	bne.n	8005658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3314      	adds	r3, #20
 8005692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	61fb      	str	r3, [r7, #28]
   return(result);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3314      	adds	r3, #20
 80056aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e5      	bne.n	800568c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d119      	bne.n	80056fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e8:	61ba      	str	r2, [r7, #24]
 80056ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6979      	ldr	r1, [r7, #20]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	613b      	str	r3, [r7, #16]
   return(result);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800570a:	bf00      	nop
 800570c:	3754      	adds	r7, #84	@ 0x54
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800571c:	b0c0      	sub	sp, #256	@ 0x100
 800571e:	af00      	add	r7, sp, #0
 8005720:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005734:	68d9      	ldr	r1, [r3, #12]
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	ea40 0301 	orr.w	r3, r0, r1
 8005740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	431a      	orrs	r2, r3
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005770:	f021 010c 	bic.w	r1, r1, #12
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800577e:	430b      	orrs	r3, r1
 8005780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005792:	6999      	ldr	r1, [r3, #24]
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	ea40 0301 	orr.w	r3, r0, r1
 800579e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b8f      	ldr	r3, [pc, #572]	@ (80059e4 <UART_SetConfig+0x2cc>)
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d005      	beq.n	80057b8 <UART_SetConfig+0xa0>
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b8d      	ldr	r3, [pc, #564]	@ (80059e8 <UART_SetConfig+0x2d0>)
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d104      	bne.n	80057c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b8:	f7fd fca4 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80057bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057c0:	e003      	b.n	80057ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fd fc8b 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80057c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d4:	f040 810c 	bne.w	80059f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057ea:	4622      	mov	r2, r4
 80057ec:	462b      	mov	r3, r5
 80057ee:	1891      	adds	r1, r2, r2
 80057f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057f2:	415b      	adcs	r3, r3
 80057f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057fa:	4621      	mov	r1, r4
 80057fc:	eb12 0801 	adds.w	r8, r2, r1
 8005800:	4629      	mov	r1, r5
 8005802:	eb43 0901 	adc.w	r9, r3, r1
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800581a:	4690      	mov	r8, r2
 800581c:	4699      	mov	r9, r3
 800581e:	4623      	mov	r3, r4
 8005820:	eb18 0303 	adds.w	r3, r8, r3
 8005824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005828:	462b      	mov	r3, r5
 800582a:	eb49 0303 	adc.w	r3, r9, r3
 800582e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800583e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005846:	460b      	mov	r3, r1
 8005848:	18db      	adds	r3, r3, r3
 800584a:	653b      	str	r3, [r7, #80]	@ 0x50
 800584c:	4613      	mov	r3, r2
 800584e:	eb42 0303 	adc.w	r3, r2, r3
 8005852:	657b      	str	r3, [r7, #84]	@ 0x54
 8005854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800585c:	f7fb f8c8 	bl	80009f0 <__aeabi_uldivmod>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4b61      	ldr	r3, [pc, #388]	@ (80059ec <UART_SetConfig+0x2d4>)
 8005866:	fba3 2302 	umull	r2, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	011c      	lsls	r4, r3, #4
 800586e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005878:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800587c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	1891      	adds	r1, r2, r2
 8005886:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005888:	415b      	adcs	r3, r3
 800588a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800588c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005890:	4641      	mov	r1, r8
 8005892:	eb12 0a01 	adds.w	sl, r2, r1
 8005896:	4649      	mov	r1, r9
 8005898:	eb43 0b01 	adc.w	fp, r3, r1
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b0:	4692      	mov	sl, r2
 80058b2:	469b      	mov	fp, r3
 80058b4:	4643      	mov	r3, r8
 80058b6:	eb1a 0303 	adds.w	r3, sl, r3
 80058ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058be:	464b      	mov	r3, r9
 80058c0:	eb4b 0303 	adc.w	r3, fp, r3
 80058c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058dc:	460b      	mov	r3, r1
 80058de:	18db      	adds	r3, r3, r3
 80058e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80058e2:	4613      	mov	r3, r2
 80058e4:	eb42 0303 	adc.w	r3, r2, r3
 80058e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058f2:	f7fb f87d 	bl	80009f0 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	4b3b      	ldr	r3, [pc, #236]	@ (80059ec <UART_SetConfig+0x2d4>)
 80058fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2264      	movs	r2, #100	@ 0x64
 8005906:	fb02 f303 	mul.w	r3, r2, r3
 800590a:	1acb      	subs	r3, r1, r3
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005912:	4b36      	ldr	r3, [pc, #216]	@ (80059ec <UART_SetConfig+0x2d4>)
 8005914:	fba3 2302 	umull	r2, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005920:	441c      	add	r4, r3
 8005922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800592c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	1891      	adds	r1, r2, r2
 800593a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800593c:	415b      	adcs	r3, r3
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005944:	4641      	mov	r1, r8
 8005946:	1851      	adds	r1, r2, r1
 8005948:	6339      	str	r1, [r7, #48]	@ 0x30
 800594a:	4649      	mov	r1, r9
 800594c:	414b      	adcs	r3, r1
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800595c:	4659      	mov	r1, fp
 800595e:	00cb      	lsls	r3, r1, #3
 8005960:	4651      	mov	r1, sl
 8005962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005966:	4651      	mov	r1, sl
 8005968:	00ca      	lsls	r2, r1, #3
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	4603      	mov	r3, r0
 8005970:	4642      	mov	r2, r8
 8005972:	189b      	adds	r3, r3, r2
 8005974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005978:	464b      	mov	r3, r9
 800597a:	460a      	mov	r2, r1
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005990:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005998:	460b      	mov	r3, r1
 800599a:	18db      	adds	r3, r3, r3
 800599c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800599e:	4613      	mov	r3, r2
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059ae:	f7fb f81f 	bl	80009f0 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <UART_SetConfig+0x2d4>)
 80059b8:	fba3 1302 	umull	r1, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	2164      	movs	r1, #100	@ 0x64
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	3332      	adds	r3, #50	@ 0x32
 80059ca:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <UART_SetConfig+0x2d4>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	f003 0207 	and.w	r2, r3, #7
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4422      	add	r2, r4
 80059de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059e0:	e106      	b.n	8005bf0 <UART_SetConfig+0x4d8>
 80059e2:	bf00      	nop
 80059e4:	40011000 	.word	0x40011000
 80059e8:	40011400 	.word	0x40011400
 80059ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a02:	4642      	mov	r2, r8
 8005a04:	464b      	mov	r3, r9
 8005a06:	1891      	adds	r1, r2, r2
 8005a08:	6239      	str	r1, [r7, #32]
 8005a0a:	415b      	adcs	r3, r3
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a12:	4641      	mov	r1, r8
 8005a14:	1854      	adds	r4, r2, r1
 8005a16:	4649      	mov	r1, r9
 8005a18:	eb43 0501 	adc.w	r5, r3, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	00eb      	lsls	r3, r5, #3
 8005a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2a:	00e2      	lsls	r2, r4, #3
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	461d      	mov	r5, r3
 8005a30:	4643      	mov	r3, r8
 8005a32:	18e3      	adds	r3, r4, r3
 8005a34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a38:	464b      	mov	r3, r9
 8005a3a:	eb45 0303 	adc.w	r3, r5, r3
 8005a3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a5e:	4629      	mov	r1, r5
 8005a60:	008b      	lsls	r3, r1, #2
 8005a62:	4621      	mov	r1, r4
 8005a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a68:	4621      	mov	r1, r4
 8005a6a:	008a      	lsls	r2, r1, #2
 8005a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a70:	f7fa ffbe 	bl	80009f0 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4b60      	ldr	r3, [pc, #384]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	011c      	lsls	r4, r3, #4
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a94:	4642      	mov	r2, r8
 8005a96:	464b      	mov	r3, r9
 8005a98:	1891      	adds	r1, r2, r2
 8005a9a:	61b9      	str	r1, [r7, #24]
 8005a9c:	415b      	adcs	r3, r3
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aa4:	4641      	mov	r1, r8
 8005aa6:	1851      	adds	r1, r2, r1
 8005aa8:	6139      	str	r1, [r7, #16]
 8005aaa:	4649      	mov	r1, r9
 8005aac:	414b      	adcs	r3, r1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005abc:	4659      	mov	r1, fp
 8005abe:	00cb      	lsls	r3, r1, #3
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac6:	4651      	mov	r1, sl
 8005ac8:	00ca      	lsls	r2, r1, #3
 8005aca:	4610      	mov	r0, r2
 8005acc:	4619      	mov	r1, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	189b      	adds	r3, r3, r2
 8005ad4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ad8:	464b      	mov	r3, r9
 8005ada:	460a      	mov	r2, r1
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005afc:	4649      	mov	r1, r9
 8005afe:	008b      	lsls	r3, r1, #2
 8005b00:	4641      	mov	r1, r8
 8005b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b06:	4641      	mov	r1, r8
 8005b08:	008a      	lsls	r2, r1, #2
 8005b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b0e:	f7fa ff6f 	bl	80009f0 <__aeabi_uldivmod>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4611      	mov	r1, r2
 8005b18:	4b38      	ldr	r3, [pc, #224]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	2264      	movs	r2, #100	@ 0x64
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	1acb      	subs	r3, r1, r3
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	3332      	adds	r3, #50	@ 0x32
 8005b2c:	4a33      	ldr	r2, [pc, #204]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b38:	441c      	add	r4, r3
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b3e:	2200      	movs	r2, #0
 8005b40:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b42:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	1891      	adds	r1, r2, r2
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	415b      	adcs	r3, r3
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b58:	4641      	mov	r1, r8
 8005b5a:	1851      	adds	r1, r2, r1
 8005b5c:	6039      	str	r1, [r7, #0]
 8005b5e:	4649      	mov	r1, r9
 8005b60:	414b      	adcs	r3, r1
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b70:	4659      	mov	r1, fp
 8005b72:	00cb      	lsls	r3, r1, #3
 8005b74:	4651      	mov	r1, sl
 8005b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b7a:	4651      	mov	r1, sl
 8005b7c:	00ca      	lsls	r2, r1, #3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4619      	mov	r1, r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	4642      	mov	r2, r8
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	eb42 0303 	adc.w	r3, r2, r3
 8005b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bac:	4649      	mov	r1, r9
 8005bae:	008b      	lsls	r3, r1, #2
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bb6:	4641      	mov	r1, r8
 8005bb8:	008a      	lsls	r2, r1, #2
 8005bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bbe:	f7fa ff17 	bl	80009f0 <__aeabi_uldivmod>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	2164      	movs	r1, #100	@ 0x64
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	3332      	adds	r3, #50	@ 0x32
 8005bda:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <UART_SetConfig+0x4e4>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	f003 020f 	and.w	r2, r3, #15
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4422      	add	r2, r4
 8005bee:	609a      	str	r2, [r3, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bfc:	51eb851f 	.word	0x51eb851f

08005c00 <memset>:
 8005c00:	4402      	add	r2, r0
 8005c02:	4603      	mov	r3, r0
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d100      	bne.n	8005c0a <memset+0xa>
 8005c08:	4770      	bx	lr
 8005c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0e:	e7f9      	b.n	8005c04 <memset+0x4>

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	4d0d      	ldr	r5, [pc, #52]	@ (8005c48 <__libc_init_array+0x38>)
 8005c14:	4c0d      	ldr	r4, [pc, #52]	@ (8005c4c <__libc_init_array+0x3c>)
 8005c16:	1b64      	subs	r4, r4, r5
 8005c18:	10a4      	asrs	r4, r4, #2
 8005c1a:	2600      	movs	r6, #0
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	4d0b      	ldr	r5, [pc, #44]	@ (8005c50 <__libc_init_array+0x40>)
 8005c22:	4c0c      	ldr	r4, [pc, #48]	@ (8005c54 <__libc_init_array+0x44>)
 8005c24:	f000 f826 	bl	8005c74 <_init>
 8005c28:	1b64      	subs	r4, r4, r5
 8005c2a:	10a4      	asrs	r4, r4, #2
 8005c2c:	2600      	movs	r6, #0
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c38:	4798      	blx	r3
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c42:	4798      	blx	r3
 8005c44:	3601      	adds	r6, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	08005d58 	.word	0x08005d58
 8005c4c:	08005d58 	.word	0x08005d58
 8005c50:	08005d58 	.word	0x08005d58
 8005c54:	08005d5c 	.word	0x08005d5c

08005c58 <memcpy>:
 8005c58:	440a      	add	r2, r1
 8005c5a:	4291      	cmp	r1, r2
 8005c5c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005c60:	d100      	bne.n	8005c64 <memcpy+0xc>
 8005c62:	4770      	bx	lr
 8005c64:	b510      	push	{r4, lr}
 8005c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c6e:	4291      	cmp	r1, r2
 8005c70:	d1f9      	bne.n	8005c66 <memcpy+0xe>
 8005c72:	bd10      	pop	{r4, pc}

08005c74 <_init>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr

08005c80 <_fini>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr
