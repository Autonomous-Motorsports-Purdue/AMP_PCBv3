
AMP_PCBv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007520  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080076e8  080076e8  000086e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  0000904c  2**0
                  CONTENTS
  4 .ARM          00000008  080077b0  080077b0  000087b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b8  080077b8  0000904c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000087b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077bc  080077bc  000087bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080077c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000004c  0800780c  0000904c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800780c  00009408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001540c  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389a  00000000  00000000  0001e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00021d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e36  00000000  00000000  00022f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253f2  00000000  00000000  00023dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001818f  00000000  00000000  000491c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfb02  00000000  00000000  0006134f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  00140e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00145a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000004c 	.word	0x2000004c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080076cc 	.word	0x080076cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000050 	.word	0x20000050
 8000200:	080076cc 	.word	0x080076cc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	@ 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__aeabi_d2iz>:
 80009b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b8:	d215      	bcs.n	80009e6 <__aeabi_d2iz+0x36>
 80009ba:	d511      	bpl.n	80009e0 <__aeabi_d2iz+0x30>
 80009bc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c4:	d912      	bls.n	80009ec <__aeabi_d2iz+0x3c>
 80009c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	bf18      	it	ne
 80009dc:	4240      	negne	r0, r0
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d105      	bne.n	80009f8 <__aeabi_d2iz+0x48>
 80009ec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f0:	bf08      	it	eq
 80009f2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_uldivmod>:
 8000a00:	b953      	cbnz	r3, 8000a18 <__aeabi_uldivmod+0x18>
 8000a02:	b94a      	cbnz	r2, 8000a18 <__aeabi_uldivmod+0x18>
 8000a04:	2900      	cmp	r1, #0
 8000a06:	bf08      	it	eq
 8000a08:	2800      	cmpeq	r0, #0
 8000a0a:	bf1c      	itt	ne
 8000a0c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a10:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a14:	f000 b96a 	b.w	8000cec <__aeabi_idiv0>
 8000a18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a20:	f000 f806 	bl	8000a30 <__udivmoddi4>
 8000a24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <__udivmoddi4>:
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	9d08      	ldr	r5, [sp, #32]
 8000a36:	460c      	mov	r4, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14e      	bne.n	8000ada <__udivmoddi4+0xaa>
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	458c      	cmp	ip, r1
 8000a40:	4686      	mov	lr, r0
 8000a42:	fab2 f282 	clz	r2, r2
 8000a46:	d962      	bls.n	8000b0e <__udivmoddi4+0xde>
 8000a48:	b14a      	cbz	r2, 8000a5e <__udivmoddi4+0x2e>
 8000a4a:	f1c2 0320 	rsb	r3, r2, #32
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	fa20 f303 	lsr.w	r3, r0, r3
 8000a54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a58:	4319      	orrs	r1, r3
 8000a5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a62:	fa1f f68c 	uxth.w	r6, ip
 8000a66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb04 f106 	mul.w	r1, r4, r6
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d90a      	bls.n	8000a94 <__udivmoddi4+0x64>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a86:	f080 8112 	bcs.w	8000cae <__udivmoddi4+0x27e>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 810f 	bls.w	8000cae <__udivmoddi4+0x27e>
 8000a90:	3c02      	subs	r4, #2
 8000a92:	4463      	add	r3, ip
 8000a94:	1a59      	subs	r1, r3, r1
 8000a96:	fa1f f38e 	uxth.w	r3, lr
 8000a9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa6:	fb00 f606 	mul.w	r6, r0, r6
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x94>
 8000aae:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ab6:	f080 80fc 	bcs.w	8000cb2 <__udivmoddi4+0x282>
 8000aba:	429e      	cmp	r6, r3
 8000abc:	f240 80f9 	bls.w	8000cb2 <__udivmoddi4+0x282>
 8000ac0:	4463      	add	r3, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa6>
 8000ace:	40d3      	lsrs	r3, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xba>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb4>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x150>
 8000af2:	42a3      	cmp	r3, r4
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xcc>
 8000af6:	4290      	cmp	r0, r2
 8000af8:	f0c0 80f0 	bcc.w	8000cdc <__udivmoddi4+0x2ac>
 8000afc:	1a86      	subs	r6, r0, r2
 8000afe:	eb64 0303 	sbc.w	r3, r4, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d0e6      	beq.n	8000ad6 <__udivmoddi4+0xa6>
 8000b08:	e9c5 6300 	strd	r6, r3, [r5]
 8000b0c:	e7e3      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x204>
 8000b14:	eba1 040c 	sub.w	r4, r1, ip
 8000b18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	2101      	movs	r1, #1
 8000b22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b32:	fb07 f006 	mul.w	r0, r7, r6
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x11c>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x11a>
 8000b44:	4298      	cmp	r0, r3
 8000b46:	f200 80cd 	bhi.w	8000ce4 <__udivmoddi4+0x2b4>
 8000b4a:	4626      	mov	r6, r4
 8000b4c:	1a1c      	subs	r4, r3, r0
 8000b4e:	fa1f f38e 	uxth.w	r3, lr
 8000b52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b56:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5e:	fb00 f707 	mul.w	r7, r0, r7
 8000b62:	429f      	cmp	r7, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x148>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x146>
 8000b70:	429f      	cmp	r7, r3
 8000b72:	f200 80b0 	bhi.w	8000cd6 <__udivmoddi4+0x2a6>
 8000b76:	4620      	mov	r0, r4
 8000b78:	1bdb      	subs	r3, r3, r7
 8000b7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x9c>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b90:	fa04 f301 	lsl.w	r3, r4, r1
 8000b94:	ea43 030c 	orr.w	r3, r3, ip
 8000b98:	40f4      	lsrs	r4, r6
 8000b9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9e:	0c38      	lsrs	r0, r7, #16
 8000ba0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ba8:	fa1f fc87 	uxth.w	ip, r7
 8000bac:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000bb8:	45a1      	cmp	r9, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x1a6>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bc6:	f080 8084 	bcs.w	8000cd2 <__udivmoddi4+0x2a2>
 8000bca:	45a1      	cmp	r9, r4
 8000bcc:	f240 8081 	bls.w	8000cd2 <__udivmoddi4+0x2a2>
 8000bd0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd4:	443c      	add	r4, r7
 8000bd6:	eba4 0409 	sub.w	r4, r4, r9
 8000bda:	fa1f f983 	uxth.w	r9, r3
 8000bde:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be2:	fb00 4413 	mls	r4, r0, r3, r4
 8000be6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x1d2>
 8000bf2:	193c      	adds	r4, r7, r4
 8000bf4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bf8:	d267      	bcs.n	8000cca <__udivmoddi4+0x29a>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0x29a>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c06:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0a:	eba4 040c 	sub.w	r4, r4, ip
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	46ce      	mov	lr, r9
 8000c12:	469c      	mov	ip, r3
 8000c14:	d351      	bcc.n	8000cba <__udivmoddi4+0x28a>
 8000c16:	d04e      	beq.n	8000cb6 <__udivmoddi4+0x286>
 8000c18:	b155      	cbz	r5, 8000c30 <__udivmoddi4+0x200>
 8000c1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	40cb      	lsrs	r3, r1
 8000c28:	431e      	orrs	r6, r3
 8000c2a:	40cc      	lsrs	r4, r1
 8000c2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	e750      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f103 	lsr.w	r1, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa24 f303 	lsr.w	r3, r4, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	430c      	orrs	r4, r1
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c50:	fa1f f78c 	uxth.w	r7, ip
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3110 	mls	r1, r8, r0, r3
 8000c5c:	0c23      	lsrs	r3, r4, #16
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f107 	mul.w	r1, r0, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x24c>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c72:	d22c      	bcs.n	8000cce <__udivmoddi4+0x29e>
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d92a      	bls.n	8000cce <__udivmoddi4+0x29e>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c84:	fb08 3311 	mls	r3, r8, r1, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb01 f307 	mul.w	r3, r1, r7
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x276>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c9c:	d213      	bcs.n	8000cc6 <__udivmoddi4+0x296>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d911      	bls.n	8000cc6 <__udivmoddi4+0x296>
 8000ca2:	3902      	subs	r1, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	1ae4      	subs	r4, r4, r3
 8000ca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cac:	e739      	b.n	8000b22 <__udivmoddi4+0xf2>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	e6f0      	b.n	8000a94 <__udivmoddi4+0x64>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e706      	b.n	8000ac4 <__udivmoddi4+0x94>
 8000cb6:	45c8      	cmp	r8, r9
 8000cb8:	d2ae      	bcs.n	8000c18 <__udivmoddi4+0x1e8>
 8000cba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7a8      	b.n	8000c18 <__udivmoddi4+0x1e8>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	e7ed      	b.n	8000ca6 <__udivmoddi4+0x276>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	e799      	b.n	8000c02 <__udivmoddi4+0x1d2>
 8000cce:	4630      	mov	r0, r6
 8000cd0:	e7d4      	b.n	8000c7c <__udivmoddi4+0x24c>
 8000cd2:	46d6      	mov	lr, sl
 8000cd4:	e77f      	b.n	8000bd6 <__udivmoddi4+0x1a6>
 8000cd6:	4463      	add	r3, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e74d      	b.n	8000b78 <__udivmoddi4+0x148>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	4623      	mov	r3, r4
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	e70f      	b.n	8000b04 <__udivmoddi4+0xd4>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	e730      	b.n	8000b4c <__udivmoddi4+0x11c>
 8000cea:	bf00      	nop

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000cf0:	b4b0      	push	{r4, r5, r7}
 8000cf2:	b08f      	sub	sp, #60	@ 0x3c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000cf8:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000d04:	2307      	movs	r3, #7
 8000d06:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d10:	23ff      	movs	r3, #255	@ 0xff
 8000d12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d16:	2364      	movs	r3, #100	@ 0x64
 8000d18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	461d      	mov	r5, r3
 8000d24:	f107 040c 	add.w	r4, r7, #12
 8000d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	373c      	adds	r7, #60	@ 0x3c
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bcb0      	pop	{r4, r5, r7}
 8000d40:	4770      	bx	lr

08000d42 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6898      	ldr	r0, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	899b      	ldrh	r3, [r3, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	f002 ff15 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f001 fdd4 	bl	8002908 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6898      	ldr	r0, [r3, #8]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	899b      	ldrh	r3, [r3, #12]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f002 ff0a 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d70:	2064      	movs	r0, #100	@ 0x64
 8000d72:	f001 fdc9 	bl	8002908 <HAL_Delay>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f9ff 	bl	800118e <LoRa_read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d107      	bne.n	8000dae <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	f023 0307 	bic.w	r3, r3, #7
 8000da4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
 8000dac:	e03e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d10c      	bne.n	8000dce <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000db8:	f023 0307 	bic.w	r3, r3, #7
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	61da      	str	r2, [r3, #28]
 8000dcc:	e02e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d10c      	bne.n	8000dee <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dd8:	f023 0307 	bic.w	r3, r3, #7
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	f043 0303 	orr.w	r3, r3, #3
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	61da      	str	r2, [r3, #28]
 8000dec:	e01e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	d10c      	bne.n	8000e0e <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df8:	f023 0307 	bic.w	r3, r3, #7
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f043 0305 	orr.w	r3, r3, #5
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2205      	movs	r2, #5
 8000e0a:	61da      	str	r2, [r3, #28]
 8000e0c:	e00e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d10b      	bne.n	8000e2c <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e18:	f023 0307 	bic.w	r3, r3, #7
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	f043 0306 	orr.w	r3, r3, #6
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2206      	movs	r2, #6
 8000e2a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2101      	movs	r1, #1
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f9c5 	bl	80011c2 <LoRa_write>
	//HAL_Delay(10);
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f002 fe92 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6998      	ldr	r0, [r3, #24]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	f003 fd89 	bl	8004982 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e70:	bf00      	nop
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 f98e 	bl	8005198 <HAL_SPI_GetState>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1f7      	bne.n	8000e72 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6998      	ldr	r0, [r3, #24]
 8000e86:	8b3a      	ldrh	r2, [r7, #24]
 8000e88:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	f003 febb 	bl	8004c08 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e92:	bf00      	nop
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 f97d 	bl	8005198 <HAL_SPI_GetState>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d1f7      	bne.n	8000e94 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	889b      	ldrh	r3, [r3, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f002 fe68 	bl	8003b84 <HAL_GPIO_WritePin>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	889b      	ldrh	r3, [r3, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f002 fe54 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6998      	ldr	r0, [r3, #24]
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	f003 fd4b 	bl	8004982 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000eec:	bf00      	nop
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 f950 	bl	8005198 <HAL_SPI_GetState>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1f7      	bne.n	8000eee <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6998      	ldr	r0, [r3, #24]
 8000f02:	8b3a      	ldrh	r2, [r7, #24]
 8000f04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	f003 fd3a 	bl	8004982 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f0e:	bf00      	nop
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 f93f 	bl	8005198 <HAL_SPI_GetState>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d1f7      	bne.n	8000f10 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	889b      	ldrh	r3, [r3, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f002 fe2a 	bl	8003b84 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000f44:	2126      	movs	r1, #38	@ 0x26
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f921 	bl	800118e <LoRa_read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e003      	b.n	8000f68 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	f023 0308 	bic.w	r3, r3, #8
 8000f66:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2126      	movs	r1, #38	@ 0x26
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f927 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 8000f74:	200a      	movs	r0, #10
 8000f76:	f001 fcc7 	bl	8002908 <HAL_Delay>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b096      	sub	sp, #88	@ 0x58
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <LoRa_setAutoLDO+0x68>)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4611      	mov	r1, r2
 8000f94:	2250      	movs	r2, #80	@ 0x50
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 fb8a 	bl	80076b0 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa85 	bl	80004b8 <__aeabi_i2d>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	3358      	adds	r3, #88	@ 0x58
 8000fb8:	443b      	add	r3, r7
 8000fba:	3b50      	subs	r3, #80	@ 0x50
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fc0e 	bl	80007e0 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fcf0 	bl	80009b0 <__aeabi_d2iz>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	bfcc      	ite	gt
 8000fd6:	2301      	movgt	r3, #1
 8000fd8:	2300      	movle	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffaa 	bl	8000f38 <LoRa_setLowDaraRateOptimization>
}
 8000fe4:	bf00      	nop
 8000fe6:	3758      	adds	r7, #88	@ 0x58
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	080076e8 	.word	0x080076e8

08000ff0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	04db      	lsls	r3, r3, #19
 8000ffe:	115b      	asrs	r3, r3, #5
 8001000:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	461a      	mov	r2, r3
 800100c:	2106      	movs	r1, #6
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8d7 	bl	80011c2 <LoRa_write>
	HAL_Delay(5);
 8001014:	2005      	movs	r0, #5
 8001016:	f001 fc77 	bl	8002908 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	461a      	mov	r2, r3
 8001024:	2107      	movs	r1, #7
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f8cb 	bl	80011c2 <LoRa_write>
	HAL_Delay(5);
 800102c:	2005      	movs	r0, #5
 800102e:	f001 fc6b 	bl	8002908 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	461a      	mov	r2, r3
 800103a:	2108      	movs	r1, #8
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8c0 	bl	80011c2 <LoRa_write>
	HAL_Delay(5);
 8001042:	2005      	movs	r0, #5
 8001044:	f001 fc60 	bl	8002908 <HAL_Delay>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	dd01      	ble.n	8001064 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001060:	230c      	movs	r3, #12
 8001062:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b06      	cmp	r3, #6
 8001068:	dc01      	bgt.n	800106e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800106a:	2307      	movs	r3, #7
 800106c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800106e:	211e      	movs	r1, #30
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f88c 	bl	800118e <LoRa_read>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f001 fc44 	bl	8002908 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	b2da      	uxtb	r2, r3
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	461a      	mov	r2, r3
 8001098:	211e      	movs	r1, #30
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f891 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f001 fc31 	bl	8002908 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff6c 	bl	8000f84 <LoRa_setAutoLDO>
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2109      	movs	r1, #9
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f87b 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 fc1b 	bl	8002908 <HAL_Delay>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80010f0:	d801      	bhi.n	80010f6 <LoRa_setOCP+0x1a>
		current = 45;
 80010f2:	232d      	movs	r3, #45	@ 0x2d
 80010f4:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2bf0      	cmp	r3, #240	@ 0xf0
 80010fa:	d901      	bls.n	8001100 <LoRa_setOCP+0x24>
		current = 240;
 80010fc:	23f0      	movs	r3, #240	@ 0xf0
 80010fe:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	2b78      	cmp	r3, #120	@ 0x78
 8001104:	d809      	bhi.n	800111a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	3b2d      	subs	r3, #45	@ 0x2d
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <LoRa_setOCP+0x78>)
 800110c:	fb82 1203 	smull	r1, r2, r2, r3
 8001110:	1052      	asrs	r2, r2, #1
 8001112:	17db      	asrs	r3, r3, #31
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e00b      	b.n	8001132 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2bf0      	cmp	r3, #240	@ 0xf0
 800111e:	d808      	bhi.n	8001132 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	331e      	adds	r3, #30
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <LoRa_setOCP+0x78>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	1092      	asrs	r2, r2, #2
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3320      	adds	r3, #32
 8001136:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	461a      	mov	r2, r3
 800113c:	210b      	movs	r1, #11
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f83f 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f001 fbdf 	bl	8002908 <HAL_Delay>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	66666667 	.word	0x66666667

08001158 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001160:	211e      	movs	r1, #30
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f813 	bl	800118e <LoRa_read>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 0307 	orr.w	r3, r3, #7
 8001172:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	461a      	mov	r2, r3
 8001178:	211e      	movs	r1, #30
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f821 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f001 fbc1 	bl	8002908 <HAL_Delay>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af02      	add	r7, sp, #8
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80011a4:	f107 030f 	add.w	r3, r7, #15
 80011a8:	f107 010e 	add.w	r1, r7, #14
 80011ac:	2201      	movs	r2, #1
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	2201      	movs	r2, #1
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fe44 	bl	8000e40 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af02      	add	r7, sp, #8
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	70fb      	strb	r3, [r7, #3]
 80011ce:	4613      	mov	r3, r2
 80011d0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73bb      	strb	r3, [r7, #14]
	data = value;
 80011dc:	78bb      	ldrb	r3, [r7, #2]
 80011de:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	f107 010e 	add.w	r1, r7, #14
 80011e8:	2201      	movs	r2, #1
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe64 	bl	8000ebc <LoRa_writeReg>
	//HAL_Delay(5);
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

	return 1;
 8001204:	2301      	movs	r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffee 	bl	80011fc <LoRa_isvalid>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8096 	beq.w	8001354 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fda7 	bl	8000d7e <LoRa_gotoMode>
			HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f001 fb69 	bl	8002908 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001236:	2101      	movs	r1, #1
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffa8 	bl	800118e <LoRa_read>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f001 fb60 	bl	8002908 <HAL_Delay>
			data = read | 0x80;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800124e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	461a      	mov	r2, r3
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffb3 	bl	80011c2 <LoRa_write>
			HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f001 fb53 	bl	8002908 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4619      	mov	r1, r3
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fec1 	bl	8000ff0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff1c 	bl	80010b4 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800128a:	2223      	movs	r2, #35	@ 0x23
 800128c:	210c      	movs	r1, #12
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff97 	bl	80011c2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff5f 	bl	8001158 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fed4 	bl	8001050 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80012a8:	22ff      	movs	r2, #255	@ 0xff
 80012aa:	211f      	movs	r1, #31
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff88 	bl	80011c2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	461a      	mov	r2, r3
 80012d2:	211d      	movs	r1, #29
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff74 	bl	80011c2 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fe52 	bl	8000f84 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	2120      	movs	r1, #32
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff67 	bl	80011c2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	2121      	movs	r1, #33	@ 0x21
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff5f 	bl	80011c2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001304:	2140      	movs	r1, #64	@ 0x40
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff41 	bl	800118e <LoRa_read>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001316:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	461a      	mov	r2, r3
 800131c:	2140      	movs	r1, #64	@ 0x40
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ff4f 	bl	80011c2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001324:	2101      	movs	r1, #1
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fd29 	bl	8000d7e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001332:	200a      	movs	r0, #10
 8001334:	f001 fae8 	bl	8002908 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001338:	2142      	movs	r1, #66	@ 0x42
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff27 	bl	800118e <LoRa_read>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b12      	cmp	r3, #18
 8001348:	d101      	bne.n	800134e <LoRa_init+0x13c>
				return LORA_OK;
 800134a:	23c8      	movs	r3, #200	@ 0xc8
 800134c:	e004      	b.n	8001358 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800134e:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001352:	e001      	b.n	8001358 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001354:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <App_StateMachine_Init>:

uint8_t steering;

// function to be called before tick() function
void App_StateMachine_Init()
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b098      	sub	sp, #96	@ 0x60
 8001364:	af00      	add	r7, sp, #0
	// variable default values
	steering = 128;
 8001366:	4b3f      	ldr	r3, [pc, #252]	@ (8001464 <App_StateMachine_Init+0x104>)
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	701a      	strb	r2, [r3, #0]
	// UART "hello" message
	strcpy(uart2_msg, "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n");
 800136c:	4a3e      	ldr	r2, [pc, #248]	@ (8001468 <App_StateMachine_Init+0x108>)
 800136e:	4b3f      	ldr	r3, [pc, #252]	@ (800146c <App_StateMachine_Init+0x10c>)
 8001370:	4614      	mov	r4, r2
 8001372:	461d      	mov	r5, r3
 8001374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001384:	c403      	stmia	r4!, {r0, r1}
 8001386:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart2_msg, strlen(uart2_msg));
 8001388:	4837      	ldr	r0, [pc, #220]	@ (8001468 <App_StateMachine_Init+0x108>)
 800138a:	f7fe ff3b 	bl	8000204 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29b      	uxth	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	4934      	ldr	r1, [pc, #208]	@ (8001468 <App_StateMachine_Init+0x108>)
 8001396:	4836      	ldr	r0, [pc, #216]	@ (8001470 <App_StateMachine_Init+0x110>)
 8001398:	f005 f94a 	bl	8006630 <HAL_UART_Transmit_DMA>
	// initialize LoRa
	LoRa lora;
	lora = newLoRa();
 800139c:	463b      	mov	r3, r7
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fca6 	bl	8000cf0 <newLoRa>
 80013a4:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80013a8:	463d      	mov	r5, r7
 80013aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	lora.CS_port = LORA_NSS_GPIO_Port;
 80013ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <App_StateMachine_Init+0x114>)
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30
	lora.CS_pin = LORA_NSS_Pin;
 80013be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c2:	86bb      	strh	r3, [r7, #52]	@ 0x34
	lora.reset_port = LORA_RST_GPIO_Port;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <App_StateMachine_Init+0x114>)
 80013c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	lora.reset_pin = LORA_RST_Pin;
 80013c8:	2310      	movs	r3, #16
 80013ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	lora.DIO0_port = LORA_DIO0_GPIO_Port;
 80013cc:	4b29      	ldr	r3, [pc, #164]	@ (8001474 <App_StateMachine_Init+0x114>)
 80013ce:	643b      	str	r3, [r7, #64]	@ 0x40
	lora.DIO0_pin = LORA_DIO0_Pin;
 80013d0:	2320      	movs	r3, #32
 80013d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	lora.hSPIx = &hspi2;
 80013d6:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <App_StateMachine_Init+0x118>)
 80013d8:	64bb      	str	r3, [r7, #72]	@ 0x48

	lora.frequency = 915;
 80013da:	f240 3393 	movw	r3, #915	@ 0x393
 80013de:	653b      	str	r3, [r7, #80]	@ 0x50

	LoRa_reset(&lora);
 80013e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fcac 	bl	8000d42 <LoRa_reset>
	uint16_t lora_status = LoRa_init(&lora);
 80013ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff0f 	bl	8001212 <LoRa_init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	if (lora_status == LORA_OK)
 80013fa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80013fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8001400:	d10f      	bne.n	8001422 <App_StateMachine_Init+0xc2>
	{
		strcpy(uart2_msg, "LoRA OK\r\n");
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <App_StateMachine_Init+0x108>)
 8001404:	4a1d      	ldr	r2, [pc, #116]	@ (800147c <App_StateMachine_Init+0x11c>)
 8001406:	ca07      	ldmia	r2, {r0, r1, r2}
 8001408:	c303      	stmia	r3!, {r0, r1}
 800140a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart2_msg, strlen(uart2_msg));
 800140c:	4816      	ldr	r0, [pc, #88]	@ (8001468 <App_StateMachine_Init+0x108>)
 800140e:	f7fe fef9 	bl	8000204 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29b      	uxth	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	4913      	ldr	r1, [pc, #76]	@ (8001468 <App_StateMachine_Init+0x108>)
 800141a:	4815      	ldr	r0, [pc, #84]	@ (8001470 <App_StateMachine_Init+0x110>)
 800141c:	f005 f908 	bl	8006630 <HAL_UART_Transmit_DMA>
 8001420:	e00f      	b.n	8001442 <App_StateMachine_Init+0xe2>
	}
	else
	{
		strcpy(uart2_msg, "LoRA FAILED\r\n");
 8001422:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <App_StateMachine_Init+0x108>)
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <App_StateMachine_Init+0x120>)
 8001426:	4614      	mov	r4, r2
 8001428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142a:	c407      	stmia	r4!, {r0, r1, r2}
 800142c:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart2_msg, strlen(uart2_msg));
 800142e:	480e      	ldr	r0, [pc, #56]	@ (8001468 <App_StateMachine_Init+0x108>)
 8001430:	f7fe fee8 	bl	8000204 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29b      	uxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	490b      	ldr	r1, [pc, #44]	@ (8001468 <App_StateMachine_Init+0x108>)
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <App_StateMachine_Init+0x110>)
 800143e:	f005 f8f7 	bl	8006630 <HAL_UART_Transmit_DMA>
	}
	// turn all fans off (should be default state anyway)
	Driver_Fan_All_Off();
 8001442:	f000 f8e3 	bl	800160c <Driver_Fan_All_Off>
	// initialize e-brake
	Driver_EBrake_Init();
 8001446:	f000 f885 	bl	8001554 <Driver_EBrake_Init>
	// initialize steering
	Driver_Steering_Init(steering);
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <App_StateMachine_Init+0x104>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f96e 	bl	8001730 <Driver_Steering_Init>
	// set current state to idle
	current_state = STATE_IDLE;
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <App_StateMachine_Init+0x124>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	3760      	adds	r7, #96	@ 0x60
 800145e:	46bd      	mov	sp, r7
 8001460:	bdb0      	pop	{r4, r5, r7, pc}
 8001462:	bf00      	nop
 8001464:	200000c0 	.word	0x200000c0
 8001468:	20000070 	.word	0x20000070
 800146c:	08007738 	.word	0x08007738
 8001470:	2000035c 	.word	0x2000035c
 8001474:	40020400 	.word	0x40020400
 8001478:	2000010c 	.word	0x2000010c
 800147c:	08007774 	.word	0x08007774
 8001480:	08007780 	.word	0x08007780
 8001484:	20000068 	.word	0x20000068

08001488 <App_StateMachine_Tick>:

// function to be called on timer interrupt
void App_StateMachine_Tick()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	// statements to be called regardless of state
	ticks_in_state += 1;
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <App_StateMachine_Tick+0x98>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <App_StateMachine_Tick+0x98>)
 8001494:	6013      	str	r3, [r2, #0]
	// run state-specific code
	switch (current_state)
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <App_StateMachine_Tick+0x9c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b04      	cmp	r3, #4
 800149c:	d83d      	bhi.n	800151a <App_StateMachine_Tick+0x92>
 800149e:	a201      	add	r2, pc, #4	@ (adr r2, 80014a4 <App_StateMachine_Tick+0x1c>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014b9 	.word	0x080014b9
 80014a8:	080014f3 	.word	0x080014f3
 80014ac:	080014fb 	.word	0x080014fb
 80014b0:	08001503 	.word	0x08001503
 80014b4:	08001511 	.word	0x08001511
	{
		case (STATE_IDLE):
		{
			Driver_Status_LED_SetHex(0x1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f000 f8e7 	bl	800168c <Driver_Status_LED_SetHex>
//			Driver_Set_Steering_Duty_Cycle(128);
			if (ticks_in_state > (5 * TICKS_PER_SEC))
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <App_StateMachine_Tick+0x98>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014c6:	d902      	bls.n	80014ce <App_StateMachine_Tick+0x46>
			{
				Driver_Steering_SetDutyCycle(0);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 f95d 	bl	8001788 <Driver_Steering_SetDutyCycle>
			}
			if (ticks_in_state > (10 * TICKS_PER_SEC))
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <App_StateMachine_Tick+0x98>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014d6:	d902      	bls.n	80014de <App_StateMachine_Tick+0x56>
			{
				Driver_Steering_SetDutyCycle(255);
 80014d8:	20ff      	movs	r0, #255	@ 0xff
 80014da:	f000 f955 	bl	8001788 <Driver_Steering_SetDutyCycle>
			}
			if (ticks_in_state > (15 * TICKS_PER_SEC))
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <App_StateMachine_Tick+0x98>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d916      	bls.n	8001518 <App_StateMachine_Tick+0x90>
			{
				Driver_Steering_SetDutyCycle(128);
 80014ea:	2080      	movs	r0, #128	@ 0x80
 80014ec:	f000 f94c 	bl	8001788 <Driver_Steering_SetDutyCycle>
			}
//			if (ticks_in_state > (5 * TICKS_PER_SEC))
//			{
//				App_StateMachine_ChangeState(STATE_ERROR);
//			}
			break;
 80014f0:	e012      	b.n	8001518 <App_StateMachine_Tick+0x90>
		}

		case (STATE_AUTO):
		{
			Driver_Status_LED_SetHex(0x2);
 80014f2:	2002      	movs	r0, #2
 80014f4:	f000 f8ca 	bl	800168c <Driver_Status_LED_SetHex>
			break;
 80014f8:	e00f      	b.n	800151a <App_StateMachine_Tick+0x92>
		}

		case (STATE_RC):
		{
			Driver_Status_LED_SetHex(0x3);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 f8c6 	bl	800168c <Driver_Status_LED_SetHex>
			break;
 8001500:	e00b      	b.n	800151a <App_StateMachine_Tick+0x92>
		}

		case (STATE_EBRAKE):
		{
			Driver_Status_LED_SetHex(0x4);
 8001502:	2004      	movs	r0, #4
 8001504:	f000 f8c2 	bl	800168c <Driver_Status_LED_SetHex>
			App_StateMachine_ChangeState(STATE_ERROR);
 8001508:	2004      	movs	r0, #4
 800150a:	f000 f80d 	bl	8001528 <App_StateMachine_ChangeState>
			break;
 800150e:	e004      	b.n	800151a <App_StateMachine_Tick+0x92>
		}

		case (STATE_ERROR):
		{
			Driver_Status_LED_SetHex(0x8);
 8001510:	2008      	movs	r0, #8
 8001512:	f000 f8bb 	bl	800168c <Driver_Status_LED_SetHex>
			break;
 8001516:	e000      	b.n	800151a <App_StateMachine_Tick+0x92>
			break;
 8001518:	bf00      	nop
		}
	}
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000006c 	.word	0x2000006c
 8001524:	20000068 	.word	0x20000068

08001528 <App_StateMachine_ChangeState>:

void App_StateMachine_ChangeState(State_T new_state)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	// statements to be called regardless of state transition
	ticks_in_state = 0;
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <App_StateMachine_ChangeState+0x24>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
	// change state
	current_state = new_state;
 8001538:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <App_StateMachine_ChangeState+0x28>)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	7013      	strb	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	2000006c 	.word	0x2000006c
 8001550:	20000068 	.word	0x20000068

08001554 <Driver_EBrake_Init>:
#include "main.h"
#include "driver_ebrake.h"

// function to initialize the e-brake (retract for a set period of time)
void Driver_EBrake_Init()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	// retract e-brake
	Driver_EBrake_Retract();
 8001558:	f000 f808 	bl	800156c <Driver_EBrake_Retract>
	// let e-brake retract for some time
	HAL_Delay(2000);
 800155c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001560:	f001 f9d2 	bl	8002908 <HAL_Delay>
	// turn e-brake off
	Driver_EBrake_Off();
 8001564:	f000 f822 	bl	80015ac <Driver_EBrake_Off>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <Driver_EBrake_Retract>:
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
}

// function to retract the e-brake servo
void Driver_EBrake_Retract()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001576:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <Driver_EBrake_Retract+0x38>)
 8001578:	f002 fb04 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	2140      	movs	r1, #64	@ 0x40
 8001580:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <Driver_EBrake_Retract+0x38>)
 8001582:	f002 faff 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158c:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <Driver_EBrake_Retract+0x3c>)
 800158e:	f002 faf9 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <Driver_EBrake_Retract+0x3c>)
 800159a:	f002 faf3 	bl	8003b84 <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020400 	.word	0x40020400

080015ac <Driver_EBrake_Off>:

// function to turn the e-brake servo off (no drive command)
void Driver_EBrake_Off()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <Driver_EBrake_Off+0x38>)
 80015b8:	f002 fae4 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	@ 0x40
 80015c0:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <Driver_EBrake_Off+0x38>)
 80015c2:	f002 fadf 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015cc:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <Driver_EBrake_Off+0x3c>)
 80015ce:	f002 fad9 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015d8:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <Driver_EBrake_Off+0x3c>)
 80015da:	f002 fad3 	bl	8003b84 <HAL_GPIO_WritePin>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020400 	.word	0x40020400

080015ec <Driver_Fan_Off>:
	HAL_GPIO_WritePin(fan.port, fan.pin, 1);
}

// function to turn a fan off
void Driver_Fan_Off(Fan_T fan)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	463b      	mov	r3, r7
 80015f4:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(fan.port, fan.pin, 0);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	88b9      	ldrh	r1, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fac0 	bl	8003b84 <HAL_GPIO_WritePin>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <Driver_Fan_All_Off>:
	Driver_Fan_On(FAN4);
}

// toggle to turn all fans off
void Driver_Fan_All_Off()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	Driver_Fan_Off(FAN1);
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <Driver_Fan_All_Off+0x30>)
 8001612:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001616:	f7ff ffe9 	bl	80015ec <Driver_Fan_Off>
	Driver_Fan_Off(FAN2);
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <Driver_Fan_All_Off+0x34>)
 800161c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001620:	f7ff ffe4 	bl	80015ec <Driver_Fan_Off>
	Driver_Fan_Off(FAN3);
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <Driver_Fan_All_Off+0x38>)
 8001626:	e893 0003 	ldmia.w	r3, {r0, r1}
 800162a:	f7ff ffdf 	bl	80015ec <Driver_Fan_Off>
	Driver_Fan_Off(FAN4);
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <Driver_Fan_All_Off+0x3c>)
 8001630:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001634:	f7ff ffda 	bl	80015ec <Driver_Fan_Off>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000010 	.word	0x20000010
 8001648:	20000018 	.word	0x20000018

0800164c <Driver_Status_LED_On>:
Stat_LED_T STAT3 = { .port = STAT3_GPIO_Port, .pin = STAT3_Pin };
Stat_LED_T STAT4 = { .port = STAT4_GPIO_Port, .pin = STAT4_Pin };

// function to turn a status LED on
void Driver_Status_LED_On(Stat_LED_T led)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	463b      	mov	r3, r7
 8001654:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 1);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	88b9      	ldrh	r1, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fa90 	bl	8003b84 <HAL_GPIO_WritePin>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <Driver_Status_LED_Off>:

// function to turn a status LED off
void Driver_Status_LED_Off(Stat_LED_T led)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	463b      	mov	r3, r7
 8001674:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 0);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	88b9      	ldrh	r1, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fa80 	bl	8003b84 <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <Driver_Status_LED_SetHex>:

// function to convert a 4-bit hex value into LED status function calls
void Driver_Status_LED_SetHex(uint8_t value)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	if (value & 0x1)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <Driver_Status_LED_SetHex+0x20>
	{
		Driver_Status_LED_On(STAT1);
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <Driver_Status_LED_SetHex+0x94>)
 80016a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016a6:	f7ff ffd1 	bl	800164c <Driver_Status_LED_On>
 80016aa:	e004      	b.n	80016b6 <Driver_Status_LED_SetHex+0x2a>
	}
	else
	{
		Driver_Status_LED_Off(STAT1);
 80016ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <Driver_Status_LED_SetHex+0x94>)
 80016ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016b2:	f7ff ffdb 	bl	800166c <Driver_Status_LED_Off>
	}

	if (value & 0x2)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <Driver_Status_LED_SetHex+0x40>
	{
		Driver_Status_LED_On(STAT2);
 80016c0:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <Driver_Status_LED_SetHex+0x98>)
 80016c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016c6:	f7ff ffc1 	bl	800164c <Driver_Status_LED_On>
 80016ca:	e004      	b.n	80016d6 <Driver_Status_LED_SetHex+0x4a>
	}
	else
	{
		Driver_Status_LED_Off(STAT2);
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <Driver_Status_LED_SetHex+0x98>)
 80016ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016d2:	f7ff ffcb 	bl	800166c <Driver_Status_LED_Off>
	}

	if (value & 0x4)
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <Driver_Status_LED_SetHex+0x60>
	{
		Driver_Status_LED_On(STAT3);
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <Driver_Status_LED_SetHex+0x9c>)
 80016e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016e6:	f7ff ffb1 	bl	800164c <Driver_Status_LED_On>
 80016ea:	e004      	b.n	80016f6 <Driver_Status_LED_SetHex+0x6a>
	}
	else
	{
		Driver_Status_LED_Off(STAT3);
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <Driver_Status_LED_SetHex+0x9c>)
 80016ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016f2:	f7ff ffbb 	bl	800166c <Driver_Status_LED_Off>
	}

	if (value & 0x8)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <Driver_Status_LED_SetHex+0x80>
	{
		Driver_Status_LED_On(STAT4);
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <Driver_Status_LED_SetHex+0xa0>)
 8001702:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001706:	f7ff ffa1 	bl	800164c <Driver_Status_LED_On>
	}
	else
	{
		Driver_Status_LED_Off(STAT4);
	}
}
 800170a:	e004      	b.n	8001716 <Driver_Status_LED_SetHex+0x8a>
		Driver_Status_LED_Off(STAT4);
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <Driver_Status_LED_SetHex+0xa0>)
 800170e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001712:	f7ff ffab 	bl	800166c <Driver_Status_LED_Off>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000020 	.word	0x20000020
 8001724:	20000028 	.word	0x20000028
 8001728:	20000030 	.word	0x20000030
 800172c:	20000038 	.word	0x20000038

08001730 <Driver_Steering_Init>:

// input B+
// used as output (PWM/frequency command for position)

void Driver_Steering_Init(uint8_t duty_cycle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
	// set direction pins for level shifters
	HAL_GPIO_WritePin(STR_INPUTA__DIR_GPIO_Port, STR_INPUTA__DIR_Pin, 1); // input A+ as output
 800173a:	2201      	movs	r2, #1
 800173c:	2104      	movs	r1, #4
 800173e:	480f      	ldr	r0, [pc, #60]	@ (800177c <Driver_Steering_Init+0x4c>)
 8001740:	f002 fa20 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STR_INPUTB__DIR_GPIO_Port, STR_INPUTB__DIR_Pin, 1); // input B+ as output
 8001744:	2201      	movs	r2, #1
 8001746:	2110      	movs	r1, #16
 8001748:	480d      	ldr	r0, [pc, #52]	@ (8001780 <Driver_Steering_Init+0x50>)
 800174a:	f002 fa1b 	bl	8003b84 <HAL_GPIO_WritePin>
	// set hard-coded outputs
	HAL_GPIO_WritePin(STR_EN__GPIO_Port, STR_EN__Pin, 1); // enable pin high
 800174e:	2201      	movs	r2, #1
 8001750:	2101      	movs	r1, #1
 8001752:	480a      	ldr	r0, [pc, #40]	@ (800177c <Driver_Steering_Init+0x4c>)
 8001754:	f002 fa16 	bl	8003b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STR_INPUTA__GPIO_Port, STR_INPUTA__Pin, 0); // input A+ low
 8001758:	2200      	movs	r2, #0
 800175a:	2102      	movs	r1, #2
 800175c:	4807      	ldr	r0, [pc, #28]	@ (800177c <Driver_Steering_Init+0x4c>)
 800175e:	f002 fa11 	bl	8003b84 <HAL_GPIO_WritePin>
	// set default PWM values
	Driver_Steering_SetDutyCycle(duty_cycle);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f80f 	bl	8001788 <Driver_Steering_SetDutyCycle>
	// enable PWM output channel
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800176a:	2104      	movs	r1, #4
 800176c:	4805      	ldr	r0, [pc, #20]	@ (8001784 <Driver_Steering_Init+0x54>)
 800176e:	f004 fd4d 	bl	800620c <HAL_TIMEx_PWMN_Start>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40020800 	.word	0x40020800
 8001780:	40020000 	.word	0x40020000
 8001784:	20000164 	.word	0x20000164

08001788 <Driver_Steering_SetDutyCycle>:

void Driver_Steering_SetDutyCycle(uint8_t duty_cycle)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	// Input validation for duty cycle
	// Need to clamp from 5 to 250 to avoid no edges (steering servo doesn't like that)
	if (duty_cycle > STEERING_MAX_DUTY_CYCLE)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2bfa      	cmp	r3, #250	@ 0xfa
 8001796:	d902      	bls.n	800179e <Driver_Steering_SetDutyCycle+0x16>
	{
		duty_cycle = STEERING_MAX_DUTY_CYCLE;
 8001798:	23fa      	movs	r3, #250	@ 0xfa
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	e004      	b.n	80017a8 <Driver_Steering_SetDutyCycle+0x20>
	}
	else if (duty_cycle < STEERING_MIN_DUTY_CYCLE)
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d801      	bhi.n	80017a8 <Driver_Steering_SetDutyCycle+0x20>
	{
		duty_cycle = STEERING_MIN_DUTY_CYCLE;
 80017a4:	2305      	movs	r3, #5
 80017a6:	71fb      	strb	r3, [r7, #7]
	}

	// Set compare (8-Bit Resolution)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_cycle);
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <Driver_Steering_SetDutyCycle+0x34>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20000164 	.word	0x20000164

080017c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <MX_ADC1_Init+0x98>)
 80017d4:	4a21      	ldr	r2, [pc, #132]	@ (800185c <MX_ADC1_Init+0x9c>)
 80017d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <MX_ADC1_Init+0x98>)
 80017da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_ADC1_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <MX_ADC1_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_ADC1_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <MX_ADC1_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_ADC1_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_ADC1_Init+0x98>)
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <MX_ADC1_Init+0xa0>)
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_ADC1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_ADC1_Init+0x98>)
 800180e:	2201      	movs	r2, #1
 8001810:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_ADC1_Init+0x98>)
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_ADC1_Init+0x98>)
 800181c:	2201      	movs	r2, #1
 800181e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <MX_ADC1_Init+0x98>)
 8001822:	f001 f895 	bl	8002950 <HAL_ADC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800182c:	f000 f9ee 	bl	8001c0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001830:	230f      	movs	r3, #15
 8001832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001834:	2301      	movs	r3, #1
 8001836:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_ADC1_Init+0x98>)
 8001842:	f001 f8c9 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800184c:	f000 f9de 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200000c4 	.word	0x200000c4
 800185c:	40012000 	.word	0x40012000
 8001860:	0f000001 	.word	0x0f000001

08001864 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a17      	ldr	r2, [pc, #92]	@ (80018e0 <HAL_ADC_MspInit+0x7c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d127      	bne.n	80018d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_ADC_MspInit+0x80>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a15      	ldr	r2, [pc, #84]	@ (80018e4 <HAL_ADC_MspInit+0x80>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_ADC_MspInit+0x80>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <HAL_ADC_MspInit+0x80>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a0e      	ldr	r2, [pc, #56]	@ (80018e4 <HAL_ADC_MspInit+0x80>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <HAL_ADC_MspInit+0x80>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BRAKE_CS_Pin;
 80018be:	2320      	movs	r3, #32
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BRAKE_CS_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <HAL_ADC_MspInit+0x84>)
 80018d2:	f001 ffc3 	bl	800385c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	@ 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012000 	.word	0x40012000
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020800 	.word	0x40020800

080018ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_DMA_Init+0x3c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <MX_DMA_Init+0x3c>)
 80018fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_DMA_Init+0x3c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2011      	movs	r0, #17
 8001914:	f001 fb69 	bl	8002fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001918:	2011      	movs	r0, #17
 800191a:	f001 fb82 	bl	8003022 <HAL_NVIC_EnableIRQ>

}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b58      	ldr	r3, [pc, #352]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a57      	ldr	r2, [pc, #348]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 8001968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b55      	ldr	r3, [pc, #340]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	4b51      	ldr	r3, [pc, #324]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a50      	ldr	r2, [pc, #320]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a49      	ldr	r2, [pc, #292]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a42      	ldr	r2, [pc, #264]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b40      	ldr	r3, [pc, #256]	@ (8001ac4 <MX_GPIO_Init+0x198>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 80019ce:	2200      	movs	r2, #0
 80019d0:	f640 5147 	movw	r1, #3399	@ 0xd47
 80019d4:	483c      	ldr	r0, [pc, #240]	@ (8001ac8 <MX_GPIO_Init+0x19c>)
 80019d6:	f002 f8d5 	bl	8003b84 <HAL_GPIO_WritePin>
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 80019da:	2200      	movs	r2, #0
 80019dc:	f649 4130 	movw	r1, #39984	@ 0x9c30
 80019e0:	483a      	ldr	r0, [pc, #232]	@ (8001acc <MX_GPIO_Init+0x1a0>)
 80019e2:	f002 f8cf 	bl	8003b84 <HAL_GPIO_WritePin>
                          |STAT4_Pin|FAN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 80019e6:	2200      	movs	r2, #0
 80019e8:	f243 3190 	movw	r1, #13200	@ 0x3390
 80019ec:	4838      	ldr	r0, [pc, #224]	@ (8001ad0 <MX_GPIO_Init+0x1a4>)
 80019ee:	f002 f8c9 	bl	8003b84 <HAL_GPIO_WritePin>
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	482f      	ldr	r0, [pc, #188]	@ (8001ac8 <MX_GPIO_Init+0x19c>)
 8001a0a:	f001 ff27 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 8001a0e:	f640 5347 	movw	r3, #3399	@ 0xd47
 8001a12:	617b      	str	r3, [r7, #20]
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4828      	ldr	r0, [pc, #160]	@ (8001ac8 <MX_GPIO_Init+0x19c>)
 8001a28:	f001 ff18 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 8001a2c:	f649 4330 	movw	r3, #39984	@ 0x9c30
 8001a30:	617b      	str	r3, [r7, #20]
                          |STAT4_Pin|FAN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4821      	ldr	r0, [pc, #132]	@ (8001acc <MX_GPIO_Init+0x1a0>)
 8001a46:	f001 ff09 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	481a      	ldr	r0, [pc, #104]	@ (8001ac8 <MX_GPIO_Init+0x19c>)
 8001a60:	f001 fefc 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 8001a64:	f243 3390 	movw	r3, #13200	@ 0x3390
 8001a68:	617b      	str	r3, [r7, #20]
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <MX_GPIO_Init+0x1a4>)
 8001a7e:	f001 feed 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001a82:	2320      	movs	r3, #32
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	4619      	mov	r1, r3
 8001a96:	480e      	ldr	r0, [pc, #56]	@ (8001ad0 <MX_GPIO_Init+0x1a4>)
 8001a98:	f001 fee0 	bl	800385c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	200a      	movs	r0, #10
 8001aa2:	f001 faa2 	bl	8002fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001aa6:	200a      	movs	r0, #10
 8001aa8:	f001 fabb 	bl	8003022 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2017      	movs	r0, #23
 8001ab2:	f001 fa9a 	bl	8002fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ab6:	2017      	movs	r0, #23
 8001ab8:	f001 fab3 	bl	8003022 <HAL_NVIC_EnableIRQ>

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	@ 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad8:	f000 fea4 	bl	8002824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001adc:	f000 f824 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae0:	f7ff ff24 	bl	800192c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ae4:	f7ff ff02 	bl	80018ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ae8:	f000 fd3c 	bl	8002564 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001aec:	f000 fce6 	bl	80024bc <MX_UART4_Init>
  MX_SPI2_Init();
 8001af0:	f000 f892 	bl	8001c18 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001af4:	f000 fa92 	bl	800201c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001af8:	f000 fb3c 	bl	8002174 <MX_TIM8_Init>
  MX_UART5_Init();
 8001afc:	f000 fd08 	bl	8002510 <MX_UART5_Init>
  MX_TIM1_Init();
 8001b00:	f000 f9a0 	bl	8001e44 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001b04:	f7ff fe5c 	bl	80017c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b08:	f000 fa3c 	bl	8001f84 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001b0c:	f000 fafc 	bl	8002108 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // disable timer interrupt for tick() to make sure init() function completes
  HAL_TIM_Base_Stop_IT(&htim6);
 8001b10:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <main+0x50>)
 8001b12:	f003 fd51 	bl	80055b8 <HAL_TIM_Base_Stop_IT>
  // call init() function for state machine
  App_StateMachine_Init();
 8001b16:	f7ff fc23 	bl	8001360 <App_StateMachine_Init>
  // re-enable timer interrupt for tick()
  HAL_TIM_Base_Start_IT(&htim6);
 8001b1a:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <main+0x50>)
 8001b1c:	f003 fcdc 	bl	80054d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <main+0x4c>
 8001b24:	2000023c 	.word	0x2000023c

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	@ 0x50
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	2234      	movs	r2, #52	@ 0x34
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 fd8e 	bl	8007658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <SystemClock_Config+0xdc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	4a2b      	ldr	r2, [pc, #172]	@ (8001c04 <SystemClock_Config+0xdc>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5c:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <SystemClock_Config+0xdc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <SystemClock_Config+0xe0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a25      	ldr	r2, [pc, #148]	@ (8001c08 <SystemClock_Config+0xe0>)
 8001b72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <SystemClock_Config+0xe0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b9c:	23b4      	movs	r3, #180	@ 0xb4
 8001b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fbbf 	bl	8004334 <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bbc:	f000 f826 	bl	8001c0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bc0:	f002 f81e 	bl	8003c00 <HAL_PWREx_EnableOverDrive>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001bca:	f000 f81f 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bce:	230f      	movs	r3, #15
 8001bd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	2105      	movs	r1, #5
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 f857 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001bf8:	f000 f808 	bl	8001c0c <Error_Handler>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3750      	adds	r7, #80	@ 0x50
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <Error_Handler+0x8>

08001c18 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c1e:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <MX_SPI2_Init+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c64:	220a      	movs	r2, #10
 8001c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <MX_SPI2_Init+0x64>)
 8001c6a:	f002 fe01 	bl	8004870 <HAL_SPI_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c74:	f7ff ffca 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000010c 	.word	0x2000010c
 8001c80:	40003800 	.word	0x40003800

08001c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <HAL_SPI_MspInit+0x84>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12c      	bne.n	8001d00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_SPI_MspInit+0x88>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_SPI_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001cde:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf0:	2305      	movs	r3, #5
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_SPI_MspInit+0x8c>)
 8001cfc:	f001 fdae 	bl	800385c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40003800 	.word	0x40003800
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020400 	.word	0x40020400

08001d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <HAL_MspInit+0x4c>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a0f      	ldr	r2, [pc, #60]	@ (8001d60 <HAL_MspInit+0x4c>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <HAL_MspInit+0x4c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_MspInit+0x4c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a08      	ldr	r2, [pc, #32]	@ (8001d60 <HAL_MspInit+0x4c>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_MspInit+0x4c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d52:	2007      	movs	r0, #7
 8001d54:	f001 f93e 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f000 fd85 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8001dc6:	2010      	movs	r0, #16
 8001dc8:	f001 fef6 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <DMA1_Stream6_IRQHandler+0x10>)
 8001dd6:	f001 fad7 	bl	8003388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200003a4 	.word	0x200003a4

08001de4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8001de8:	2020      	movs	r0, #32
 8001dea:	f001 fee5 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <USART2_IRQHandler+0x10>)
 8001dfa:	f004 fc89 	bl	8006710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000035c 	.word	0x2000035c

08001e08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  App_StateMachine_Tick();
 8001e0c:	f7ff fb3c 	bl	8001488 <App_StateMachine_Tick>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <TIM6_DAC_IRQHandler+0x14>)
 8001e12:	f003 fc59 	bl	80056c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000023c 	.word	0x2000023c

08001e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <SystemInit+0x20>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <SystemInit+0x20>)
 8001e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	@ 0x58
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]
 8001e72:	615a      	str	r2, [r3, #20]
 8001e74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2220      	movs	r2, #32
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f005 fbeb 	bl	8007658 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e82:	4b3e      	ldr	r3, [pc, #248]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e84:	4a3e      	ldr	r2, [pc, #248]	@ (8001f80 <MX_TIM1_Init+0x13c>)
 8001e86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 702;
 8001e88:	4b3c      	ldr	r3, [pc, #240]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e8a:	f240 22be 	movw	r2, #702	@ 0x2be
 8001e8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001e96:	4b39      	ldr	r3, [pc, #228]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e98:	22ff      	movs	r2, #255	@ 0xff
 8001e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9c:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea2:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea8:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001eaa:	2280      	movs	r2, #128	@ 0x80
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eae:	4833      	ldr	r0, [pc, #204]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001eb0:	f003 fac2 	bl	8005438 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001eba:	f7ff fea7 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ec4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ec8:	4619      	mov	r1, r3
 8001eca:	482c      	ldr	r0, [pc, #176]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001ecc:	f003 fdae 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ed6:	f7ff fe99 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eda:	4828      	ldr	r0, [pc, #160]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001edc:	f003 fb9b 	bl	8005616 <HAL_TIM_PWM_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ee6:	f7ff fe91 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4820      	ldr	r0, [pc, #128]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001efa:	f004 fa41 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f04:	f7ff fe82 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f08:	2360      	movs	r3, #96	@ 0x60
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 128;
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f28:	2204      	movs	r2, #4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4813      	ldr	r0, [pc, #76]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001f2e:	f003 fcbb 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f38:	f7ff fe68 	bl	8001c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001f60:	f004 fa8a 	bl	8006478 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001f6a:	f7ff fe4f 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f6e:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <MX_TIM1_Init+0x138>)
 8001f70:	f000 fa1c 	bl	80023ac <HAL_TIM_MspPostInit>

}
 8001f74:	bf00      	nop
 8001f76:	3758      	adds	r7, #88	@ 0x58
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000164 	.word	0x20000164
 8001f80:	40010000 	.word	0x40010000

08001f84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001fa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001fb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc8:	4813      	ldr	r0, [pc, #76]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001fca:	f003 fa35 	bl	8005438 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fd4:	f7ff fe1a 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <MX_TIM2_Init+0x94>)
 8001fe6:	f003 fd21 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ff0:	f7ff fe0c 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <MX_TIM2_Init+0x94>)
 8002002:	f004 f9bd 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800200c:	f7ff fdfe 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200001ac 	.word	0x200001ac

0800201c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	@ 0x38
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	f107 0320 	add.w	r3, r7, #32
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800204c:	4b2c      	ldr	r3, [pc, #176]	@ (8002100 <MX_TIM3_Init+0xe4>)
 800204e:	4a2d      	ldr	r2, [pc, #180]	@ (8002104 <MX_TIM3_Init+0xe8>)
 8002050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002052:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <MX_TIM3_Init+0xe4>)
 8002054:	2200      	movs	r2, #0
 8002056:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002058:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <MX_TIM3_Init+0xe4>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800205e:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <MX_TIM3_Init+0xe4>)
 8002060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002064:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002066:	4b26      	ldr	r3, [pc, #152]	@ (8002100 <MX_TIM3_Init+0xe4>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206c:	4b24      	ldr	r3, [pc, #144]	@ (8002100 <MX_TIM3_Init+0xe4>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002072:	4823      	ldr	r0, [pc, #140]	@ (8002100 <MX_TIM3_Init+0xe4>)
 8002074:	f003 f9e0 	bl	8005438 <HAL_TIM_Base_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800207e:	f7ff fdc5 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002088:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800208c:	4619      	mov	r1, r3
 800208e:	481c      	ldr	r0, [pc, #112]	@ (8002100 <MX_TIM3_Init+0xe4>)
 8002090:	f003 fccc 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800209a:	f7ff fdb7 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800209e:	4818      	ldr	r0, [pc, #96]	@ (8002100 <MX_TIM3_Init+0xe4>)
 80020a0:	f003 fab9 	bl	8005616 <HAL_TIM_PWM_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020aa:	f7ff fdaf 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020b6:	f107 0320 	add.w	r3, r7, #32
 80020ba:	4619      	mov	r1, r3
 80020bc:	4810      	ldr	r0, [pc, #64]	@ (8002100 <MX_TIM3_Init+0xe4>)
 80020be:	f004 f95f 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020c8:	f7ff fda0 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020cc:	2360      	movs	r3, #96	@ 0x60
 80020ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	220c      	movs	r2, #12
 80020e0:	4619      	mov	r1, r3
 80020e2:	4807      	ldr	r0, [pc, #28]	@ (8002100 <MX_TIM3_Init+0xe4>)
 80020e4:	f003 fbe0 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020ee:	f7ff fd8d 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020f2:	4803      	ldr	r0, [pc, #12]	@ (8002100 <MX_TIM3_Init+0xe4>)
 80020f4:	f000 f95a 	bl	80023ac <HAL_TIM_MspPostInit>

}
 80020f8:	bf00      	nop
 80020fa:	3738      	adds	r7, #56	@ 0x38
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200001f4 	.word	0x200001f4
 8002104:	40000400 	.word	0x40000400

08002108 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210e:	463b      	mov	r3, r7
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <MX_TIM6_Init+0x64>)
 8002118:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <MX_TIM6_Init+0x68>)
 800211a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <MX_TIM6_Init+0x64>)
 800211e:	f242 3227 	movw	r2, #8999	@ 0x2327
 8002122:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <MX_TIM6_Init+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <MX_TIM6_Init+0x64>)
 800212c:	2264      	movs	r2, #100	@ 0x64
 800212e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <MX_TIM6_Init+0x64>)
 8002132:	2280      	movs	r2, #128	@ 0x80
 8002134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <MX_TIM6_Init+0x64>)
 8002138:	f003 f97e 	bl	8005438 <HAL_TIM_Base_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002142:	f7ff fd63 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002146:	2320      	movs	r3, #32
 8002148:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800214e:	463b      	mov	r3, r7
 8002150:	4619      	mov	r1, r3
 8002152:	4806      	ldr	r0, [pc, #24]	@ (800216c <MX_TIM6_Init+0x64>)
 8002154:	f004 f914 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800215e:	f7ff fd55 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000023c 	.word	0x2000023c
 8002170:	40001000 	.word	0x40001000

08002174 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b096      	sub	sp, #88	@ 0x58
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2220      	movs	r2, #32
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f005 fa53 	bl	8007658 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021b2:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021b4:	4a3d      	ldr	r2, [pc, #244]	@ (80022ac <MX_TIM8_Init+0x138>)
 80021b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021b8:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b3a      	ldr	r3, [pc, #232]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021c4:	4b38      	ldr	r3, [pc, #224]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b36      	ldr	r3, [pc, #216]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021d2:	4b35      	ldr	r3, [pc, #212]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b33      	ldr	r3, [pc, #204]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021de:	4832      	ldr	r0, [pc, #200]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021e0:	f003 f92a 	bl	8005438 <HAL_TIM_Base_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80021ea:	f7ff fd0f 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021f8:	4619      	mov	r1, r3
 80021fa:	482b      	ldr	r0, [pc, #172]	@ (80022a8 <MX_TIM8_Init+0x134>)
 80021fc:	f003 fc16 	bl	8005a2c <HAL_TIM_ConfigClockSource>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002206:	f7ff fd01 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800220a:	4827      	ldr	r0, [pc, #156]	@ (80022a8 <MX_TIM8_Init+0x134>)
 800220c:	f003 fa03 	bl	8005616 <HAL_TIM_PWM_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002216:	f7ff fcf9 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002222:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002226:	4619      	mov	r1, r3
 8002228:	481f      	ldr	r0, [pc, #124]	@ (80022a8 <MX_TIM8_Init+0x134>)
 800222a:	f004 f8a9 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002234:	f7ff fcea 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002238:	2360      	movs	r3, #96	@ 0x60
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800224c:	2300      	movs	r3, #0
 800224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002254:	220c      	movs	r2, #12
 8002256:	4619      	mov	r1, r3
 8002258:	4813      	ldr	r0, [pc, #76]	@ (80022a8 <MX_TIM8_Init+0x134>)
 800225a:	f003 fb25 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8002264:	f7ff fcd2 	bl	8001c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800227c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002280:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4807      	ldr	r0, [pc, #28]	@ (80022a8 <MX_TIM8_Init+0x134>)
 800228c:	f004 f8f4 	bl	8006478 <HAL_TIMEx_ConfigBreakDeadTime>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8002296:	f7ff fcb9 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800229a:	4803      	ldr	r0, [pc, #12]	@ (80022a8 <MX_TIM8_Init+0x134>)
 800229c:	f000 f886 	bl	80023ac <HAL_TIM_MspPostInit>

}
 80022a0:	bf00      	nop
 80022a2:	3758      	adds	r7, #88	@ 0x58
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000284 	.word	0x20000284
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a36      	ldr	r2, [pc, #216]	@ (8002398 <HAL_TIM_Base_MspInit+0xe8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	4b35      	ldr	r3, [pc, #212]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	4a34      	ldr	r2, [pc, #208]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d2:	4b32      	ldr	r3, [pc, #200]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80022de:	e056      	b.n	800238e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	4b2b      	ldr	r3, [pc, #172]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	4a2a      	ldr	r2, [pc, #168]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fa:	4b28      	ldr	r3, [pc, #160]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
}
 8002306:	e042      	b.n	800238e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a24      	ldr	r2, [pc, #144]	@ (80023a0 <HAL_TIM_Base_MspInit+0xf0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10e      	bne.n	8002330 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4a20      	ldr	r2, [pc, #128]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6413      	str	r3, [r2, #64]	@ 0x40
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
}
 800232e:	e02e      	b.n	800238e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM6)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1b      	ldr	r2, [pc, #108]	@ (80023a4 <HAL_TIM_Base_MspInit+0xf4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d116      	bne.n	8002368 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b17      	ldr	r3, [pc, #92]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	4a16      	ldr	r2, [pc, #88]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 8002344:	f043 0310 	orr.w	r3, r3, #16
 8002348:	6413      	str	r3, [r2, #64]	@ 0x40
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2036      	movs	r0, #54	@ 0x36
 800235c:	f000 fe45 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002360:	2036      	movs	r0, #54	@ 0x36
 8002362:	f000 fe5e 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 8002366:	e012      	b.n	800238e <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0e      	ldr	r2, [pc, #56]	@ (80023a8 <HAL_TIM_Base_MspInit+0xf8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10d      	bne.n	800238e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_TIM_Base_MspInit+0xec>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
}
 800238e:	bf00      	nop
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40001000 	.word	0x40001000
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a36      	ldr	r2, [pc, #216]	@ (80024a4 <HAL_TIM_MspPostInit+0xf8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d11e      	bne.n	800240c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b35      	ldr	r3, [pc, #212]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a34      	ldr	r2, [pc, #208]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = STR_INPUTB__Pin;
 80023ea:	2301      	movs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(STR_INPUTB__GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4829      	ldr	r0, [pc, #164]	@ (80024ac <HAL_TIM_MspPostInit+0x100>)
 8002406:	f001 fa29 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800240a:	e047      	b.n	800249c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a27      	ldr	r2, [pc, #156]	@ (80024b0 <HAL_TIM_MspPostInit+0x104>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d11e      	bne.n	8002454 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a22      	ldr	r2, [pc, #136]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_SIG_Pin;
 8002432:	2302      	movs	r3, #2
 8002434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002442:	2302      	movs	r3, #2
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_SIG_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4817      	ldr	r0, [pc, #92]	@ (80024ac <HAL_TIM_MspPostInit+0x100>)
 800244e:	f001 fa05 	bl	800385c <HAL_GPIO_Init>
}
 8002452:	e023      	b.n	800249c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM8)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <HAL_TIM_MspPostInit+0x108>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d11e      	bne.n	800249c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a10      	ldr	r2, [pc, #64]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <HAL_TIM_MspPostInit+0xfc>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VESC_PPM_Pin;
 800247a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800248c:	2303      	movs	r3, #3
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VESC_PPM_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	4808      	ldr	r0, [pc, #32]	@ (80024b8 <HAL_TIM_MspPostInit+0x10c>)
 8002498:	f001 f9e0 	bl	800385c <HAL_GPIO_Init>
}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	@ 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40010400 	.word	0x40010400
 80024b8:	40020800 	.word	0x40020800

080024bc <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	@ (800250c <MX_UART4_Init+0x50>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_UART4_Init+0x4c>)
 80024f4:	f004 f84b 	bl	800658e <HAL_UART_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80024fe:	f7ff fb85 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200002cc 	.word	0x200002cc
 800250c:	40004c00 	.word	0x40004c00

08002510 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <MX_UART5_Init+0x4c>)
 8002516:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <MX_UART5_Init+0x50>)
 8002518:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <MX_UART5_Init+0x4c>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <MX_UART5_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <MX_UART5_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <MX_UART5_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <MX_UART5_Init+0x4c>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <MX_UART5_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <MX_UART5_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_UART5_Init+0x4c>)
 8002548:	f004 f821 	bl	800658e <HAL_UART_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002552:	f7ff fb5b 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000314 	.word	0x20000314
 8002560:	40005000 	.word	0x40005000

08002564 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <MX_USART2_UART_Init+0x50>)
 800256c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800256e:	4b10      	ldr	r3, [pc, #64]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800259a:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <MX_USART2_UART_Init+0x4c>)
 800259c:	f003 fff7 	bl	800658e <HAL_UART_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025a6:	f7ff fb31 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000035c 	.word	0x2000035c
 80025b4:	40004400 	.word	0x40004400

080025b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08e      	sub	sp, #56	@ 0x38
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a75      	ldr	r2, [pc, #468]	@ (80027ac <HAL_UART_MspInit+0x1f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d12c      	bne.n	8002634 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	4b74      	ldr	r3, [pc, #464]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a73      	ldr	r2, [pc, #460]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 80025e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b71      	ldr	r3, [pc, #452]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a6c      	ldr	r2, [pc, #432]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b6a      	ldr	r3, [pc, #424]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002612:	2303      	movs	r3, #3
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002622:	2308      	movs	r3, #8
 8002624:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800262a:	4619      	mov	r1, r3
 800262c:	4861      	ldr	r0, [pc, #388]	@ (80027b4 <HAL_UART_MspInit+0x1fc>)
 800262e:	f001 f915 	bl	800385c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002632:	e0b7      	b.n	80027a4 <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==UART5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5f      	ldr	r2, [pc, #380]	@ (80027b8 <HAL_UART_MspInit+0x200>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d14b      	bne.n	80026d6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	4b5b      	ldr	r3, [pc, #364]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	4a5a      	ldr	r2, [pc, #360]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800264c:	6413      	str	r3, [r2, #64]	@ 0x40
 800264e:	4b58      	ldr	r3, [pc, #352]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	4b54      	ldr	r3, [pc, #336]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a53      	ldr	r2, [pc, #332]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b51      	ldr	r3, [pc, #324]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b4d      	ldr	r3, [pc, #308]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002680:	f043 0308 	orr.w	r3, r3, #8
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026a4:	2308      	movs	r3, #8
 80026a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	4843      	ldr	r0, [pc, #268]	@ (80027bc <HAL_UART_MspInit+0x204>)
 80026b0:	f001 f8d4 	bl	800385c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026b4:	2304      	movs	r3, #4
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026c4:	2308      	movs	r3, #8
 80026c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	483c      	ldr	r0, [pc, #240]	@ (80027c0 <HAL_UART_MspInit+0x208>)
 80026d0:	f001 f8c4 	bl	800385c <HAL_GPIO_Init>
}
 80026d4:	e066      	b.n	80027a4 <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==USART2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3a      	ldr	r2, [pc, #232]	@ (80027c4 <HAL_UART_MspInit+0x20c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d161      	bne.n	80027a4 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4a31      	ldr	r2, [pc, #196]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 80026ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f0:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	4a2a      	ldr	r2, [pc, #168]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6313      	str	r3, [r2, #48]	@ 0x30
 800270c:	4b28      	ldr	r3, [pc, #160]	@ (80027b0 <HAL_UART_MspInit+0x1f8>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002718:	230c      	movs	r3, #12
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002728:	2307      	movs	r3, #7
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	4820      	ldr	r0, [pc, #128]	@ (80027b4 <HAL_UART_MspInit+0x1fc>)
 8002734:	f001 f892 	bl	800385c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002738:	4b23      	ldr	r3, [pc, #140]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 800273a:	4a24      	ldr	r2, [pc, #144]	@ (80027cc <HAL_UART_MspInit+0x214>)
 800273c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800273e:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 8002740:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002744:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 8002748:	2240      	movs	r2, #64	@ 0x40
 800274a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274c:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002752:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 8002754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002758:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002766:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 8002768:	2200      	movs	r2, #0
 800276a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 800276e:	2200      	movs	r2, #0
 8002770:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 8002774:	2200      	movs	r2, #0
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002778:	4813      	ldr	r0, [pc, #76]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 800277a:	f000 fc6d 	bl	8003058 <HAL_DMA_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002784:	f7ff fa42 	bl	8001c0c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0f      	ldr	r2, [pc, #60]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38
 800278e:	4a0e      	ldr	r2, [pc, #56]	@ (80027c8 <HAL_UART_MspInit+0x210>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	2026      	movs	r0, #38	@ 0x26
 800279a:	f000 fc26 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800279e:	2026      	movs	r0, #38	@ 0x26
 80027a0:	f000 fc3f 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 80027a4:	bf00      	nop
 80027a6:	3738      	adds	r7, #56	@ 0x38
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40004c00 	.word	0x40004c00
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40005000 	.word	0x40005000
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40004400 	.word	0x40004400
 80027c8:	200003a4 	.word	0x200003a4
 80027cc:	400260a0 	.word	0x400260a0

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002808 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027d4:	f7ff fb24 	bl	8001e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d8:	480c      	ldr	r0, [pc, #48]	@ (800280c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027da:	490d      	ldr	r1, [pc, #52]	@ (8002810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e0:	e002      	b.n	80027e8 <LoopCopyDataInit>

080027e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e6:	3304      	adds	r3, #4

080027e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ec:	d3f9      	bcc.n	80027e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f4:	e001      	b.n	80027fa <LoopFillZerobss>

080027f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f8:	3204      	adds	r2, #4

080027fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027fc:	d3fb      	bcc.n	80027f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f004 ff33 	bl	8007668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7ff f967 	bl	8001ad4 <main>
  bx  lr    
 8002806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002814:	080077c0 	.word	0x080077c0
  ldr r2, =_sbss
 8002818:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800281c:	20000408 	.word	0x20000408

08002820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002828:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0d      	ldr	r2, [pc, #52]	@ (8002864 <HAL_Init+0x40>)
 800282e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_Init+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	@ (8002864 <HAL_Init+0x40>)
 800283a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800283e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <HAL_Init+0x40>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800284a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800284c:	2003      	movs	r0, #3
 800284e:	f000 fbc1 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002852:	2000      	movs	r0, #0
 8002854:	f000 f808 	bl	8002868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002858:	f7ff fa5c 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00

08002868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002870:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <HAL_InitTick+0x54>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_InitTick+0x58>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800287e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fbd9 	bl	800303e <HAL_SYSTICK_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e00e      	b.n	80028b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d80a      	bhi.n	80028b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289c:	2200      	movs	r2, #0
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028a4:	f000 fba1 	bl	8002fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a8:	4a06      	ldr	r2, [pc, #24]	@ (80028c4 <HAL_InitTick+0x5c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000040 	.word	0x20000040
 80028c0:	20000048 	.word	0x20000048
 80028c4:	20000044 	.word	0x20000044

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000048 	.word	0x20000048
 80028ec:	20000404 	.word	0x20000404

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	@ (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000404 	.word	0x20000404

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffde 	bl	80028f0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000048 	.word	0x20000048

08002950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e033      	b.n	80029ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe ff78 	bl	8001864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002996:	f023 0302 	bic.w	r3, r3, #2
 800299a:	f043 0202 	orr.w	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f94a 	bl	8002c3c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80029be:	e001      	b.n	80029c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1c>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e113      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x244>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d925      	bls.n	8002a50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68d9      	ldr	r1, [r3, #12]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	3b1e      	subs	r3, #30
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43da      	mvns	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	400a      	ands	r2, r1
 8002a28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68d9      	ldr	r1, [r3, #12]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4403      	add	r3, r0
 8002a42:	3b1e      	subs	r3, #30
 8002a44:	409a      	lsls	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	e022      	b.n	8002a96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6919      	ldr	r1, [r3, #16]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	2207      	movs	r2, #7
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	400a      	ands	r2, r1
 8002a72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6919      	ldr	r1, [r3, #16]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4403      	add	r3, r0
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d824      	bhi.n	8002ae8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b05      	subs	r3, #5
 8002ab0:	221f      	movs	r2, #31
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	400a      	ands	r2, r1
 8002abe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b05      	subs	r3, #5
 8002ada:	fa00 f203 	lsl.w	r2, r0, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ae6:	e04c      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	d824      	bhi.n	8002b3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b23      	subs	r3, #35	@ 0x23
 8002b02:	221f      	movs	r2, #31
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	400a      	ands	r2, r1
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b23      	subs	r3, #35	@ 0x23
 8002b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b38:	e023      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b41      	subs	r3, #65	@ 0x41
 8002b4c:	221f      	movs	r2, #31
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	400a      	ands	r2, r1
 8002b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3b41      	subs	r3, #65	@ 0x41
 8002b76:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b82:	4b29      	ldr	r3, [pc, #164]	@ (8002c28 <HAL_ADC_ConfigChannel+0x250>)
 8002b84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a28      	ldr	r2, [pc, #160]	@ (8002c2c <HAL_ADC_ConfigChannel+0x254>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d10f      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d8>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b12      	cmp	r3, #18
 8002b96:	d10b      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c2c <HAL_ADC_ConfigChannel+0x254>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d12b      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x23a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c30 <HAL_ADC_ConfigChannel+0x258>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x1f4>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b11      	cmp	r3, #17
 8002bca:	d122      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <HAL_ADC_ConfigChannel+0x258>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d111      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bee:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <HAL_ADC_ConfigChannel+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a11      	ldr	r2, [pc, #68]	@ (8002c38 <HAL_ADC_ConfigChannel+0x260>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	0c9a      	lsrs	r2, r3, #18
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c04:	e002      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f9      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40012300 	.word	0x40012300
 8002c2c:	40012000 	.word	0x40012000
 8002c30:	10000012 	.word	0x10000012
 8002c34:	20000040 	.word	0x20000040
 8002c38:	431bde83 	.word	0x431bde83

08002c3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c44:	4b79      	ldr	r3, [pc, #484]	@ (8002e2c <ADC_Init+0x1f0>)
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	021a      	lsls	r2, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	4a58      	ldr	r2, [pc, #352]	@ (8002e30 <ADC_Init+0x1f4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	e00f      	b.n	8002d3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d38:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0202 	bic.w	r2, r2, #2
 8002d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7e1b      	ldrb	r3, [r3, #24]
 8002d54:	005a      	lsls	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01b      	beq.n	8002da0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d76:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	3b01      	subs	r3, #1
 8002d94:	035a      	lsls	r2, r3, #13
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	e007      	b.n	8002db0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	051a      	lsls	r2, r3, #20
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002df2:	025a      	lsls	r2, r3, #9
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	029a      	lsls	r2, r3, #10
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40012300 	.word	0x40012300
 8002e30:	0f000001 	.word	0x0f000001

08002e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e66:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4907      	ldr	r1, [pc, #28]	@ (8002ed0 <__NVIC_EnableIRQ+0x38>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0a      	blt.n	8002efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	490c      	ldr	r1, [pc, #48]	@ (8002f20 <__NVIC_SetPriority+0x4c>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002efc:	e00a      	b.n	8002f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4908      	ldr	r1, [pc, #32]	@ (8002f24 <__NVIC_SetPriority+0x50>)
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	761a      	strb	r2, [r3, #24]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000e100 	.word	0xe000e100
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	@ 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f1c3 0307 	rsb	r3, r3, #7
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	bf28      	it	cs
 8002f46:	2304      	movcs	r3, #4
 8002f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d902      	bls.n	8002f58 <NVIC_EncodePriority+0x30>
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3b03      	subs	r3, #3
 8002f56:	e000      	b.n	8002f5a <NVIC_EncodePriority+0x32>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	4313      	orrs	r3, r2
         );
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fb4:	f7ff ff8e 	bl	8002ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff29 	bl	8002e34 <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff3e 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff8e 	bl	8002f28 <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5d 	bl	8002ed4 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff31 	bl	8002e98 <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffa2 	bl	8002f90 <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff fc44 	bl	80028f0 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e099      	b.n	80031a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003094:	e00f      	b.n	80030b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003096:	f7ff fc2b 	bl	80028f0 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d908      	bls.n	80030b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e078      	b.n	80031a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e8      	bne.n	8003096 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <HAL_DMA_Init+0x158>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	2b04      	cmp	r3, #4
 800310e:	d107      	bne.n	8003120 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	4313      	orrs	r3, r2
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	2b04      	cmp	r3, #4
 8003148:	d117      	bne.n	800317a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb01 	bl	8003764 <DMA_CheckFifoParam>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2240      	movs	r2, #64	@ 0x40
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003176:	2301      	movs	r3, #1
 8003178:	e016      	b.n	80031a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fab8 	bl	80036f8 <DMA_CalcBaseAndBitshift>
 8003188:	4603      	mov	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	223f      	movs	r2, #63	@ 0x3f
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	f010803f 	.word	0xf010803f

080031b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_DMA_Start_IT+0x26>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e040      	b.n	800325c <HAL_DMA_Start_IT+0xa8>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d12f      	bne.n	800324e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fa4a 	bl	800369c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	223f      	movs	r2, #63	@ 0x3f
 800320e:	409a      	lsls	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0216 	orr.w	r2, r2, #22
 8003222:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e005      	b.n	800325a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003256:	2302      	movs	r3, #2
 8003258:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003272:	f7ff fb3d 	bl	80028f0 <HAL_GetTick>
 8003276:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d008      	beq.n	8003296 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2280      	movs	r2, #128	@ 0x80
 8003288:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e052      	b.n	800333c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0216 	bic.w	r2, r2, #22
 80032a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <HAL_DMA_Abort+0x62>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0208 	bic.w	r2, r2, #8
 80032d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e6:	e013      	b.n	8003310 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e8:	f7ff fb02 	bl	80028f0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d90c      	bls.n	8003310 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2203      	movs	r2, #3
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e015      	b.n	800333c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e4      	bne.n	80032e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003322:	223f      	movs	r2, #63	@ 0x3f
 8003324:	409a      	lsls	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d004      	beq.n	8003362 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2280      	movs	r2, #128	@ 0x80
 800335c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00c      	b.n	800337c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2205      	movs	r2, #5
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003394:	4b8e      	ldr	r3, [pc, #568]	@ (80035d0 <HAL_DMA_IRQHandler+0x248>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a8e      	ldr	r2, [pc, #568]	@ (80035d4 <HAL_DMA_IRQHandler+0x24c>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0a9b      	lsrs	r3, r3, #10
 80033a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	2208      	movs	r2, #8
 80033b4:	409a      	lsls	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01a      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	2208      	movs	r2, #8
 80033e2:	409a      	lsls	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003416:	2201      	movs	r2, #1
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f043 0202 	orr.w	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	2204      	movs	r2, #4
 8003430:	409a      	lsls	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	2204      	movs	r2, #4
 800344e:	409a      	lsls	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	2210      	movs	r2, #16
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d043      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03c      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003482:	2210      	movs	r2, #16
 8003484:	409a      	lsls	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d018      	beq.n	80034ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d024      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
 80034b6:	e01f      	b.n	80034f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
 80034c8:	e016      	b.n	80034f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0208 	bic.w	r2, r2, #8
 80034e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	2220      	movs	r2, #32
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 808f 	beq.w	8003628 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8087 	beq.w	8003628 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351e:	2220      	movs	r2, #32
 8003520:	409a      	lsls	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b05      	cmp	r3, #5
 8003530:	d136      	bne.n	80035a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0216 	bic.w	r2, r2, #22
 8003540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_DMA_IRQHandler+0x1da>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0208 	bic.w	r2, r2, #8
 8003570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	223f      	movs	r2, #63	@ 0x3f
 8003578:	409a      	lsls	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003592:	2b00      	cmp	r3, #0
 8003594:	d07e      	beq.n	8003694 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
        }
        return;
 800359e:	e079      	b.n	8003694 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01d      	beq.n	80035ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d031      	beq.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
 80035cc:	e02c      	b.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
 80035ce:	bf00      	nop
 80035d0:	20000040 	.word	0x20000040
 80035d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e01e      	b.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0210 	bic.w	r2, r2, #16
 8003606:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362c:	2b00      	cmp	r3, #0
 800362e:	d032      	beq.n	8003696 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d022      	beq.n	8003682 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2205      	movs	r2, #5
 8003640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3301      	adds	r3, #1
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	d307      	bcc.n	8003670 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f2      	bne.n	8003654 <HAL_DMA_IRQHandler+0x2cc>
 800366e:	e000      	b.n	8003672 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003670:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
 8003692:	e000      	b.n	8003696 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003694:	bf00      	nop
    }
  }
}
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b40      	cmp	r3, #64	@ 0x40
 80036c8:	d108      	bne.n	80036dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036da:	e007      	b.n	80036ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	3b10      	subs	r3, #16
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <DMA_CalcBaseAndBitshift+0x64>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003712:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <DMA_CalcBaseAndBitshift+0x68>)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d909      	bls.n	800373a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	1d1a      	adds	r2, r3, #4
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	659a      	str	r2, [r3, #88]	@ 0x58
 8003738:	e007      	b.n	800374a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	aaaaaaab 	.word	0xaaaaaaab
 8003760:	080077a8 	.word	0x080077a8

08003764 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11f      	bne.n	80037be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d856      	bhi.n	8003832 <DMA_CheckFifoParam+0xce>
 8003784:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <DMA_CheckFifoParam+0x28>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037af 	.word	0x080037af
 8003794:	0800379d 	.word	0x0800379d
 8003798:	08003833 	.word	0x08003833
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d046      	beq.n	8003836 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ac:	e043      	b.n	8003836 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037b6:	d140      	bne.n	800383a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037bc:	e03d      	b.n	800383a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c6:	d121      	bne.n	800380c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d837      	bhi.n	800383e <DMA_CheckFifoParam+0xda>
 80037ce:	a201      	add	r2, pc, #4	@ (adr r2, 80037d4 <DMA_CheckFifoParam+0x70>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037eb 	.word	0x080037eb
 80037dc:	080037e5 	.word	0x080037e5
 80037e0:	080037fd 	.word	0x080037fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      break;
 80037e8:	e030      	b.n	800384c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d025      	beq.n	8003842 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fa:	e022      	b.n	8003842 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003804:	d11f      	bne.n	8003846 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800380a:	e01c      	b.n	8003846 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d903      	bls.n	800381a <DMA_CheckFifoParam+0xb6>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d003      	beq.n	8003820 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003818:	e018      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
      break;
 800381e:	e015      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00e      	beq.n	800384a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      break;
 8003830:	e00b      	b.n	800384a <DMA_CheckFifoParam+0xe6>
      break;
 8003832:	bf00      	nop
 8003834:	e00a      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
 8003838:	e008      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e006      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e004      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;   
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
    }
  } 
  
  return status; 
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	@ 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e165      	b.n	8003b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	f040 8154 	bne.w	8003b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d005      	beq.n	80038ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d130      	bne.n	8003910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0201 	and.w	r2, r3, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b03      	cmp	r3, #3
 800391a:	d017      	beq.n	800394c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d123      	bne.n	80039a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	08da      	lsrs	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3208      	adds	r2, #8
 8003960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	220f      	movs	r2, #15
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	08da      	lsrs	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3208      	adds	r2, #8
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0203 	and.w	r2, r3, #3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80ae 	beq.w	8003b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	4a5c      	ldr	r2, [pc, #368]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 80039ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039f2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fe:	4a58      	ldr	r2, [pc, #352]	@ (8003b60 <HAL_GPIO_Init+0x304>)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4f      	ldr	r2, [pc, #316]	@ (8003b64 <HAL_GPIO_Init+0x308>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d025      	beq.n	8003a76 <HAL_GPIO_Init+0x21a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b68 <HAL_GPIO_Init+0x30c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01f      	beq.n	8003a72 <HAL_GPIO_Init+0x216>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4d      	ldr	r2, [pc, #308]	@ (8003b6c <HAL_GPIO_Init+0x310>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d019      	beq.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b70 <HAL_GPIO_Init+0x314>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_GPIO_Init+0x20e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4b      	ldr	r2, [pc, #300]	@ (8003b74 <HAL_GPIO_Init+0x318>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00d      	beq.n	8003a66 <HAL_GPIO_Init+0x20a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b78 <HAL_GPIO_Init+0x31c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <HAL_GPIO_Init+0x206>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a49      	ldr	r2, [pc, #292]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_GPIO_Init+0x202>
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	e00c      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a5e:	2307      	movs	r3, #7
 8003a60:	e00a      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a62:	2305      	movs	r3, #5
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a66:	2304      	movs	r3, #4
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x21c>
 8003a76:	2300      	movs	r3, #0
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a88:	4935      	ldr	r1, [pc, #212]	@ (8003b60 <HAL_GPIO_Init+0x304>)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a96:	4b3a      	ldr	r3, [pc, #232]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aba:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae4:	4a26      	ldr	r2, [pc, #152]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aea:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b38:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <HAL_GPIO_Init+0x324>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	f67f ae96 	bls.w	8003878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	@ 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020c00 	.word	0x40020c00
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40021400 	.word	0x40021400
 8003b7c:	40021800 	.word	0x40021800
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
 8003b90:	4613      	mov	r3, r2
 8003b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b94:	787b      	ldrb	r3, [r7, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ba0:	e003      	b.n	8003baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	041a      	lsls	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	619a      	str	r2, [r3, #24]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bc2:	4b08      	ldr	r3, [pc, #32]	@ (8003be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bce:	4a05      	ldr	r2, [pc, #20]	@ (8003be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f806 	bl	8003be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40013c00 	.word	0x40013c00

08003be8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	4a1f      	ldr	r2, [pc, #124]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c2c:	f7fe fe60 	bl	80028f0 <HAL_GetTick>
 8003c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c32:	e009      	b.n	8003c48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c34:	f7fe fe5c 	bl	80028f0 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c42:	d901      	bls.n	8003c48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e01f      	b.n	8003c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c54:	d1ee      	bne.n	8003c34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c56:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c5c:	f7fe fe48 	bl	80028f0 <HAL_GetTick>
 8003c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c62:	e009      	b.n	8003c78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c64:	f7fe fe44 	bl	80028f0 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c72:	d901      	bls.n	8003c78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e007      	b.n	8003c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c78:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c84:	d1ee      	bne.n	8003c64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40023800 	.word	0x40023800
 8003c94:	420e0040 	.word	0x420e0040
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	420e0044 	.word	0x420e0044

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0cc      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b68      	ldr	r3, [pc, #416]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d90c      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b63      	ldr	r3, [pc, #396]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b8      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a52      	ldr	r2, [pc, #328]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	494d      	ldr	r1, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d044      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d119      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e06f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e067      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b37      	ldr	r3, [pc, #220]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4934      	ldr	r1, [pc, #208]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d90:	f7fe fdae 	bl	80028f0 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fe fdaa 	bl	80028f0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e04f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d20c      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4916      	ldr	r1, [pc, #88]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	490e      	ldr	r1, [pc, #56]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e26:	f000 f855 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490a      	ldr	r1, [pc, #40]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fd0e 	bl	8002868 <HAL_InitTick>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023c00 	.word	0x40023c00
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08007790 	.word	0x08007790
 8003e64:	20000040 	.word	0x20000040
 8003e68:	20000044 	.word	0x20000044

08003e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000040 	.word	0x20000040

08003e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e88:	f7ff fff0 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4903      	ldr	r1, [pc, #12]	@ (8003ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9a:	5ccb      	ldrb	r3, [r1, r3]
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	080077a0 	.word	0x080077a0

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb0:	f7ff ffdc 	bl	8003e6c <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0b5b      	lsrs	r3, r3, #13
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	@ (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	080077a0 	.word	0x080077a0

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed8:	b0ae      	sub	sp, #184	@ 0xb8
 8003eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003efa:	4bcb      	ldr	r3, [pc, #812]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	f200 8206 	bhi.w	8004314 <HAL_RCC_GetSysClockFreq+0x440>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08004315 	.word	0x08004315
 8003f18:	08004315 	.word	0x08004315
 8003f1c:	08004315 	.word	0x08004315
 8003f20:	08003f4d 	.word	0x08003f4d
 8003f24:	08004315 	.word	0x08004315
 8003f28:	08004315 	.word	0x08004315
 8003f2c:	08004315 	.word	0x08004315
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08004315 	.word	0x08004315
 8003f38:	08004315 	.word	0x08004315
 8003f3c:	08004315 	.word	0x08004315
 8003f40:	08004145 	.word	0x08004145
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f44:	4bb9      	ldr	r3, [pc, #740]	@ (800422c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003f4a:	e1e7      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f4c:	4bb8      	ldr	r3, [pc, #736]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f52:	e1e3      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f54:	4bb4      	ldr	r3, [pc, #720]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f60:	4bb1      	ldr	r3, [pc, #708]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d071      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6c:	4bae      	ldr	r3, [pc, #696]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	0159      	lsls	r1, r3, #5
 8003fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa4:	0150      	lsls	r0, r2, #5
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4621      	mov	r1, r4
 8003fac:	1a51      	subs	r1, r2, r1
 8003fae:	6439      	str	r1, [r7, #64]	@ 0x40
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	018b      	lsls	r3, r1, #6
 8003fc8:	4641      	mov	r1, r8
 8003fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fce:	4641      	mov	r1, r8
 8003fd0:	018a      	lsls	r2, r1, #6
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	1a51      	subs	r1, r2, r1
 8003fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fd8:	4649      	mov	r1, r9
 8003fda:	eb63 0301 	sbc.w	r3, r3, r1
 8003fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003fec:	4649      	mov	r1, r9
 8003fee:	00cb      	lsls	r3, r1, #3
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	00ca      	lsls	r2, r1, #3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	4622      	mov	r2, r4
 8004002:	189b      	adds	r3, r3, r2
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
 8004006:	462b      	mov	r3, r5
 8004008:	460a      	mov	r2, r1
 800400a:	eb42 0303 	adc.w	r3, r2, r3
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800401c:	4629      	mov	r1, r5
 800401e:	024b      	lsls	r3, r1, #9
 8004020:	4621      	mov	r1, r4
 8004022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004026:	4621      	mov	r1, r4
 8004028:	024a      	lsls	r2, r1, #9
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004032:	2200      	movs	r2, #0
 8004034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800403c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004040:	f7fc fcde 	bl	8000a00 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800404e:	e067      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b75      	ldr	r3, [pc, #468]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800405c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004060:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800406a:	2300      	movs	r3, #0
 800406c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800406e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004072:	4622      	mov	r2, r4
 8004074:	462b      	mov	r3, r5
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	0159      	lsls	r1, r3, #5
 8004080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004084:	0150      	lsls	r0, r2, #5
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4621      	mov	r1, r4
 800408c:	1a51      	subs	r1, r2, r1
 800408e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004090:	4629      	mov	r1, r5
 8004092:	eb63 0301 	sbc.w	r3, r3, r1
 8004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80040a4:	4649      	mov	r1, r9
 80040a6:	018b      	lsls	r3, r1, #6
 80040a8:	4641      	mov	r1, r8
 80040aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ae:	4641      	mov	r1, r8
 80040b0:	018a      	lsls	r2, r1, #6
 80040b2:	4641      	mov	r1, r8
 80040b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80040b8:	4649      	mov	r1, r9
 80040ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d2:	4692      	mov	sl, r2
 80040d4:	469b      	mov	fp, r3
 80040d6:	4623      	mov	r3, r4
 80040d8:	eb1a 0303 	adds.w	r3, sl, r3
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	462b      	mov	r3, r5
 80040e0:	eb4b 0303 	adc.w	r3, fp, r3
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040f2:	4629      	mov	r1, r5
 80040f4:	028b      	lsls	r3, r1, #10
 80040f6:	4621      	mov	r1, r4
 80040f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040fc:	4621      	mov	r1, r4
 80040fe:	028a      	lsls	r2, r1, #10
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004108:	2200      	movs	r2, #0
 800410a:	673b      	str	r3, [r7, #112]	@ 0x70
 800410c:	677a      	str	r2, [r7, #116]	@ 0x74
 800410e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004112:	f7fc fc75 	bl	8000a00 <__aeabi_uldivmod>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4613      	mov	r3, r2
 800411c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004120:	4b41      	ldr	r3, [pc, #260]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004142:	e0eb      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004144:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800414c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004150:	4b35      	ldr	r3, [pc, #212]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d06b      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415c:	4b32      	ldr	r3, [pc, #200]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x354>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	2200      	movs	r2, #0
 8004164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004166:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004168:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004170:	2300      	movs	r3, #0
 8004172:	667b      	str	r3, [r7, #100]	@ 0x64
 8004174:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004178:	4622      	mov	r2, r4
 800417a:	462b      	mov	r3, r5
 800417c:	f04f 0000 	mov.w	r0, #0
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	0159      	lsls	r1, r3, #5
 8004186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800418a:	0150      	lsls	r0, r2, #5
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4621      	mov	r1, r4
 8004192:	1a51      	subs	r1, r2, r1
 8004194:	61b9      	str	r1, [r7, #24]
 8004196:	4629      	mov	r1, r5
 8004198:	eb63 0301 	sbc.w	r3, r3, r1
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041aa:	4659      	mov	r1, fp
 80041ac:	018b      	lsls	r3, r1, #6
 80041ae:	4651      	mov	r1, sl
 80041b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b4:	4651      	mov	r1, sl
 80041b6:	018a      	lsls	r2, r1, #6
 80041b8:	4651      	mov	r1, sl
 80041ba:	ebb2 0801 	subs.w	r8, r2, r1
 80041be:	4659      	mov	r1, fp
 80041c0:	eb63 0901 	sbc.w	r9, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d8:	4690      	mov	r8, r2
 80041da:	4699      	mov	r9, r3
 80041dc:	4623      	mov	r3, r4
 80041de:	eb18 0303 	adds.w	r3, r8, r3
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	462b      	mov	r3, r5
 80041e6:	eb49 0303 	adc.w	r3, r9, r3
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041f8:	4629      	mov	r1, r5
 80041fa:	024b      	lsls	r3, r1, #9
 80041fc:	4621      	mov	r1, r4
 80041fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004202:	4621      	mov	r1, r4
 8004204:	024a      	lsls	r2, r1, #9
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800420e:	2200      	movs	r2, #0
 8004210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004212:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004218:	f7fc fbf2 	bl	8000a00 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4613      	mov	r3, r2
 8004222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004226:	e065      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x420>
 8004228:	40023800 	.word	0x40023800
 800422c:	00f42400 	.word	0x00f42400
 8004230:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004234:	4b3d      	ldr	r3, [pc, #244]	@ (800432c <HAL_RCC_GetSysClockFreq+0x458>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	099b      	lsrs	r3, r3, #6
 800423a:	2200      	movs	r2, #0
 800423c:	4618      	mov	r0, r3
 800423e:	4611      	mov	r1, r2
 8004240:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004244:	653b      	str	r3, [r7, #80]	@ 0x50
 8004246:	2300      	movs	r3, #0
 8004248:	657b      	str	r3, [r7, #84]	@ 0x54
 800424a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800424e:	4642      	mov	r2, r8
 8004250:	464b      	mov	r3, r9
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004260:	0150      	lsls	r0, r2, #5
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4641      	mov	r1, r8
 8004268:	1a51      	subs	r1, r2, r1
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	4649      	mov	r1, r9
 800426e:	eb63 0301 	sbc.w	r3, r3, r1
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004280:	4659      	mov	r1, fp
 8004282:	018b      	lsls	r3, r1, #6
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428a:	4651      	mov	r1, sl
 800428c:	018a      	lsls	r2, r1, #6
 800428e:	4651      	mov	r1, sl
 8004290:	1a54      	subs	r4, r2, r1
 8004292:	4659      	mov	r1, fp
 8004294:	eb63 0501 	sbc.w	r5, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	00eb      	lsls	r3, r5, #3
 80042a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a6:	00e2      	lsls	r2, r4, #3
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	4643      	mov	r3, r8
 80042ae:	18e3      	adds	r3, r4, r3
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	464b      	mov	r3, r9
 80042b4:	eb45 0303 	adc.w	r3, r5, r3
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042c6:	4629      	mov	r1, r5
 80042c8:	028b      	lsls	r3, r1, #10
 80042ca:	4621      	mov	r1, r4
 80042cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042d0:	4621      	mov	r1, r4
 80042d2:	028a      	lsls	r2, r1, #10
 80042d4:	4610      	mov	r0, r2
 80042d6:	4619      	mov	r1, r3
 80042d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042dc:	2200      	movs	r2, #0
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80042e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042e6:	f7fc fb8b 	bl	8000a00 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4613      	mov	r3, r2
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042f4:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <HAL_RCC_GetSysClockFreq+0x458>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	0f1b      	lsrs	r3, r3, #28
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004312:	e003      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004314:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800431a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004320:	4618      	mov	r0, r3
 8004322:	37b8      	adds	r7, #184	@ 0xb8
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	00f42400 	.word	0x00f42400

08004334 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e28d      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 8083 	beq.w	800445a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004354:	4b94      	ldr	r3, [pc, #592]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b04      	cmp	r3, #4
 800435e:	d019      	beq.n	8004394 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004360:	4b91      	ldr	r3, [pc, #580]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004368:	2b08      	cmp	r3, #8
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800436c:	4b8e      	ldr	r3, [pc, #568]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004378:	d00c      	beq.n	8004394 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437a:	4b8b      	ldr	r3, [pc, #556]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d112      	bne.n	80043ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004386:	4b88      	ldr	r3, [pc, #544]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004392:	d10b      	bne.n	80043ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	4b84      	ldr	r3, [pc, #528]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05b      	beq.n	8004458 <HAL_RCC_OscConfig+0x124>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d157      	bne.n	8004458 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e25a      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b4:	d106      	bne.n	80043c4 <HAL_RCC_OscConfig+0x90>
 80043b6:	4b7c      	ldr	r3, [pc, #496]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7b      	ldr	r2, [pc, #492]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e01d      	b.n	8004400 <HAL_RCC_OscConfig+0xcc>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0xb4>
 80043ce:	4b76      	ldr	r3, [pc, #472]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a75      	ldr	r2, [pc, #468]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b73      	ldr	r3, [pc, #460]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a72      	ldr	r2, [pc, #456]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0xcc>
 80043e8:	4b6f      	ldr	r3, [pc, #444]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a6e      	ldr	r2, [pc, #440]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b6c      	ldr	r3, [pc, #432]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6b      	ldr	r2, [pc, #428]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe fa72 	bl	80028f0 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004410:	f7fe fa6e 	bl	80028f0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e21f      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	4b61      	ldr	r3, [pc, #388]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0xdc>
 800442e:	e014      	b.n	800445a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fe fa5e 	bl	80028f0 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe fa5a 	bl	80028f0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	@ 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e20b      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444a:	4b57      	ldr	r3, [pc, #348]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x104>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d06f      	beq.n	8004546 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004466:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004472:	4b4d      	ldr	r3, [pc, #308]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800447a:	2b08      	cmp	r3, #8
 800447c:	d105      	bne.n	800448a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800447e:	4b4a      	ldr	r3, [pc, #296]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b47      	ldr	r3, [pc, #284]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004492:	2b0c      	cmp	r3, #12
 8004494:	d11c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004496:	4b44      	ldr	r3, [pc, #272]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_RCC_OscConfig+0x186>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d001      	beq.n	80044ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e1d3      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ba:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4937      	ldr	r1, [pc, #220]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	e03a      	b.n	8004546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d8:	4b34      	ldr	r3, [pc, #208]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fe fa07 	bl	80028f0 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fe fa03 	bl	80028f0 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e1b4      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f8:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	4b28      	ldr	r3, [pc, #160]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4925      	ldr	r1, [pc, #148]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451a:	4b24      	ldr	r3, [pc, #144]	@ (80045ac <HAL_RCC_OscConfig+0x278>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe f9e6 	bl	80028f0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004528:	f7fe f9e2 	bl	80028f0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e193      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d036      	beq.n	80045c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455a:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <HAL_RCC_OscConfig+0x27c>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fe f9c6 	bl	80028f0 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004568:	f7fe f9c2 	bl	80028f0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e173      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCC_OscConfig+0x274>)
 800457c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x234>
 8004586:	e01b      	b.n	80045c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004588:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <HAL_RCC_OscConfig+0x27c>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fe f9af 	bl	80028f0 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	e00e      	b.n	80045b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004596:	f7fe f9ab 	bl	80028f0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d907      	bls.n	80045b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e15c      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	42470000 	.word	0x42470000
 80045b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	4b8a      	ldr	r3, [pc, #552]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80045b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ea      	bne.n	8004596 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8097 	beq.w	80046fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d2:	4b83      	ldr	r3, [pc, #524]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	4b7f      	ldr	r3, [pc, #508]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	4a7e      	ldr	r2, [pc, #504]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80045e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ee:	4b7c      	ldr	r3, [pc, #496]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fe:	4b79      	ldr	r3, [pc, #484]	@ (80047e4 <HAL_RCC_OscConfig+0x4b0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d118      	bne.n	800463c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460a:	4b76      	ldr	r3, [pc, #472]	@ (80047e4 <HAL_RCC_OscConfig+0x4b0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a75      	ldr	r2, [pc, #468]	@ (80047e4 <HAL_RCC_OscConfig+0x4b0>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004616:	f7fe f96b 	bl	80028f0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fe f967 	bl	80028f0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e118      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	4b6c      	ldr	r3, [pc, #432]	@ (80047e4 <HAL_RCC_OscConfig+0x4b0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d106      	bne.n	8004652 <HAL_RCC_OscConfig+0x31e>
 8004644:	4b66      	ldr	r3, [pc, #408]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a65      	ldr	r2, [pc, #404]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x358>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b05      	cmp	r3, #5
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x340>
 800465a:	4b61      	ldr	r3, [pc, #388]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	4a60      	ldr	r2, [pc, #384]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	@ 0x70
 8004666:	4b5e      	ldr	r3, [pc, #376]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	4a5d      	ldr	r2, [pc, #372]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	@ 0x70
 8004672:	e00b      	b.n	800468c <HAL_RCC_OscConfig+0x358>
 8004674:	4b5a      	ldr	r3, [pc, #360]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004678:	4a59      	ldr	r2, [pc, #356]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004680:	4b57      	ldr	r3, [pc, #348]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004684:	4a56      	ldr	r2, [pc, #344]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004686:	f023 0304 	bic.w	r3, r3, #4
 800468a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fe f92c 	bl	80028f0 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fe f928 	bl	80028f0 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0d7      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	4b4b      	ldr	r3, [pc, #300]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ee      	beq.n	800469c <HAL_RCC_OscConfig+0x368>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fe f916 	bl	80028f0 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fe f912 	bl	80028f0 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0c1      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046de:	4b40      	ldr	r3, [pc, #256]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ee      	bne.n	80046c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f0:	4b3b      	ldr	r3, [pc, #236]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	4a3a      	ldr	r2, [pc, #232]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80046f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80ad 	beq.w	8004860 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004706:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b08      	cmp	r3, #8
 8004710:	d060      	beq.n	80047d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d145      	bne.n	80047a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471a:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <HAL_RCC_OscConfig+0x4b4>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fe f8e6 	bl	80028f0 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004728:	f7fe f8e2 	bl	80028f0 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e093      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	4b29      	ldr	r3, [pc, #164]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	019b      	lsls	r3, r3, #6
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	071b      	lsls	r3, r3, #28
 8004772:	491b      	ldr	r1, [pc, #108]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <HAL_RCC_OscConfig+0x4b4>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477e:	f7fe f8b7 	bl	80028f0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fe f8b3 	bl	80028f0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e064      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x452>
 80047a4:	e05c      	b.n	8004860 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <HAL_RCC_OscConfig+0x4b4>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe f8a0 	bl	80028f0 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fe f89c 	bl	80028f0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e04d      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_RCC_OscConfig+0x4ac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x480>
 80047d2:	e045      	b.n	8004860 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d107      	bne.n	80047ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e040      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40007000 	.word	0x40007000
 80047e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ec:	4b1f      	ldr	r3, [pc, #124]	@ (800486c <HAL_RCC_OscConfig+0x538>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d030      	beq.n	800485c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d129      	bne.n	800485c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d122      	bne.n	800485c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004824:	4293      	cmp	r3, r2
 8004826:	d119      	bne.n	800485c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d10f      	bne.n	800485c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800

08004870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07b      	b.n	800497a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004892:	d009      	beq.n	80048a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
 800489a:	e005      	b.n	80048a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fd f9de 	bl	8001c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492c:	ea42 0103 	orr.w	r1, r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0104 	and.w	r1, r3, #4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	f003 0210 	and.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b088      	sub	sp, #32
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_SPI_Transmit+0x22>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e12d      	b.n	8004c00 <HAL_SPI_Transmit+0x27e>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ac:	f7fd ffa0 	bl	80028f0 <HAL_GetTick>
 80049b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049c6:	e116      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x52>
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049d8:	e10d      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a20:	d10f      	bne.n	8004a42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b40      	cmp	r3, #64	@ 0x40
 8004a4e:	d007      	beq.n	8004a60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a68:	d14f      	bne.n	8004b0a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_Transmit+0xf6>
 8004a72:	8afb      	ldrh	r3, [r7, #22]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d142      	bne.n	8004afe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	881a      	ldrh	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a88:	1c9a      	adds	r2, r3, #2
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a9c:	e02f      	b.n	8004afe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d112      	bne.n	8004ad2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abc:	1c9a      	adds	r2, r3, #2
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ad0:	e015      	b.n	8004afe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad2:	f7fd ff0d 	bl	80028f0 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d803      	bhi.n	8004aea <HAL_SPI_Transmit+0x168>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ae8:	d102      	bne.n	8004af0 <HAL_SPI_Transmit+0x16e>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004afc:	e07b      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ca      	bne.n	8004a9e <HAL_SPI_Transmit+0x11c>
 8004b08:	e050      	b.n	8004bac <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SPI_Transmit+0x196>
 8004b12:	8afb      	ldrh	r3, [r7, #22]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d144      	bne.n	8004ba2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b3e:	e030      	b.n	8004ba2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d113      	bne.n	8004b76 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b74:	e015      	b.n	8004ba2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b76:	f7fd febb 	bl	80028f0 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d803      	bhi.n	8004b8e <HAL_SPI_Transmit+0x20c>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_Transmit+0x212>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004ba0:	e029      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1c9      	bne.n	8004b40 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fbed 	bl	8005390 <SPI_EndRxTxTransaction>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e003      	b.n	8004bf6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c2c:	e0fb      	b.n	8004e26 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c36:	d112      	bne.n	8004c5e <HAL_SPI_Receive+0x56>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10e      	bne.n	8004c5e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2204      	movs	r2, #4
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8ef 	bl	8004e38 <HAL_SPI_TransmitReceive>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	e0e8      	b.n	8004e30 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_SPI_Receive+0x64>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0e1      	b.n	8004e30 <HAL_SPI_Receive+0x228>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c74:	f7fd fe3c 	bl	80028f0 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_Receive+0x7e>
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c8a:	e0cc      	b.n	8004e26 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2204      	movs	r2, #4
 8004c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfe:	2b40      	cmp	r3, #64	@ 0x40
 8004d00:	d007      	beq.n	8004d12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d16a      	bne.n	8004df0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d1a:	e032      	b.n	8004d82 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d115      	bne.n	8004d56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f103 020c 	add.w	r2, r3, #12
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	7812      	ldrb	r2, [r2, #0]
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d54:	e015      	b.n	8004d82 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d56:	f7fd fdcb 	bl	80028f0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d803      	bhi.n	8004d6e <HAL_SPI_Receive+0x166>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Receive+0x16c>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004d80:	e051      	b.n	8004e26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1c7      	bne.n	8004d1c <HAL_SPI_Receive+0x114>
 8004d8c:	e035      	b.n	8004dfa <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d113      	bne.n	8004dc4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da6:	b292      	uxth	r2, r2
 8004da8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	1c9a      	adds	r2, r3, #2
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dc2:	e015      	b.n	8004df0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc4:	f7fd fd94 	bl	80028f0 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d803      	bhi.n	8004ddc <HAL_SPI_Receive+0x1d4>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dda:	d102      	bne.n	8004de2 <HAL_SPI_Receive+0x1da>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004dee:	e01a      	b.n	8004e26 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1c9      	bne.n	8004d8e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fa60 	bl	80052c4 <SPI_EndRxTransaction>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
 8004e1c:	e003      	b.n	8004e26 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08c      	sub	sp, #48	@ 0x30
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e46:	2301      	movs	r3, #1
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x26>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e198      	b.n	8005190 <HAL_SPI_TransmitReceive+0x358>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e66:	f7fd fd43 	bl	80028f0 <HAL_GetTick>
 8004e6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e7c:	887b      	ldrh	r3, [r7, #2]
 8004e7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d00f      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x70>
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e8e:	d107      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x68>
 8004e98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d003      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ea6:	e16d      	b.n	8005184 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x82>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x82>
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ec0:	e160      	b.n	8005184 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d003      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2205      	movs	r2, #5
 8004ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	887a      	ldrh	r2, [r7, #2]
 8004ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	887a      	ldrh	r2, [r7, #2]
 8004eec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	887a      	ldrh	r2, [r7, #2]
 8004efe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	d007      	beq.n	8004f2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f32:	d17c      	bne.n	800502e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x10a>
 8004f3c:	8b7b      	ldrh	r3, [r7, #26]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d16a      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	881a      	ldrh	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f66:	e057      	b.n	8005018 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d11b      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x176>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d016      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x176>
 8004f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d113      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	881a      	ldrh	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d119      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x1b8>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d014      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ff0:	f7fd fc7e 	bl	80028f0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d80b      	bhi.n	8005018 <HAL_SPI_TransmitReceive+0x1e0>
 8005000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005006:	d007      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005016:	e0b5      	b.n	8005184 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1a2      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x130>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d19d      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x130>
 800502c:	e080      	b.n	8005130 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_SPI_TransmitReceive+0x204>
 8005036:	8b7b      	ldrh	r3, [r7, #26]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d16f      	bne.n	800511c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005062:	e05b      	b.n	800511c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d11c      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x274>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d017      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x274>
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d114      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d119      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x2b6>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d014      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ea:	2301      	movs	r3, #1
 80050ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050ee:	f7fd fbff 	bl	80028f0 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d803      	bhi.n	8005106 <HAL_SPI_TransmitReceive+0x2ce>
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005104:	d102      	bne.n	800510c <HAL_SPI_TransmitReceive+0x2d4>
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800511a:	e033      	b.n	8005184 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d19e      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x22c>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d199      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005132:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f92b 	bl	8005390 <SPI_EndRxTxTransaction>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800514c:	e01a      	b.n	8005184 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517a:	e003      	b.n	8005184 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800518c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005190:	4618      	mov	r0, r3
 8005192:	3730      	adds	r7, #48	@ 0x30
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051a6:	b2db      	uxtb	r3, r3
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c4:	f7fd fb94 	bl	80028f0 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d4:	f7fd fb8c 	bl	80028f0 <HAL_GetTick>
 80051d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051da:	4b39      	ldr	r3, [pc, #228]	@ (80052c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	015b      	lsls	r3, r3, #5
 80051e0:	0d1b      	lsrs	r3, r3, #20
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ea:	e054      	b.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051f2:	d050      	beq.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f4:	f7fd fb7c 	bl	80028f0 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	d902      	bls.n	800520a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d13d      	bne.n	8005286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005222:	d111      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800522c:	d004      	beq.n	8005238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005236:	d107      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005250:	d10f      	bne.n	8005272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e017      	b.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3b01      	subs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d19b      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000040 	.word	0x20000040

080052c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052d8:	d111      	bne.n	80052fe <SPI_EndRxTransaction+0x3a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e2:	d004      	beq.n	80052ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ec:	d107      	bne.n	80052fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005306:	d12a      	bne.n	800535e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005310:	d012      	beq.n	8005338 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	2180      	movs	r1, #128	@ 0x80
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff ff49 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02d      	beq.n	8005384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e026      	b.n	8005386 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	2101      	movs	r1, #1
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff ff36 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01a      	beq.n	8005384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e013      	b.n	8005386 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	2101      	movs	r1, #1
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ff23 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e000      	b.n	8005386 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2201      	movs	r2, #1
 80053a4:	2102      	movs	r1, #2
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff ff04 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e032      	b.n	8005428 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005430 <SPI_EndRxTxTransaction+0xa0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005434 <SPI_EndRxTxTransaction+0xa4>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	0d5b      	lsrs	r3, r3, #21
 80053ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053e0:	d112      	bne.n	8005408 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2180      	movs	r1, #128	@ 0x80
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff fee1 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d016      	beq.n	8005426 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e00f      	b.n	8005428 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	3b01      	subs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d0f2      	beq.n	8005408 <SPI_EndRxTxTransaction+0x78>
 8005422:	e000      	b.n	8005426 <SPI_EndRxTxTransaction+0x96>
        break;
 8005424:	bf00      	nop
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000040 	.word	0x20000040
 8005434:	165e9f81 	.word	0x165e9f81

08005438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e041      	b.n	80054ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc ff26 	bl	80022b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f000 fbd2 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d001      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e04e      	b.n	800558e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a23      	ldr	r2, [pc, #140]	@ (800559c <HAL_TIM_Base_Start_IT+0xc4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d022      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800551a:	d01d      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1f      	ldr	r2, [pc, #124]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1e      	ldr	r2, [pc, #120]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1c      	ldr	r2, [pc, #112]	@ (80055a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1b      	ldr	r2, [pc, #108]	@ (80055ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x80>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a18      	ldr	r2, [pc, #96]	@ (80055b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d111      	bne.n	800557c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b06      	cmp	r3, #6
 8005568:	d010      	beq.n	800558c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557a:	e007      	b.n	800558c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40001800 	.word	0x40001800

080055b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6a1a      	ldr	r2, [r3, #32]
 80055d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10f      	bne.n	8005600 <HAL_TIM_Base_Stop_IT+0x48>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_Base_Stop_IT+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e041      	b.n	80056ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f839 	bl	80056b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f000 fae3 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d020      	beq.n	800572c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01b      	beq.n	800572c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0202 	mvn.w	r2, #2
 80056fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa65 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa57 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fa68 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d020      	beq.n	8005778 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01b      	beq.n	8005778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0204 	mvn.w	r2, #4
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa3f 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa31 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa42 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d020      	beq.n	80057c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01b      	beq.n	80057c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0208 	mvn.w	r2, #8
 8005794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2204      	movs	r2, #4
 800579a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa19 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa0b 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fa1c 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01b      	beq.n	8005810 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0210 	mvn.w	r2, #16
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2208      	movs	r2, #8
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9f3 	bl	8005be2 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9e5 	bl	8005bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f9f6 	bl	8005bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0201 	mvn.w	r2, #1
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9c3 	bl	8005bba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fe6c 	bl	8006530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9c7 	bl	8005c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0220 	mvn.w	r2, #32
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fe3e 	bl	800651c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0ae      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b0c      	cmp	r3, #12
 80058d2:	f200 809f 	bhi.w	8005a14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058d6:	a201      	add	r2, pc, #4	@ (adr r2, 80058dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005a15 	.word	0x08005a15
 80058e4:	08005a15 	.word	0x08005a15
 80058e8:	08005a15 	.word	0x08005a15
 80058ec:	08005951 	.word	0x08005951
 80058f0:	08005a15 	.word	0x08005a15
 80058f4:	08005a15 	.word	0x08005a15
 80058f8:	08005a15 	.word	0x08005a15
 80058fc:	08005993 	.word	0x08005993
 8005900:	08005a15 	.word	0x08005a15
 8005904:	08005a15 	.word	0x08005a15
 8005908:	08005a15 	.word	0x08005a15
 800590c:	080059d3 	.word	0x080059d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fa2e 	bl	8005d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0204 	bic.w	r2, r2, #4
 800593a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6999      	ldr	r1, [r3, #24]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	619a      	str	r2, [r3, #24]
      break;
 800594e:	e064      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fa7e 	bl	8005e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800596a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800597a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6999      	ldr	r1, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	619a      	str	r2, [r3, #24]
      break;
 8005990:	e043      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fad3 	bl	8005f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0208 	orr.w	r2, r2, #8
 80059ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0204 	bic.w	r2, r2, #4
 80059bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69d9      	ldr	r1, [r3, #28]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	61da      	str	r2, [r3, #28]
      break;
 80059d0:	e023      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fb27 	bl	800602c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69d9      	ldr	r1, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	021a      	lsls	r2, r3, #8
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	61da      	str	r2, [r3, #28]
      break;
 8005a12:	e002      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
      break;
 8005a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIM_ConfigClockSource+0x1c>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e0b4      	b.n	8005bb2 <HAL_TIM_ConfigClockSource+0x186>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a80:	d03e      	beq.n	8005b00 <HAL_TIM_ConfigClockSource+0xd4>
 8005a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a86:	f200 8087 	bhi.w	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8e:	f000 8086 	beq.w	8005b9e <HAL_TIM_ConfigClockSource+0x172>
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a96:	d87f      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b70      	cmp	r3, #112	@ 0x70
 8005a9a:	d01a      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a9c:	2b70      	cmp	r3, #112	@ 0x70
 8005a9e:	d87b      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b60      	cmp	r3, #96	@ 0x60
 8005aa2:	d050      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x11a>
 8005aa4:	2b60      	cmp	r3, #96	@ 0x60
 8005aa6:	d877      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b50      	cmp	r3, #80	@ 0x50
 8005aaa:	d03c      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0xfa>
 8005aac:	2b50      	cmp	r3, #80	@ 0x50
 8005aae:	d873      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b40      	cmp	r3, #64	@ 0x40
 8005ab2:	d058      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x13a>
 8005ab4:	2b40      	cmp	r3, #64	@ 0x40
 8005ab6:	d86f      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b30      	cmp	r3, #48	@ 0x30
 8005aba:	d064      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005abc:	2b30      	cmp	r3, #48	@ 0x30
 8005abe:	d86b      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d060      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d867      	bhi.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d05c      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d05a      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x15a>
 8005ad0:	e062      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae2:	f000 fb73 	bl	80061cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	609a      	str	r2, [r3, #8]
      break;
 8005afe:	e04f      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b10:	f000 fb5c 	bl	80061cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b22:	609a      	str	r2, [r3, #8]
      break;
 8005b24:	e03c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b32:	461a      	mov	r2, r3
 8005b34:	f000 fad0 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2150      	movs	r1, #80	@ 0x50
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fb29 	bl	8006196 <TIM_ITRx_SetConfig>
      break;
 8005b44:	e02c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b52:	461a      	mov	r2, r3
 8005b54:	f000 faef 	bl	8006136 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2160      	movs	r1, #96	@ 0x60
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fb19 	bl	8006196 <TIM_ITRx_SetConfig>
      break;
 8005b64:	e01c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b72:	461a      	mov	r2, r3
 8005b74:	f000 fab0 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2140      	movs	r1, #64	@ 0x40
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fb09 	bl	8006196 <TIM_ITRx_SetConfig>
      break;
 8005b84:	e00c      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f000 fb00 	bl	8006196 <TIM_ITRx_SetConfig>
      break;
 8005b96:	e003      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9c:	e000      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a46      	ldr	r2, [pc, #280]	@ (8005d4c <TIM_Base_SetConfig+0x12c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d013      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3e:	d00f      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a43      	ldr	r2, [pc, #268]	@ (8005d50 <TIM_Base_SetConfig+0x130>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00b      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a42      	ldr	r2, [pc, #264]	@ (8005d54 <TIM_Base_SetConfig+0x134>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a41      	ldr	r2, [pc, #260]	@ (8005d58 <TIM_Base_SetConfig+0x138>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a40      	ldr	r2, [pc, #256]	@ (8005d5c <TIM_Base_SetConfig+0x13c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d108      	bne.n	8005c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a35      	ldr	r2, [pc, #212]	@ (8005d4c <TIM_Base_SetConfig+0x12c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d02b      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c80:	d027      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a32      	ldr	r2, [pc, #200]	@ (8005d50 <TIM_Base_SetConfig+0x130>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d023      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a31      	ldr	r2, [pc, #196]	@ (8005d54 <TIM_Base_SetConfig+0x134>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01f      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a30      	ldr	r2, [pc, #192]	@ (8005d58 <TIM_Base_SetConfig+0x138>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01b      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8005d5c <TIM_Base_SetConfig+0x13c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d017      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8005d60 <TIM_Base_SetConfig+0x140>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2d      	ldr	r2, [pc, #180]	@ (8005d64 <TIM_Base_SetConfig+0x144>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00f      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d68 <TIM_Base_SetConfig+0x148>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8005d6c <TIM_Base_SetConfig+0x14c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8005d70 <TIM_Base_SetConfig+0x150>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a29      	ldr	r2, [pc, #164]	@ (8005d74 <TIM_Base_SetConfig+0x154>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d108      	bne.n	8005ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a10      	ldr	r2, [pc, #64]	@ (8005d4c <TIM_Base_SetConfig+0x12c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0xf8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a12      	ldr	r2, [pc, #72]	@ (8005d5c <TIM_Base_SetConfig+0x13c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d103      	bne.n	8005d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d105      	bne.n	8005d3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f023 0201 	bic.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40000400 	.word	0x40000400
 8005d54:	40000800 	.word	0x40000800
 8005d58:	40000c00 	.word	0x40000c00
 8005d5c:	40010400 	.word	0x40010400
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800
 8005d6c:	40001800 	.word	0x40001800
 8005d70:	40001c00 	.word	0x40001c00
 8005d74:	40002000 	.word	0x40002000

08005d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f023 0201 	bic.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 0302 	bic.w	r3, r3, #2
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a20      	ldr	r2, [pc, #128]	@ (8005e50 <TIM_OC1_SetConfig+0xd8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC1_SetConfig+0x64>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e54 <TIM_OC1_SetConfig+0xdc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d10c      	bne.n	8005df6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f023 0308 	bic.w	r3, r3, #8
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 0304 	bic.w	r3, r3, #4
 8005df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a15      	ldr	r2, [pc, #84]	@ (8005e50 <TIM_OC1_SetConfig+0xd8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_OC1_SetConfig+0x8e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a14      	ldr	r2, [pc, #80]	@ (8005e54 <TIM_OC1_SetConfig+0xdc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d111      	bne.n	8005e2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40010400 	.word	0x40010400

08005e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f023 0210 	bic.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 0320 	bic.w	r3, r3, #32
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a22      	ldr	r2, [pc, #136]	@ (8005f3c <TIM_OC2_SetConfig+0xe4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_OC2_SetConfig+0x68>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a21      	ldr	r2, [pc, #132]	@ (8005f40 <TIM_OC2_SetConfig+0xe8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10d      	bne.n	8005edc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a17      	ldr	r2, [pc, #92]	@ (8005f3c <TIM_OC2_SetConfig+0xe4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC2_SetConfig+0x94>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a16      	ldr	r2, [pc, #88]	@ (8005f40 <TIM_OC2_SetConfig+0xe8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d113      	bne.n	8005f14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40010400 	.word	0x40010400

08005f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a21      	ldr	r2, [pc, #132]	@ (8006024 <TIM_OC3_SetConfig+0xe0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC3_SetConfig+0x66>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a20      	ldr	r2, [pc, #128]	@ (8006028 <TIM_OC3_SetConfig+0xe4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10d      	bne.n	8005fc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a16      	ldr	r2, [pc, #88]	@ (8006024 <TIM_OC3_SetConfig+0xe0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC3_SetConfig+0x92>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a15      	ldr	r2, [pc, #84]	@ (8006028 <TIM_OC3_SetConfig+0xe4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d113      	bne.n	8005ffe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400

0800602c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	031b      	lsls	r3, r3, #12
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a12      	ldr	r2, [pc, #72]	@ (80060d0 <TIM_OC4_SetConfig+0xa4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC4_SetConfig+0x68>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a11      	ldr	r2, [pc, #68]	@ (80060d4 <TIM_OC4_SetConfig+0xa8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d109      	bne.n	80060a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800609a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	019b      	lsls	r3, r3, #6
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40010400 	.word	0x40010400

080060d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 030a 	bic.w	r3, r3, #10
 8006114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006136:	b480      	push	{r7}
 8006138:	b087      	sub	sp, #28
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f023 0210 	bic.w	r2, r3, #16
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006172:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f043 0307 	orr.w	r3, r3, #7
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	609a      	str	r2, [r3, #8]
}
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	021a      	lsls	r2, r3, #8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	609a      	str	r2, [r3, #8]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <HAL_TIMEx_PWMN_Start+0x24>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	bf14      	ite	ne
 8006228:	2301      	movne	r3, #1
 800622a:	2300      	moveq	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	e022      	b.n	8006276 <HAL_TIMEx_PWMN_Start+0x6a>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b04      	cmp	r3, #4
 8006234:	d109      	bne.n	800624a <HAL_TIMEx_PWMN_Start+0x3e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	bf14      	ite	ne
 8006242:	2301      	movne	r3, #1
 8006244:	2300      	moveq	r3, #0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	e015      	b.n	8006276 <HAL_TIMEx_PWMN_Start+0x6a>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d109      	bne.n	8006264 <HAL_TIMEx_PWMN_Start+0x58>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	e008      	b.n	8006276 <HAL_TIMEx_PWMN_Start+0x6a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e06d      	b.n	800635a <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <HAL_TIMEx_PWMN_Start+0x82>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800628c:	e013      	b.n	80062b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b04      	cmp	r3, #4
 8006292:	d104      	bne.n	800629e <HAL_TIMEx_PWMN_Start+0x92>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800629c:	e00b      	b.n	80062b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d104      	bne.n	80062ae <HAL_TIMEx_PWMN_Start+0xa2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ac:	e003      	b.n	80062b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2204      	movs	r2, #4
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f940 	bl	8006544 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a22      	ldr	r2, [pc, #136]	@ (8006364 <HAL_TIMEx_PWMN_Start+0x158>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <HAL_TIMEx_PWMN_Start+0x118>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	d01d      	beq.n	8006324 <HAL_TIMEx_PWMN_Start+0x118>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006368 <HAL_TIMEx_PWMN_Start+0x15c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <HAL_TIMEx_PWMN_Start+0x118>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1d      	ldr	r2, [pc, #116]	@ (800636c <HAL_TIMEx_PWMN_Start+0x160>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_TIMEx_PWMN_Start+0x118>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <HAL_TIMEx_PWMN_Start+0x164>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <HAL_TIMEx_PWMN_Start+0x118>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <HAL_TIMEx_PWMN_Start+0x168>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_TIMEx_PWMN_Start+0x118>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a18      	ldr	r2, [pc, #96]	@ (8006378 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIMEx_PWMN_Start+0x118>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a17      	ldr	r2, [pc, #92]	@ (800637c <HAL_TIMEx_PWMN_Start+0x170>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d111      	bne.n	8006348 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b06      	cmp	r3, #6
 8006334:	d010      	beq.n	8006358 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0201 	orr.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006346:	e007      	b.n	8006358 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40010000 	.word	0x40010000
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800
 8006370:	40000c00 	.word	0x40000c00
 8006374:	40010400 	.word	0x40010400
 8006378:	40014000 	.word	0x40014000
 800637c:	40001800 	.word	0x40001800

08006380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006394:	2302      	movs	r3, #2
 8006396:	e05a      	b.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a21      	ldr	r2, [pc, #132]	@ (800645c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d022      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e4:	d01d      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d018      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a18      	ldr	r2, [pc, #96]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a15      	ldr	r2, [pc, #84]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d10c      	bne.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	40014000 	.word	0x40014000
 8006474:	40001800 	.word	0x40001800

08006478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006490:	2302      	movs	r3, #2
 8006492:	e03d      	b.n	8006510 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	2204      	movs	r2, #4
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6a1a      	ldr	r2, [r3, #32]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	43db      	mvns	r3, r3
 8006566:	401a      	ands	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1a      	ldr	r2, [r3, #32]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	fa01 f303 	lsl.w	r3, r1, r3
 800657c:	431a      	orrs	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	621a      	str	r2, [r3, #32]
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e042      	b.n	8006626 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fb ffff 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2224      	movs	r2, #36	@ 0x24
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fdcc 	bl	8007170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006606:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	@ 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b20      	cmp	r3, #32
 8006648:	d156      	bne.n	80066f8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_UART_Transmit_DMA+0x26>
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e04f      	b.n	80066fa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	88fa      	ldrh	r2, [r7, #6]
 8006664:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	88fa      	ldrh	r2, [r7, #6]
 800666a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2221      	movs	r2, #33	@ 0x21
 8006676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667e:	4a21      	ldr	r2, [pc, #132]	@ (8006704 <HAL_UART_Transmit_DMA+0xd4>)
 8006680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006686:	4a20      	ldr	r2, [pc, #128]	@ (8006708 <HAL_UART_Transmit_DMA+0xd8>)
 8006688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668e:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <HAL_UART_Transmit_DMA+0xdc>)
 8006690:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006696:	2200      	movs	r2, #0
 8006698:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800669a:	f107 0308 	add.w	r3, r7, #8
 800669e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	6819      	ldr	r1, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3304      	adds	r3, #4
 80066ae:	461a      	mov	r2, r3
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	f7fc fd7f 	bl	80031b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3314      	adds	r3, #20
 80066c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	617b      	str	r3, [r7, #20]
   return(result);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80066e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6a39      	ldr	r1, [r7, #32]
 80066e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3730      	adds	r7, #48	@ 0x30
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08006c9d 	.word	0x08006c9d
 8006708:	08006d37 	.word	0x08006d37
 800670c:	08006d53 	.word	0x08006d53

08006710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b0ba      	sub	sp, #232	@ 0xe8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006736:	2300      	movs	r3, #0
 8006738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800673c:	2300      	movs	r3, #0
 800673e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800674e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10f      	bne.n	8006776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <HAL_UART_IRQHandler+0x66>
 8006762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fc40 	bl	8006ff4 <UART_Receive_IT>
      return;
 8006774:	e25b      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80de 	beq.w	800693c <HAL_UART_IRQHandler+0x22c>
 8006780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006790:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80d1 	beq.w	800693c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_UART_IRQHandler+0xae>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b6:	f043 0201 	orr.w	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_UART_IRQHandler+0xd2>
 80067ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067da:	f043 0202 	orr.w	r2, r3, #2
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <HAL_UART_IRQHandler+0xf6>
 80067ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	f043 0204 	orr.w	r2, r3, #4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d011      	beq.n	8006836 <HAL_UART_IRQHandler+0x126>
 8006812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800681e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f043 0208 	orr.w	r2, r3, #8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 81f2 	beq.w	8006c24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_UART_IRQHandler+0x14e>
 800684c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fbcb 	bl	8006ff4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b40      	cmp	r3, #64	@ 0x40
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <HAL_UART_IRQHandler+0x17a>
 8006882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d04f      	beq.n	800692a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fad3 	bl	8006e36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689a:	2b40      	cmp	r3, #64	@ 0x40
 800689c:	d141      	bne.n	8006922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3314      	adds	r3, #20
 80068a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3314      	adds	r3, #20
 80068c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1d9      	bne.n	800689e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d013      	beq.n	800691a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f6:	4a7e      	ldr	r2, [pc, #504]	@ (8006af0 <HAL_UART_IRQHandler+0x3e0>)
 80068f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fc fd20 	bl	8003344 <HAL_DMA_Abort_IT>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006918:	e00e      	b.n	8006938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f9a8 	bl	8006c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e00a      	b.n	8006938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f9a4 	bl	8006c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006928:	e006      	b.n	8006938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f9a0 	bl	8006c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006936:	e175      	b.n	8006c24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	bf00      	nop
    return;
 800693a:	e173      	b.n	8006c24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006940:	2b01      	cmp	r3, #1
 8006942:	f040 814f 	bne.w	8006be4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8148 	beq.w	8006be4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 8141 	beq.w	8006be4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006982:	2b40      	cmp	r3, #64	@ 0x40
 8006984:	f040 80b6 	bne.w	8006af4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8145 	beq.w	8006c28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069a6:	429a      	cmp	r2, r3
 80069a8:	f080 813e 	bcs.w	8006c28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069be:	f000 8088 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80069ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1d9      	bne.n	80069c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e1      	bne.n	8006a0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3314      	adds	r3, #20
 8006a50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e3      	bne.n	8006a4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa2:	f023 0310 	bic.w	r3, r3, #16
 8006aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ab4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ab6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e3      	bne.n	8006a90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fc fbc9 	bl	8003264 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f8cb 	bl	8006c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aee:	e09b      	b.n	8006c28 <HAL_UART_IRQHandler+0x518>
 8006af0:	08006efd 	.word	0x08006efd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 808e 	beq.w	8006c2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8089 	beq.w	8006c2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e3      	bne.n	8006b1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3314      	adds	r3, #20
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	623b      	str	r3, [r7, #32]
   return(result);
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3314      	adds	r3, #20
 8006b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b76:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e3      	bne.n	8006b52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0310 	bic.w	r3, r3, #16
 8006bae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	69b9      	ldr	r1, [r7, #24]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e3      	bne.n	8006b98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f851 	bl	8006c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006be2:	e023      	b.n	8006c2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d009      	beq.n	8006c04 <HAL_UART_IRQHandler+0x4f4>
 8006bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f991 	bl	8006f24 <UART_Transmit_IT>
    return;
 8006c02:	e014      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00e      	beq.n	8006c2e <HAL_UART_IRQHandler+0x51e>
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f9d1 	bl	8006fc4 <UART_EndTransmit_IT>
    return;
 8006c22:	e004      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
    return;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_UART_IRQHandler+0x51e>
      return;
 8006c2c:	bf00      	nop
  }
}
 8006c2e:	37e8      	adds	r7, #232	@ 0xe8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b090      	sub	sp, #64	@ 0x40
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d137      	bne.n	8006d28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cba:	2200      	movs	r2, #0
 8006cbc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3314      	adds	r3, #20
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cde:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e5      	bne.n	8006cbe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	330c      	adds	r3, #12
 8006cf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d12:	61fa      	str	r2, [r7, #28]
 8006d14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	69b9      	ldr	r1, [r7, #24]
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e5      	bne.n	8006cf2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d26:	e002      	b.n	8006d2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006d2a:	f7ff ff83 	bl	8006c34 <HAL_UART_TxCpltCallback>
}
 8006d2e:	bf00      	nop
 8006d30:	3740      	adds	r7, #64	@ 0x40
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff ff7f 	bl	8006c48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6e:	2b80      	cmp	r3, #128	@ 0x80
 8006d70:	bf0c      	ite	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	2300      	movne	r3, #0
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b21      	cmp	r3, #33	@ 0x21
 8006d84:	d108      	bne.n	8006d98 <UART_DMAError+0x46>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f000 f827 	bl	8006de6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	bf0c      	ite	eq
 8006da6:	2301      	moveq	r3, #1
 8006da8:	2300      	movne	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b22      	cmp	r3, #34	@ 0x22
 8006db8:	d108      	bne.n	8006dcc <UART_DMAError+0x7a>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 f835 	bl	8006e36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd0:	f043 0210 	orr.w	r2, r3, #16
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd8:	68b8      	ldr	r0, [r7, #8]
 8006dda:	f7ff ff49 	bl	8006c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b089      	sub	sp, #36	@ 0x24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	61ba      	str	r2, [r7, #24]
 8006e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6979      	ldr	r1, [r7, #20]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e5      	bne.n	8006dee <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006e2a:	bf00      	nop
 8006e2c:	3724      	adds	r7, #36	@ 0x24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b095      	sub	sp, #84	@ 0x54
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e5      	bne.n	8006e3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3314      	adds	r3, #20
 8006e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3314      	adds	r3, #20
 8006e90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e5      	bne.n	8006e72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d119      	bne.n	8006ee2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f023 0310 	bic.w	r3, r3, #16
 8006ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	330c      	adds	r3, #12
 8006ecc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ece:	61ba      	str	r2, [r7, #24]
 8006ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	613b      	str	r3, [r7, #16]
   return(result);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e5      	bne.n	8006eae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ef0:	bf00      	nop
 8006ef2:	3754      	adds	r7, #84	@ 0x54
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f7ff feaa 	bl	8006c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b21      	cmp	r3, #33	@ 0x21
 8006f36:	d13e      	bne.n	8006fb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f40:	d114      	bne.n	8006f6c <UART_Transmit_IT+0x48>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d110      	bne.n	8006f6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	1c9a      	adds	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	621a      	str	r2, [r3, #32]
 8006f6a:	e008      	b.n	8006f7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	1c59      	adds	r1, r3, #1
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6211      	str	r1, [r2, #32]
 8006f76:	781a      	ldrb	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10f      	bne.n	8006fb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fa0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fe25 	bl	8006c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08c      	sub	sp, #48	@ 0x30
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b22      	cmp	r3, #34	@ 0x22
 8007006:	f040 80ae 	bne.w	8007166 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007012:	d117      	bne.n	8007044 <UART_Receive_IT+0x50>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d113      	bne.n	8007044 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007032:	b29a      	uxth	r2, r3
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	1c9a      	adds	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	629a      	str	r2, [r3, #40]	@ 0x28
 8007042:	e026      	b.n	8007092 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007056:	d007      	beq.n	8007068 <UART_Receive_IT+0x74>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <UART_Receive_IT+0x82>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e008      	b.n	8007088 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007082:	b2da      	uxtb	r2, r3
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29b      	uxth	r3, r3
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	4619      	mov	r1, r3
 80070a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d15d      	bne.n	8007162 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0220 	bic.w	r2, r2, #32
 80070b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	695a      	ldr	r2, [r3, #20]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0201 	bic.w	r2, r2, #1
 80070d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d135      	bne.n	8007158 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	613b      	str	r3, [r7, #16]
   return(result);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f023 0310 	bic.w	r3, r3, #16
 8007108:	627b      	str	r3, [r7, #36]	@ 0x24
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	330c      	adds	r3, #12
 8007110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007112:	623a      	str	r2, [r7, #32]
 8007114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	69f9      	ldr	r1, [r7, #28]
 8007118:	6a3a      	ldr	r2, [r7, #32]
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e5      	bne.n	80070f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b10      	cmp	r3, #16
 8007132:	d10a      	bne.n	800714a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fd97 	bl	8006c84 <HAL_UARTEx_RxEventCallback>
 8007156:	e002      	b.n	800715e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff fd7f 	bl	8006c5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	e002      	b.n	8007168 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e000      	b.n	8007168 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007166:	2302      	movs	r3, #2
  }
}
 8007168:	4618      	mov	r0, r3
 800716a:	3730      	adds	r7, #48	@ 0x30
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007174:	b0c0      	sub	sp, #256	@ 0x100
 8007176:	af00      	add	r7, sp, #0
 8007178:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718c:	68d9      	ldr	r1, [r3, #12]
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	ea40 0301 	orr.w	r3, r0, r1
 8007198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071c8:	f021 010c 	bic.w	r1, r1, #12
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071d6:	430b      	orrs	r3, r1
 80071d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ea:	6999      	ldr	r1, [r3, #24]
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	ea40 0301 	orr.w	r3, r0, r1
 80071f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b8f      	ldr	r3, [pc, #572]	@ (800743c <UART_SetConfig+0x2cc>)
 8007200:	429a      	cmp	r2, r3
 8007202:	d005      	beq.n	8007210 <UART_SetConfig+0xa0>
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b8d      	ldr	r3, [pc, #564]	@ (8007440 <UART_SetConfig+0x2d0>)
 800720c:	429a      	cmp	r2, r3
 800720e:	d104      	bne.n	800721a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007210:	f7fc fe4c 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8007214:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007218:	e003      	b.n	8007222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800721a:	f7fc fe33 	bl	8003e84 <HAL_RCC_GetPCLK1Freq>
 800721e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800722c:	f040 810c 	bne.w	8007448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007234:	2200      	movs	r2, #0
 8007236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800723a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800723e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	1891      	adds	r1, r2, r2
 8007248:	65b9      	str	r1, [r7, #88]	@ 0x58
 800724a:	415b      	adcs	r3, r3
 800724c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800724e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007252:	4621      	mov	r1, r4
 8007254:	eb12 0801 	adds.w	r8, r2, r1
 8007258:	4629      	mov	r1, r5
 800725a:	eb43 0901 	adc.w	r9, r3, r1
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800726a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800726e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007272:	4690      	mov	r8, r2
 8007274:	4699      	mov	r9, r3
 8007276:	4623      	mov	r3, r4
 8007278:	eb18 0303 	adds.w	r3, r8, r3
 800727c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007280:	462b      	mov	r3, r5
 8007282:	eb49 0303 	adc.w	r3, r9, r3
 8007286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007296:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800729a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800729e:	460b      	mov	r3, r1
 80072a0:	18db      	adds	r3, r3, r3
 80072a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80072a4:	4613      	mov	r3, r2
 80072a6:	eb42 0303 	adc.w	r3, r2, r3
 80072aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072b4:	f7f9 fba4 	bl	8000a00 <__aeabi_uldivmod>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4b61      	ldr	r3, [pc, #388]	@ (8007444 <UART_SetConfig+0x2d4>)
 80072be:	fba3 2302 	umull	r2, r3, r3, r2
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	011c      	lsls	r4, r3, #4
 80072c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	1891      	adds	r1, r2, r2
 80072de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072e0:	415b      	adcs	r3, r3
 80072e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072e8:	4641      	mov	r1, r8
 80072ea:	eb12 0a01 	adds.w	sl, r2, r1
 80072ee:	4649      	mov	r1, r9
 80072f0:	eb43 0b01 	adc.w	fp, r3, r1
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007308:	4692      	mov	sl, r2
 800730a:	469b      	mov	fp, r3
 800730c:	4643      	mov	r3, r8
 800730e:	eb1a 0303 	adds.w	r3, sl, r3
 8007312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007316:	464b      	mov	r3, r9
 8007318:	eb4b 0303 	adc.w	r3, fp, r3
 800731c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800732c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007334:	460b      	mov	r3, r1
 8007336:	18db      	adds	r3, r3, r3
 8007338:	643b      	str	r3, [r7, #64]	@ 0x40
 800733a:	4613      	mov	r3, r2
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	647b      	str	r3, [r7, #68]	@ 0x44
 8007342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800734a:	f7f9 fb59 	bl	8000a00 <__aeabi_uldivmod>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4611      	mov	r1, r2
 8007354:	4b3b      	ldr	r3, [pc, #236]	@ (8007444 <UART_SetConfig+0x2d4>)
 8007356:	fba3 2301 	umull	r2, r3, r3, r1
 800735a:	095b      	lsrs	r3, r3, #5
 800735c:	2264      	movs	r2, #100	@ 0x64
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	1acb      	subs	r3, r1, r3
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800736a:	4b36      	ldr	r3, [pc, #216]	@ (8007444 <UART_SetConfig+0x2d4>)
 800736c:	fba3 2302 	umull	r2, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007378:	441c      	add	r4, r3
 800737a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800737e:	2200      	movs	r2, #0
 8007380:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007384:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800738c:	4642      	mov	r2, r8
 800738e:	464b      	mov	r3, r9
 8007390:	1891      	adds	r1, r2, r2
 8007392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007394:	415b      	adcs	r3, r3
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800739c:	4641      	mov	r1, r8
 800739e:	1851      	adds	r1, r2, r1
 80073a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80073a2:	4649      	mov	r1, r9
 80073a4:	414b      	adcs	r3, r1
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073b4:	4659      	mov	r1, fp
 80073b6:	00cb      	lsls	r3, r1, #3
 80073b8:	4651      	mov	r1, sl
 80073ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073be:	4651      	mov	r1, sl
 80073c0:	00ca      	lsls	r2, r1, #3
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	4642      	mov	r2, r8
 80073ca:	189b      	adds	r3, r3, r2
 80073cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073d0:	464b      	mov	r3, r9
 80073d2:	460a      	mov	r2, r1
 80073d4:	eb42 0303 	adc.w	r3, r2, r3
 80073d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073f0:	460b      	mov	r3, r1
 80073f2:	18db      	adds	r3, r3, r3
 80073f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f6:	4613      	mov	r3, r2
 80073f8:	eb42 0303 	adc.w	r3, r2, r3
 80073fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007406:	f7f9 fafb 	bl	8000a00 <__aeabi_uldivmod>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <UART_SetConfig+0x2d4>)
 8007410:	fba3 1302 	umull	r1, r3, r3, r2
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	2164      	movs	r1, #100	@ 0x64
 8007418:	fb01 f303 	mul.w	r3, r1, r3
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	3332      	adds	r3, #50	@ 0x32
 8007422:	4a08      	ldr	r2, [pc, #32]	@ (8007444 <UART_SetConfig+0x2d4>)
 8007424:	fba2 2303 	umull	r2, r3, r2, r3
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	f003 0207 	and.w	r2, r3, #7
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4422      	add	r2, r4
 8007436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007438:	e106      	b.n	8007648 <UART_SetConfig+0x4d8>
 800743a:	bf00      	nop
 800743c:	40011000 	.word	0x40011000
 8007440:	40011400 	.word	0x40011400
 8007444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744c:	2200      	movs	r2, #0
 800744e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007452:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800745a:	4642      	mov	r2, r8
 800745c:	464b      	mov	r3, r9
 800745e:	1891      	adds	r1, r2, r2
 8007460:	6239      	str	r1, [r7, #32]
 8007462:	415b      	adcs	r3, r3
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24
 8007466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800746a:	4641      	mov	r1, r8
 800746c:	1854      	adds	r4, r2, r1
 800746e:	4649      	mov	r1, r9
 8007470:	eb43 0501 	adc.w	r5, r3, r1
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	00eb      	lsls	r3, r5, #3
 800747e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007482:	00e2      	lsls	r2, r4, #3
 8007484:	4614      	mov	r4, r2
 8007486:	461d      	mov	r5, r3
 8007488:	4643      	mov	r3, r8
 800748a:	18e3      	adds	r3, r4, r3
 800748c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007490:	464b      	mov	r3, r9
 8007492:	eb45 0303 	adc.w	r3, r5, r3
 8007496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074b6:	4629      	mov	r1, r5
 80074b8:	008b      	lsls	r3, r1, #2
 80074ba:	4621      	mov	r1, r4
 80074bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c0:	4621      	mov	r1, r4
 80074c2:	008a      	lsls	r2, r1, #2
 80074c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074c8:	f7f9 fa9a 	bl	8000a00 <__aeabi_uldivmod>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4b60      	ldr	r3, [pc, #384]	@ (8007654 <UART_SetConfig+0x4e4>)
 80074d2:	fba3 2302 	umull	r2, r3, r3, r2
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	011c      	lsls	r4, r3, #4
 80074da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	1891      	adds	r1, r2, r2
 80074f2:	61b9      	str	r1, [r7, #24]
 80074f4:	415b      	adcs	r3, r3
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074fc:	4641      	mov	r1, r8
 80074fe:	1851      	adds	r1, r2, r1
 8007500:	6139      	str	r1, [r7, #16]
 8007502:	4649      	mov	r1, r9
 8007504:	414b      	adcs	r3, r1
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007514:	4659      	mov	r1, fp
 8007516:	00cb      	lsls	r3, r1, #3
 8007518:	4651      	mov	r1, sl
 800751a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751e:	4651      	mov	r1, sl
 8007520:	00ca      	lsls	r2, r1, #3
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	4603      	mov	r3, r0
 8007528:	4642      	mov	r2, r8
 800752a:	189b      	adds	r3, r3, r2
 800752c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007530:	464b      	mov	r3, r9
 8007532:	460a      	mov	r2, r1
 8007534:	eb42 0303 	adc.w	r3, r2, r3
 8007538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007546:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007554:	4649      	mov	r1, r9
 8007556:	008b      	lsls	r3, r1, #2
 8007558:	4641      	mov	r1, r8
 800755a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800755e:	4641      	mov	r1, r8
 8007560:	008a      	lsls	r2, r1, #2
 8007562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007566:	f7f9 fa4b 	bl	8000a00 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4611      	mov	r1, r2
 8007570:	4b38      	ldr	r3, [pc, #224]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007572:	fba3 2301 	umull	r2, r3, r3, r1
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	2264      	movs	r2, #100	@ 0x64
 800757a:	fb02 f303 	mul.w	r3, r2, r3
 800757e:	1acb      	subs	r3, r1, r3
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	3332      	adds	r3, #50	@ 0x32
 8007584:	4a33      	ldr	r2, [pc, #204]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007590:	441c      	add	r4, r3
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007596:	2200      	movs	r2, #0
 8007598:	673b      	str	r3, [r7, #112]	@ 0x70
 800759a:	677a      	str	r2, [r7, #116]	@ 0x74
 800759c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	1891      	adds	r1, r2, r2
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	415b      	adcs	r3, r3
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075b0:	4641      	mov	r1, r8
 80075b2:	1851      	adds	r1, r2, r1
 80075b4:	6039      	str	r1, [r7, #0]
 80075b6:	4649      	mov	r1, r9
 80075b8:	414b      	adcs	r3, r1
 80075ba:	607b      	str	r3, [r7, #4]
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075c8:	4659      	mov	r1, fp
 80075ca:	00cb      	lsls	r3, r1, #3
 80075cc:	4651      	mov	r1, sl
 80075ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d2:	4651      	mov	r1, sl
 80075d4:	00ca      	lsls	r2, r1, #3
 80075d6:	4610      	mov	r0, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	4642      	mov	r2, r8
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075e2:	464b      	mov	r3, r9
 80075e4:	460a      	mov	r2, r1
 80075e6:	eb42 0303 	adc.w	r3, r2, r3
 80075ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007604:	4649      	mov	r1, r9
 8007606:	008b      	lsls	r3, r1, #2
 8007608:	4641      	mov	r1, r8
 800760a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800760e:	4641      	mov	r1, r8
 8007610:	008a      	lsls	r2, r1, #2
 8007612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007616:	f7f9 f9f3 	bl	8000a00 <__aeabi_uldivmod>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007620:	fba3 1302 	umull	r1, r3, r3, r2
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	2164      	movs	r1, #100	@ 0x64
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	3332      	adds	r3, #50	@ 0x32
 8007632:	4a08      	ldr	r2, [pc, #32]	@ (8007654 <UART_SetConfig+0x4e4>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	f003 020f 	and.w	r2, r3, #15
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4422      	add	r2, r4
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800764e:	46bd      	mov	sp, r7
 8007650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007654:	51eb851f 	.word	0x51eb851f

08007658 <memset>:
 8007658:	4402      	add	r2, r0
 800765a:	4603      	mov	r3, r0
 800765c:	4293      	cmp	r3, r2
 800765e:	d100      	bne.n	8007662 <memset+0xa>
 8007660:	4770      	bx	lr
 8007662:	f803 1b01 	strb.w	r1, [r3], #1
 8007666:	e7f9      	b.n	800765c <memset+0x4>

08007668 <__libc_init_array>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	4d0d      	ldr	r5, [pc, #52]	@ (80076a0 <__libc_init_array+0x38>)
 800766c:	4c0d      	ldr	r4, [pc, #52]	@ (80076a4 <__libc_init_array+0x3c>)
 800766e:	1b64      	subs	r4, r4, r5
 8007670:	10a4      	asrs	r4, r4, #2
 8007672:	2600      	movs	r6, #0
 8007674:	42a6      	cmp	r6, r4
 8007676:	d109      	bne.n	800768c <__libc_init_array+0x24>
 8007678:	4d0b      	ldr	r5, [pc, #44]	@ (80076a8 <__libc_init_array+0x40>)
 800767a:	4c0c      	ldr	r4, [pc, #48]	@ (80076ac <__libc_init_array+0x44>)
 800767c:	f000 f826 	bl	80076cc <_init>
 8007680:	1b64      	subs	r4, r4, r5
 8007682:	10a4      	asrs	r4, r4, #2
 8007684:	2600      	movs	r6, #0
 8007686:	42a6      	cmp	r6, r4
 8007688:	d105      	bne.n	8007696 <__libc_init_array+0x2e>
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007690:	4798      	blx	r3
 8007692:	3601      	adds	r6, #1
 8007694:	e7ee      	b.n	8007674 <__libc_init_array+0xc>
 8007696:	f855 3b04 	ldr.w	r3, [r5], #4
 800769a:	4798      	blx	r3
 800769c:	3601      	adds	r6, #1
 800769e:	e7f2      	b.n	8007686 <__libc_init_array+0x1e>
 80076a0:	080077b8 	.word	0x080077b8
 80076a4:	080077b8 	.word	0x080077b8
 80076a8:	080077b8 	.word	0x080077b8
 80076ac:	080077bc 	.word	0x080077bc

080076b0 <memcpy>:
 80076b0:	440a      	add	r2, r1
 80076b2:	4291      	cmp	r1, r2
 80076b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80076b8:	d100      	bne.n	80076bc <memcpy+0xc>
 80076ba:	4770      	bx	lr
 80076bc:	b510      	push	{r4, lr}
 80076be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c6:	4291      	cmp	r1, r2
 80076c8:	d1f9      	bne.n	80076be <memcpy+0xe>
 80076ca:	bd10      	pop	{r4, pc}

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
