
AMP_PCBv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007344  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007508  08007508  00008508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  0000904c  2**0
                  CONTENTS
  4 .ARM          00000008  080075d0  080075d0  000085d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d8  080075d8  0000904c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d8  080075d8  000085d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075dc  080075dc  000085dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080075e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  2000004c  0800762c  0000904c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800762c  00009404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bf7  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036cc  00000000  00000000  0001dc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00021340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1c  00000000  00000000  00022588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251ab  00000000  00000000  000233a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179e5  00000000  00000000  0004854f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfa8c  00000000  00000000  0005ff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f9c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b4c  00000000  00000000  0013fa04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00144550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000004c 	.word	0x2000004c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080074f0 	.word	0x080074f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000050 	.word	0x20000050
 8000200:	080074f0 	.word	0x080074f0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_drsub>:
 8000214:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000218:	e002      	b.n	8000220 <__adddf3>
 800021a:	bf00      	nop

0800021c <__aeabi_dsub>:
 800021c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000220 <__adddf3>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000226:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022a:	ea94 0f05 	teq	r4, r5
 800022e:	bf08      	it	eq
 8000230:	ea90 0f02 	teqeq	r0, r2
 8000234:	bf1f      	itttt	ne
 8000236:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000242:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000246:	f000 80e2 	beq.w	800040e <__adddf3+0x1ee>
 800024a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000252:	bfb8      	it	lt
 8000254:	426d      	neglt	r5, r5
 8000256:	dd0c      	ble.n	8000272 <__adddf3+0x52>
 8000258:	442c      	add	r4, r5
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	ea82 0000 	eor.w	r0, r2, r0
 8000266:	ea83 0101 	eor.w	r1, r3, r1
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	2d36      	cmp	r5, #54	@ 0x36
 8000274:	bf88      	it	hi
 8000276:	bd30      	pophi	{r4, r5, pc}
 8000278:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800027c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000280:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000284:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x70>
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000294:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000298:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x84>
 800029e:	4252      	negs	r2, r2
 80002a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a4:	ea94 0f05 	teq	r4, r5
 80002a8:	f000 80a7 	beq.w	80003fa <__adddf3+0x1da>
 80002ac:	f1a4 0401 	sub.w	r4, r4, #1
 80002b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b4:	db0d      	blt.n	80002d2 <__adddf3+0xb2>
 80002b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ba:	fa22 f205 	lsr.w	r2, r2, r5
 80002be:	1880      	adds	r0, r0, r2
 80002c0:	f141 0100 	adc.w	r1, r1, #0
 80002c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c8:	1880      	adds	r0, r0, r2
 80002ca:	fa43 f305 	asr.w	r3, r3, r5
 80002ce:	4159      	adcs	r1, r3
 80002d0:	e00e      	b.n	80002f0 <__adddf3+0xd0>
 80002d2:	f1a5 0520 	sub.w	r5, r5, #32
 80002d6:	f10e 0e20 	add.w	lr, lr, #32
 80002da:	2a01      	cmp	r2, #1
 80002dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e0:	bf28      	it	cs
 80002e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	18c0      	adds	r0, r0, r3
 80002ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f4:	d507      	bpl.n	8000306 <__adddf3+0xe6>
 80002f6:	f04f 0e00 	mov.w	lr, #0
 80002fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000302:	eb6e 0101 	sbc.w	r1, lr, r1
 8000306:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030a:	d31b      	bcc.n	8000344 <__adddf3+0x124>
 800030c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000310:	d30c      	bcc.n	800032c <__adddf3+0x10c>
 8000312:	0849      	lsrs	r1, r1, #1
 8000314:	ea5f 0030 	movs.w	r0, r0, rrx
 8000318:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800031c:	f104 0401 	add.w	r4, r4, #1
 8000320:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000324:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000328:	f080 809a 	bcs.w	8000460 <__adddf3+0x240>
 800032c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000330:	bf08      	it	eq
 8000332:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000336:	f150 0000 	adcs.w	r0, r0, #0
 800033a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033e:	ea41 0105 	orr.w	r1, r1, r5
 8000342:	bd30      	pop	{r4, r5, pc}
 8000344:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000348:	4140      	adcs	r0, r0
 800034a:	eb41 0101 	adc.w	r1, r1, r1
 800034e:	3c01      	subs	r4, #1
 8000350:	bf28      	it	cs
 8000352:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000356:	d2e9      	bcs.n	800032c <__adddf3+0x10c>
 8000358:	f091 0f00 	teq	r1, #0
 800035c:	bf04      	itt	eq
 800035e:	4601      	moveq	r1, r0
 8000360:	2000      	moveq	r0, #0
 8000362:	fab1 f381 	clz	r3, r1
 8000366:	bf08      	it	eq
 8000368:	3320      	addeq	r3, #32
 800036a:	f1a3 030b 	sub.w	r3, r3, #11
 800036e:	f1b3 0220 	subs.w	r2, r3, #32
 8000372:	da0c      	bge.n	800038e <__adddf3+0x16e>
 8000374:	320c      	adds	r2, #12
 8000376:	dd08      	ble.n	800038a <__adddf3+0x16a>
 8000378:	f102 0c14 	add.w	ip, r2, #20
 800037c:	f1c2 020c 	rsb	r2, r2, #12
 8000380:	fa01 f00c 	lsl.w	r0, r1, ip
 8000384:	fa21 f102 	lsr.w	r1, r1, r2
 8000388:	e00c      	b.n	80003a4 <__adddf3+0x184>
 800038a:	f102 0214 	add.w	r2, r2, #20
 800038e:	bfd8      	it	le
 8000390:	f1c2 0c20 	rsble	ip, r2, #32
 8000394:	fa01 f102 	lsl.w	r1, r1, r2
 8000398:	fa20 fc0c 	lsr.w	ip, r0, ip
 800039c:	bfdc      	itt	le
 800039e:	ea41 010c 	orrle.w	r1, r1, ip
 80003a2:	4090      	lslle	r0, r2
 80003a4:	1ae4      	subs	r4, r4, r3
 80003a6:	bfa2      	ittt	ge
 80003a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ac:	4329      	orrge	r1, r5
 80003ae:	bd30      	popge	{r4, r5, pc}
 80003b0:	ea6f 0404 	mvn.w	r4, r4
 80003b4:	3c1f      	subs	r4, #31
 80003b6:	da1c      	bge.n	80003f2 <__adddf3+0x1d2>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc0e      	bgt.n	80003da <__adddf3+0x1ba>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0220 	rsb	r2, r4, #32
 80003c4:	fa20 f004 	lsr.w	r0, r0, r4
 80003c8:	fa01 f302 	lsl.w	r3, r1, r2
 80003cc:	ea40 0003 	orr.w	r0, r0, r3
 80003d0:	fa21 f304 	lsr.w	r3, r1, r4
 80003d4:	ea45 0103 	orr.w	r1, r5, r3
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f1c4 040c 	rsb	r4, r4, #12
 80003de:	f1c4 0220 	rsb	r2, r4, #32
 80003e2:	fa20 f002 	lsr.w	r0, r0, r2
 80003e6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ea:	ea40 0003 	orr.w	r0, r0, r3
 80003ee:	4629      	mov	r1, r5
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	fa21 f004 	lsr.w	r0, r1, r4
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f094 0f00 	teq	r4, #0
 80003fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000402:	bf06      	itte	eq
 8000404:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000408:	3401      	addeq	r4, #1
 800040a:	3d01      	subne	r5, #1
 800040c:	e74e      	b.n	80002ac <__adddf3+0x8c>
 800040e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000412:	bf18      	it	ne
 8000414:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000418:	d029      	beq.n	800046e <__adddf3+0x24e>
 800041a:	ea94 0f05 	teq	r4, r5
 800041e:	bf08      	it	eq
 8000420:	ea90 0f02 	teqeq	r0, r2
 8000424:	d005      	beq.n	8000432 <__adddf3+0x212>
 8000426:	ea54 0c00 	orrs.w	ip, r4, r0
 800042a:	bf04      	itt	eq
 800042c:	4619      	moveq	r1, r3
 800042e:	4610      	moveq	r0, r2
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea91 0f03 	teq	r1, r3
 8000436:	bf1e      	ittt	ne
 8000438:	2100      	movne	r1, #0
 800043a:	2000      	movne	r0, #0
 800043c:	bd30      	popne	{r4, r5, pc}
 800043e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000442:	d105      	bne.n	8000450 <__adddf3+0x230>
 8000444:	0040      	lsls	r0, r0, #1
 8000446:	4149      	adcs	r1, r1
 8000448:	bf28      	it	cs
 800044a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000454:	bf3c      	itt	cc
 8000456:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045a:	bd30      	popcc	{r4, r5, pc}
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf1a      	itte	ne
 8000474:	4619      	movne	r1, r3
 8000476:	4610      	movne	r0, r2
 8000478:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800047c:	bf1c      	itt	ne
 800047e:	460b      	movne	r3, r1
 8000480:	4602      	movne	r2, r0
 8000482:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000486:	bf06      	itte	eq
 8000488:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800048c:	ea91 0f03 	teqeq	r1, r3
 8000490:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	bf00      	nop

08000498 <__aeabi_ui2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ac:	f04f 0500 	mov.w	r5, #0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e750      	b.n	8000358 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_i2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d0:	bf48      	it	mi
 80004d2:	4240      	negmi	r0, r0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e73e      	b.n	8000358 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_f2d>:
 80004dc:	0042      	lsls	r2, r0, #1
 80004de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ea:	bf1f      	itttt	ne
 80004ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f8:	4770      	bxne	lr
 80004fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fe:	bf08      	it	eq
 8000500:	4770      	bxeq	lr
 8000502:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000506:	bf04      	itt	eq
 8000508:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000518:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	e71c      	b.n	8000358 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_ul2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f04f 0500 	mov.w	r5, #0
 800052e:	e00a      	b.n	8000546 <__aeabi_l2d+0x16>

08000530 <__aeabi_l2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053e:	d502      	bpl.n	8000546 <__aeabi_l2d+0x16>
 8000540:	4240      	negs	r0, r0
 8000542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000546:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000552:	f43f aed8 	beq.w	8000306 <__adddf3+0xe6>
 8000556:	f04f 0203 	mov.w	r2, #3
 800055a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055e:	bf18      	it	ne
 8000560:	3203      	addne	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056e:	f1c2 0320 	rsb	r3, r2, #32
 8000572:	fa00 fc03 	lsl.w	ip, r0, r3
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 fe03 	lsl.w	lr, r1, r3
 800057e:	ea40 000e 	orr.w	r0, r0, lr
 8000582:	fa21 f102 	lsr.w	r1, r1, r2
 8000586:	4414      	add	r4, r2
 8000588:	e6bd      	b.n	8000306 <__adddf3+0xe6>
 800058a:	bf00      	nop

0800058c <__aeabi_dmul>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000592:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059a:	bf1d      	ittte	ne
 800059c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a0:	ea94 0f0c 	teqne	r4, ip
 80005a4:	ea95 0f0c 	teqne	r5, ip
 80005a8:	f000 f8de 	bleq	8000768 <__aeabi_dmul+0x1dc>
 80005ac:	442c      	add	r4, r5
 80005ae:	ea81 0603 	eor.w	r6, r1, r3
 80005b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005be:	bf18      	it	ne
 80005c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005cc:	d038      	beq.n	8000640 <__aeabi_dmul+0xb4>
 80005ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005da:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e2:	f04f 0600 	mov.w	r6, #0
 80005e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ea:	f09c 0f00 	teq	ip, #0
 80005ee:	bf18      	it	ne
 80005f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005fc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000600:	d204      	bcs.n	800060c <__aeabi_dmul+0x80>
 8000602:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000606:	416d      	adcs	r5, r5
 8000608:	eb46 0606 	adc.w	r6, r6, r6
 800060c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000610:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000614:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000618:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800061c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000620:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000624:	bf88      	it	hi
 8000626:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062a:	d81e      	bhi.n	800066a <__aeabi_dmul+0xde>
 800062c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000644:	ea46 0101 	orr.w	r1, r6, r1
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	ea81 0103 	eor.w	r1, r1, r3
 8000650:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000654:	bfc2      	ittt	gt
 8000656:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065e:	bd70      	popgt	{r4, r5, r6, pc}
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f04f 0e00 	mov.w	lr, #0
 8000668:	3c01      	subs	r4, #1
 800066a:	f300 80ab 	bgt.w	80007c4 <__aeabi_dmul+0x238>
 800066e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000672:	bfde      	ittt	le
 8000674:	2000      	movle	r0, #0
 8000676:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd70      	pople	{r4, r5, r6, pc}
 800067c:	f1c4 0400 	rsb	r4, r4, #0
 8000680:	3c20      	subs	r4, #32
 8000682:	da35      	bge.n	80006f0 <__aeabi_dmul+0x164>
 8000684:	340c      	adds	r4, #12
 8000686:	dc1b      	bgt.n	80006c0 <__aeabi_dmul+0x134>
 8000688:	f104 0414 	add.w	r4, r4, #20
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f305 	lsl.w	r3, r0, r5
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f205 	lsl.w	r2, r1, r5
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	fa21 f604 	lsr.w	r6, r1, r4
 80006b0:	eb42 0106 	adc.w	r1, r2, r6
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 040c 	rsb	r4, r4, #12
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f304 	lsl.w	r3, r0, r4
 80006cc:	fa20 f005 	lsr.w	r0, r0, r5
 80006d0:	fa01 f204 	lsl.w	r2, r1, r4
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	f141 0100 	adc.w	r1, r1, #0
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f205 	lsl.w	r2, r0, r5
 80006f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006fc:	fa20 f304 	lsr.w	r3, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea43 0302 	orr.w	r3, r3, r2
 8000708:	fa21 f004 	lsr.w	r0, r1, r4
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	fa21 f204 	lsr.w	r2, r1, r4
 8000714:	ea20 0002 	bic.w	r0, r0, r2
 8000718:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f094 0f00 	teq	r4, #0
 800072c:	d10f      	bne.n	800074e <__aeabi_dmul+0x1c2>
 800072e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000732:	0040      	lsls	r0, r0, #1
 8000734:	eb41 0101 	adc.w	r1, r1, r1
 8000738:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800073c:	bf08      	it	eq
 800073e:	3c01      	subeq	r4, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1a6>
 8000742:	ea41 0106 	orr.w	r1, r1, r6
 8000746:	f095 0f00 	teq	r5, #0
 800074a:	bf18      	it	ne
 800074c:	4770      	bxne	lr
 800074e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	eb43 0303 	adc.w	r3, r3, r3
 8000758:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800075c:	bf08      	it	eq
 800075e:	3d01      	subeq	r5, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1c6>
 8000762:	ea43 0306 	orr.w	r3, r3, r6
 8000766:	4770      	bx	lr
 8000768:	ea94 0f0c 	teq	r4, ip
 800076c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000770:	bf18      	it	ne
 8000772:	ea95 0f0c 	teqne	r5, ip
 8000776:	d00c      	beq.n	8000792 <__aeabi_dmul+0x206>
 8000778:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077c:	bf18      	it	ne
 800077e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000782:	d1d1      	bne.n	8000728 <__aeabi_dmul+0x19c>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000796:	bf06      	itte	eq
 8000798:	4610      	moveq	r0, r2
 800079a:	4619      	moveq	r1, r3
 800079c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a0:	d019      	beq.n	80007d6 <__aeabi_dmul+0x24a>
 80007a2:	ea94 0f0c 	teq	r4, ip
 80007a6:	d102      	bne.n	80007ae <__aeabi_dmul+0x222>
 80007a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ac:	d113      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007ae:	ea95 0f0c 	teq	r5, ip
 80007b2:	d105      	bne.n	80007c0 <__aeabi_dmul+0x234>
 80007b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b8:	bf1c      	itt	ne
 80007ba:	4610      	movne	r0, r2
 80007bc:	4619      	movne	r1, r3
 80007be:	d10a      	bne.n	80007d6 <__aeabi_dmul+0x24a>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d0:	f04f 0000 	mov.w	r0, #0
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007da:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007de:	bd70      	pop	{r4, r5, r6, pc}

080007e0 <__aeabi_ddiv>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ee:	bf1d      	ittte	ne
 80007f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f4:	ea94 0f0c 	teqne	r4, ip
 80007f8:	ea95 0f0c 	teqne	r5, ip
 80007fc:	f000 f8a7 	bleq	800094e <__aeabi_ddiv+0x16e>
 8000800:	eba4 0405 	sub.w	r4, r4, r5
 8000804:	ea81 0e03 	eor.w	lr, r1, r3
 8000808:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800080c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000810:	f000 8088 	beq.w	8000924 <__aeabi_ddiv+0x144>
 8000814:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000818:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800081c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000820:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000824:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000828:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800082c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000830:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000834:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000838:	429d      	cmp	r5, r3
 800083a:	bf08      	it	eq
 800083c:	4296      	cmpeq	r6, r2
 800083e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000842:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000846:	d202      	bcs.n	800084e <__aeabi_ddiv+0x6e>
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	1ab6      	subs	r6, r6, r2
 8000850:	eb65 0503 	sbc.w	r5, r5, r3
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 000c 	orrcs.w	r0, r0, ip
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c0:	d018      	beq.n	80008f4 <__aeabi_ddiv+0x114>
 80008c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008de:	d1c0      	bne.n	8000862 <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	d10b      	bne.n	80008fe <__aeabi_ddiv+0x11e>
 80008e6:	ea41 0100 	orr.w	r1, r1, r0
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f2:	e7b6      	b.n	8000862 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	bf04      	itt	eq
 80008fa:	4301      	orreq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000902:	bf88      	it	hi
 8000904:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000908:	f63f aeaf 	bhi.w	800066a <__aeabi_dmul+0xde>
 800090c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000910:	bf04      	itt	eq
 8000912:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000928:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800092c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000930:	bfc2      	ittt	gt
 8000932:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000936:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093a:	bd70      	popgt	{r4, r5, r6, pc}
 800093c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000940:	f04f 0e00 	mov.w	lr, #0
 8000944:	3c01      	subs	r4, #1
 8000946:	e690      	b.n	800066a <__aeabi_dmul+0xde>
 8000948:	ea45 0e06 	orr.w	lr, r5, r6
 800094c:	e68d      	b.n	800066a <__aeabi_dmul+0xde>
 800094e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000952:	ea94 0f0c 	teq	r4, ip
 8000956:	bf08      	it	eq
 8000958:	ea95 0f0c 	teqeq	r5, ip
 800095c:	f43f af3b 	beq.w	80007d6 <__aeabi_dmul+0x24a>
 8000960:	ea94 0f0c 	teq	r4, ip
 8000964:	d10a      	bne.n	800097c <__aeabi_ddiv+0x19c>
 8000966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096a:	f47f af34 	bne.w	80007d6 <__aeabi_dmul+0x24a>
 800096e:	ea95 0f0c 	teq	r5, ip
 8000972:	f47f af25 	bne.w	80007c0 <__aeabi_dmul+0x234>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e72c      	b.n	80007d6 <__aeabi_dmul+0x24a>
 800097c:	ea95 0f0c 	teq	r5, ip
 8000980:	d106      	bne.n	8000990 <__aeabi_ddiv+0x1b0>
 8000982:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000986:	f43f aefd 	beq.w	8000784 <__aeabi_dmul+0x1f8>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e722      	b.n	80007d6 <__aeabi_dmul+0x24a>
 8000990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099a:	f47f aec5 	bne.w	8000728 <__aeabi_dmul+0x19c>
 800099e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a2:	f47f af0d 	bne.w	80007c0 <__aeabi_dmul+0x234>
 80009a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009aa:	f47f aeeb 	bne.w	8000784 <__aeabi_dmul+0x1f8>
 80009ae:	e712      	b.n	80007d6 <__aeabi_dmul+0x24a>

080009b0 <__aeabi_d2iz>:
 80009b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b8:	d215      	bcs.n	80009e6 <__aeabi_d2iz+0x36>
 80009ba:	d511      	bpl.n	80009e0 <__aeabi_d2iz+0x30>
 80009bc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c4:	d912      	bls.n	80009ec <__aeabi_d2iz+0x3c>
 80009c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	bf18      	it	ne
 80009dc:	4240      	negne	r0, r0
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d105      	bne.n	80009f8 <__aeabi_d2iz+0x48>
 80009ec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f0:	bf08      	it	eq
 80009f2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009f6:	4770      	bx	lr
 80009f8:	f04f 0000 	mov.w	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_uldivmod>:
 8000a00:	b953      	cbnz	r3, 8000a18 <__aeabi_uldivmod+0x18>
 8000a02:	b94a      	cbnz	r2, 8000a18 <__aeabi_uldivmod+0x18>
 8000a04:	2900      	cmp	r1, #0
 8000a06:	bf08      	it	eq
 8000a08:	2800      	cmpeq	r0, #0
 8000a0a:	bf1c      	itt	ne
 8000a0c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a10:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a14:	f000 b96a 	b.w	8000cec <__aeabi_idiv0>
 8000a18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a20:	f000 f806 	bl	8000a30 <__udivmoddi4>
 8000a24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <__udivmoddi4>:
 8000a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a34:	9d08      	ldr	r5, [sp, #32]
 8000a36:	460c      	mov	r4, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14e      	bne.n	8000ada <__udivmoddi4+0xaa>
 8000a3c:	4694      	mov	ip, r2
 8000a3e:	458c      	cmp	ip, r1
 8000a40:	4686      	mov	lr, r0
 8000a42:	fab2 f282 	clz	r2, r2
 8000a46:	d962      	bls.n	8000b0e <__udivmoddi4+0xde>
 8000a48:	b14a      	cbz	r2, 8000a5e <__udivmoddi4+0x2e>
 8000a4a:	f1c2 0320 	rsb	r3, r2, #32
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	fa20 f303 	lsr.w	r3, r0, r3
 8000a54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a58:	4319      	orrs	r1, r3
 8000a5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a62:	fa1f f68c 	uxth.w	r6, ip
 8000a66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb04 f106 	mul.w	r1, r4, r6
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d90a      	bls.n	8000a94 <__udivmoddi4+0x64>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a86:	f080 8112 	bcs.w	8000cae <__udivmoddi4+0x27e>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 810f 	bls.w	8000cae <__udivmoddi4+0x27e>
 8000a90:	3c02      	subs	r4, #2
 8000a92:	4463      	add	r3, ip
 8000a94:	1a59      	subs	r1, r3, r1
 8000a96:	fa1f f38e 	uxth.w	r3, lr
 8000a9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa6:	fb00 f606 	mul.w	r6, r0, r6
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x94>
 8000aae:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ab6:	f080 80fc 	bcs.w	8000cb2 <__udivmoddi4+0x282>
 8000aba:	429e      	cmp	r6, r3
 8000abc:	f240 80f9 	bls.w	8000cb2 <__udivmoddi4+0x282>
 8000ac0:	4463      	add	r3, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa6>
 8000ace:	40d3      	lsrs	r3, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xba>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb4>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x150>
 8000af2:	42a3      	cmp	r3, r4
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xcc>
 8000af6:	4290      	cmp	r0, r2
 8000af8:	f0c0 80f0 	bcc.w	8000cdc <__udivmoddi4+0x2ac>
 8000afc:	1a86      	subs	r6, r0, r2
 8000afe:	eb64 0303 	sbc.w	r3, r4, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d0e6      	beq.n	8000ad6 <__udivmoddi4+0xa6>
 8000b08:	e9c5 6300 	strd	r6, r3, [r5]
 8000b0c:	e7e3      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x204>
 8000b14:	eba1 040c 	sub.w	r4, r1, ip
 8000b18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	2101      	movs	r1, #1
 8000b22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b32:	fb07 f006 	mul.w	r0, r7, r6
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x11c>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x11a>
 8000b44:	4298      	cmp	r0, r3
 8000b46:	f200 80cd 	bhi.w	8000ce4 <__udivmoddi4+0x2b4>
 8000b4a:	4626      	mov	r6, r4
 8000b4c:	1a1c      	subs	r4, r3, r0
 8000b4e:	fa1f f38e 	uxth.w	r3, lr
 8000b52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b56:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b5e:	fb00 f707 	mul.w	r7, r0, r7
 8000b62:	429f      	cmp	r7, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x148>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x146>
 8000b70:	429f      	cmp	r7, r3
 8000b72:	f200 80b0 	bhi.w	8000cd6 <__udivmoddi4+0x2a6>
 8000b76:	4620      	mov	r0, r4
 8000b78:	1bdb      	subs	r3, r3, r7
 8000b7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x9c>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b90:	fa04 f301 	lsl.w	r3, r4, r1
 8000b94:	ea43 030c 	orr.w	r3, r3, ip
 8000b98:	40f4      	lsrs	r4, r6
 8000b9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9e:	0c38      	lsrs	r0, r7, #16
 8000ba0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ba8:	fa1f fc87 	uxth.w	ip, r7
 8000bac:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000bb8:	45a1      	cmp	r9, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x1a6>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bc6:	f080 8084 	bcs.w	8000cd2 <__udivmoddi4+0x2a2>
 8000bca:	45a1      	cmp	r9, r4
 8000bcc:	f240 8081 	bls.w	8000cd2 <__udivmoddi4+0x2a2>
 8000bd0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd4:	443c      	add	r4, r7
 8000bd6:	eba4 0409 	sub.w	r4, r4, r9
 8000bda:	fa1f f983 	uxth.w	r9, r3
 8000bde:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be2:	fb00 4413 	mls	r4, r0, r3, r4
 8000be6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x1d2>
 8000bf2:	193c      	adds	r4, r7, r4
 8000bf4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bf8:	d267      	bcs.n	8000cca <__udivmoddi4+0x29a>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0x29a>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c06:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0a:	eba4 040c 	sub.w	r4, r4, ip
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	46ce      	mov	lr, r9
 8000c12:	469c      	mov	ip, r3
 8000c14:	d351      	bcc.n	8000cba <__udivmoddi4+0x28a>
 8000c16:	d04e      	beq.n	8000cb6 <__udivmoddi4+0x286>
 8000c18:	b155      	cbz	r5, 8000c30 <__udivmoddi4+0x200>
 8000c1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	40cb      	lsrs	r3, r1
 8000c28:	431e      	orrs	r6, r3
 8000c2a:	40cc      	lsrs	r4, r1
 8000c2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	e750      	b.n	8000ad6 <__udivmoddi4+0xa6>
 8000c34:	f1c2 0320 	rsb	r3, r2, #32
 8000c38:	fa20 f103 	lsr.w	r1, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa24 f303 	lsr.w	r3, r4, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	430c      	orrs	r4, r1
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c50:	fa1f f78c 	uxth.w	r7, ip
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3110 	mls	r1, r8, r0, r3
 8000c5c:	0c23      	lsrs	r3, r4, #16
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f107 	mul.w	r1, r0, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x24c>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c72:	d22c      	bcs.n	8000cce <__udivmoddi4+0x29e>
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d92a      	bls.n	8000cce <__udivmoddi4+0x29e>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c84:	fb08 3311 	mls	r3, r8, r1, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb01 f307 	mul.w	r3, r1, r7
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x276>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c9c:	d213      	bcs.n	8000cc6 <__udivmoddi4+0x296>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d911      	bls.n	8000cc6 <__udivmoddi4+0x296>
 8000ca2:	3902      	subs	r1, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	1ae4      	subs	r4, r4, r3
 8000ca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cac:	e739      	b.n	8000b22 <__udivmoddi4+0xf2>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	e6f0      	b.n	8000a94 <__udivmoddi4+0x64>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e706      	b.n	8000ac4 <__udivmoddi4+0x94>
 8000cb6:	45c8      	cmp	r8, r9
 8000cb8:	d2ae      	bcs.n	8000c18 <__udivmoddi4+0x1e8>
 8000cba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7a8      	b.n	8000c18 <__udivmoddi4+0x1e8>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	e7ed      	b.n	8000ca6 <__udivmoddi4+0x276>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	e799      	b.n	8000c02 <__udivmoddi4+0x1d2>
 8000cce:	4630      	mov	r0, r6
 8000cd0:	e7d4      	b.n	8000c7c <__udivmoddi4+0x24c>
 8000cd2:	46d6      	mov	lr, sl
 8000cd4:	e77f      	b.n	8000bd6 <__udivmoddi4+0x1a6>
 8000cd6:	4463      	add	r3, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e74d      	b.n	8000b78 <__udivmoddi4+0x148>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	4623      	mov	r3, r4
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	e70f      	b.n	8000b04 <__udivmoddi4+0xd4>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	e730      	b.n	8000b4c <__udivmoddi4+0x11c>
 8000cea:	bf00      	nop

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000cf0:	b4b0      	push	{r4, r5, r7}
 8000cf2:	b08f      	sub	sp, #60	@ 0x3c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000cf8:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000d04:	2307      	movs	r3, #7
 8000d06:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000d10:	23ff      	movs	r3, #255	@ 0xff
 8000d12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000d16:	2364      	movs	r3, #100	@ 0x64
 8000d18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	461d      	mov	r5, r3
 8000d24:	f107 040c 	add.w	r4, r7, #12
 8000d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	373c      	adds	r7, #60	@ 0x3c
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bcb0      	pop	{r4, r5, r7}
 8000d40:	4770      	bx	lr

08000d42 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6898      	ldr	r0, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	899b      	ldrh	r3, [r3, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	f002 fe51 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f001 fd10 	bl	8002780 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6898      	ldr	r0, [r3, #8]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	899b      	ldrh	r3, [r3, #12]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f002 fe46 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d70:	2064      	movs	r0, #100	@ 0x64
 8000d72:	f001 fd05 	bl	8002780 <HAL_Delay>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f9ff 	bl	800118e <LoRa_read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d107      	bne.n	8000dae <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	f023 0307 	bic.w	r3, r3, #7
 8000da4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
 8000dac:	e03e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d10c      	bne.n	8000dce <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000db8:	f023 0307 	bic.w	r3, r3, #7
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	61da      	str	r2, [r3, #28]
 8000dcc:	e02e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d10c      	bne.n	8000dee <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dd8:	f023 0307 	bic.w	r3, r3, #7
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	f043 0303 	orr.w	r3, r3, #3
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	61da      	str	r2, [r3, #28]
 8000dec:	e01e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	d10c      	bne.n	8000e0e <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df8:	f023 0307 	bic.w	r3, r3, #7
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	f043 0305 	orr.w	r3, r3, #5
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2205      	movs	r2, #5
 8000e0a:	61da      	str	r2, [r3, #28]
 8000e0c:	e00e      	b.n	8000e2c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d10b      	bne.n	8000e2c <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e18:	f023 0307 	bic.w	r3, r3, #7
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	f043 0306 	orr.w	r3, r3, #6
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2206      	movs	r2, #6
 8000e2a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2101      	movs	r1, #1
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f9c5 	bl	80011c2 <LoRa_write>
	//HAL_Delay(10);
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f002 fdce 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6998      	ldr	r0, [r3, #24]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	f003 fcc5 	bl	80047fa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e70:	bf00      	nop
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 f8ca 	bl	8005010 <HAL_SPI_GetState>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1f7      	bne.n	8000e72 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6998      	ldr	r0, [r3, #24]
 8000e86:	8b3a      	ldrh	r2, [r7, #24]
 8000e88:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	f003 fdf7 	bl	8004a80 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e92:	bf00      	nop
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 f8b9 	bl	8005010 <HAL_SPI_GetState>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d1f7      	bne.n	8000e94 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	889b      	ldrh	r3, [r3, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f002 fda4 	bl	80039fc <HAL_GPIO_WritePin>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	889b      	ldrh	r3, [r3, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f002 fd90 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6998      	ldr	r0, [r3, #24]
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	f003 fc87 	bl	80047fa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000eec:	bf00      	nop
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 f88c 	bl	8005010 <HAL_SPI_GetState>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1f7      	bne.n	8000eee <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6998      	ldr	r0, [r3, #24]
 8000f02:	8b3a      	ldrh	r2, [r7, #24]
 8000f04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	f003 fc76 	bl	80047fa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f0e:	bf00      	nop
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 f87b 	bl	8005010 <HAL_SPI_GetState>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d1f7      	bne.n	8000f10 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	889b      	ldrh	r3, [r3, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f002 fd66 	bl	80039fc <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000f44:	2126      	movs	r1, #38	@ 0x26
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f921 	bl	800118e <LoRa_read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e003      	b.n	8000f68 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	f023 0308 	bic.w	r3, r3, #8
 8000f66:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2126      	movs	r1, #38	@ 0x26
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f927 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 8000f74:	200a      	movs	r0, #10
 8000f76:	f001 fc03 	bl	8002780 <HAL_Delay>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b096      	sub	sp, #88	@ 0x58
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <LoRa_setAutoLDO+0x68>)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4611      	mov	r1, r2
 8000f94:	2250      	movs	r2, #80	@ 0x50
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 fa9c 	bl	80074d4 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa85 	bl	80004b8 <__aeabi_i2d>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	3358      	adds	r3, #88	@ 0x58
 8000fb8:	443b      	add	r3, r7
 8000fba:	3b50      	subs	r3, #80	@ 0x50
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fc0e 	bl	80007e0 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fcf0 	bl	80009b0 <__aeabi_d2iz>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	bfcc      	ite	gt
 8000fd6:	2301      	movgt	r3, #1
 8000fd8:	2300      	movle	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffaa 	bl	8000f38 <LoRa_setLowDaraRateOptimization>
}
 8000fe4:	bf00      	nop
 8000fe6:	3758      	adds	r7, #88	@ 0x58
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08007508 	.word	0x08007508

08000ff0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	04db      	lsls	r3, r3, #19
 8000ffe:	115b      	asrs	r3, r3, #5
 8001000:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	461a      	mov	r2, r3
 800100c:	2106      	movs	r1, #6
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8d7 	bl	80011c2 <LoRa_write>
	HAL_Delay(5);
 8001014:	2005      	movs	r0, #5
 8001016:	f001 fbb3 	bl	8002780 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	461a      	mov	r2, r3
 8001024:	2107      	movs	r1, #7
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f8cb 	bl	80011c2 <LoRa_write>
	HAL_Delay(5);
 800102c:	2005      	movs	r0, #5
 800102e:	f001 fba7 	bl	8002780 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	461a      	mov	r2, r3
 800103a:	2108      	movs	r1, #8
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8c0 	bl	80011c2 <LoRa_write>
	HAL_Delay(5);
 8001042:	2005      	movs	r0, #5
 8001044:	f001 fb9c 	bl	8002780 <HAL_Delay>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	dd01      	ble.n	8001064 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001060:	230c      	movs	r3, #12
 8001062:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b06      	cmp	r3, #6
 8001068:	dc01      	bgt.n	800106e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800106a:	2307      	movs	r3, #7
 800106c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800106e:	211e      	movs	r1, #30
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f88c 	bl	800118e <LoRa_read>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f001 fb80 	bl	8002780 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	b2da      	uxtb	r2, r3
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	461a      	mov	r2, r3
 8001098:	211e      	movs	r1, #30
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f891 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f001 fb6d 	bl	8002780 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff6c 	bl	8000f84 <LoRa_setAutoLDO>
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2109      	movs	r1, #9
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f87b 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 fb57 	bl	8002780 <HAL_Delay>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80010f0:	d801      	bhi.n	80010f6 <LoRa_setOCP+0x1a>
		current = 45;
 80010f2:	232d      	movs	r3, #45	@ 0x2d
 80010f4:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2bf0      	cmp	r3, #240	@ 0xf0
 80010fa:	d901      	bls.n	8001100 <LoRa_setOCP+0x24>
		current = 240;
 80010fc:	23f0      	movs	r3, #240	@ 0xf0
 80010fe:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	2b78      	cmp	r3, #120	@ 0x78
 8001104:	d809      	bhi.n	800111a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	3b2d      	subs	r3, #45	@ 0x2d
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <LoRa_setOCP+0x78>)
 800110c:	fb82 1203 	smull	r1, r2, r2, r3
 8001110:	1052      	asrs	r2, r2, #1
 8001112:	17db      	asrs	r3, r3, #31
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e00b      	b.n	8001132 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2bf0      	cmp	r3, #240	@ 0xf0
 800111e:	d808      	bhi.n	8001132 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	331e      	adds	r3, #30
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <LoRa_setOCP+0x78>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	1092      	asrs	r2, r2, #2
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3320      	adds	r3, #32
 8001136:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	461a      	mov	r2, r3
 800113c:	210b      	movs	r1, #11
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f83f 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f001 fb1b 	bl	8002780 <HAL_Delay>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	66666667 	.word	0x66666667

08001158 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001160:	211e      	movs	r1, #30
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f813 	bl	800118e <LoRa_read>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 0307 	orr.w	r3, r3, #7
 8001172:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	461a      	mov	r2, r3
 8001178:	211e      	movs	r1, #30
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f821 	bl	80011c2 <LoRa_write>
	HAL_Delay(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f001 fafd 	bl	8002780 <HAL_Delay>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af02      	add	r7, sp, #8
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80011a4:	f107 030f 	add.w	r3, r7, #15
 80011a8:	f107 010e 	add.w	r1, r7, #14
 80011ac:	2201      	movs	r2, #1
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	2201      	movs	r2, #1
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fe44 	bl	8000e40 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af02      	add	r7, sp, #8
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	70fb      	strb	r3, [r7, #3]
 80011ce:	4613      	mov	r3, r2
 80011d0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73bb      	strb	r3, [r7, #14]
	data = value;
 80011dc:	78bb      	ldrb	r3, [r7, #2]
 80011de:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	f107 010e 	add.w	r1, r7, #14
 80011e8:	2201      	movs	r2, #1
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe64 	bl	8000ebc <LoRa_writeReg>
	//HAL_Delay(5);
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

	return 1;
 8001204:	2301      	movs	r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffee 	bl	80011fc <LoRa_isvalid>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8096 	beq.w	8001354 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fda7 	bl	8000d7e <LoRa_gotoMode>
			HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f001 faa5 	bl	8002780 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001236:	2101      	movs	r1, #1
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffa8 	bl	800118e <LoRa_read>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001242:	200a      	movs	r0, #10
 8001244:	f001 fa9c 	bl	8002780 <HAL_Delay>
			data = read | 0x80;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800124e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	461a      	mov	r2, r3
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffb3 	bl	80011c2 <LoRa_write>
			HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f001 fa8f 	bl	8002780 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4619      	mov	r1, r3
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fec1 	bl	8000ff0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff1c 	bl	80010b4 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800128a:	2223      	movs	r2, #35	@ 0x23
 800128c:	210c      	movs	r1, #12
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff97 	bl	80011c2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff5f 	bl	8001158 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fed4 	bl	8001050 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80012a8:	22ff      	movs	r2, #255	@ 0xff
 80012aa:	211f      	movs	r1, #31
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff88 	bl	80011c2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	461a      	mov	r2, r3
 80012d2:	211d      	movs	r1, #29
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff74 	bl	80011c2 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fe52 	bl	8000f84 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	2120      	movs	r1, #32
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff67 	bl	80011c2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	2121      	movs	r1, #33	@ 0x21
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff5f 	bl	80011c2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001304:	2140      	movs	r1, #64	@ 0x40
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff41 	bl	800118e <LoRa_read>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001316:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	461a      	mov	r2, r3
 800131c:	2140      	movs	r1, #64	@ 0x40
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ff4f 	bl	80011c2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001324:	2101      	movs	r1, #1
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fd29 	bl	8000d7e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001332:	200a      	movs	r0, #10
 8001334:	f001 fa24 	bl	8002780 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001338:	2142      	movs	r1, #66	@ 0x42
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff27 	bl	800118e <LoRa_read>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b12      	cmp	r3, #18
 8001348:	d101      	bne.n	800134e <LoRa_init+0x13c>
				return LORA_OK;
 800134a:	23c8      	movs	r3, #200	@ 0xc8
 800134c:	e004      	b.n	8001358 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800134e:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001352:	e001      	b.n	8001358 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001354:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <App_StateMachine_Init>:
uint32_t ticks_in_state;			// variable holding number of ticks in current state
char uart2_msg[UART2_MSG_LENGTH];	// buffer for messages to send over UART2

// function to be called before tick() function
void App_StateMachine_Init()
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b098      	sub	sp, #96	@ 0x60
 8001364:	af00      	add	r7, sp, #0
	// UART "hello" message
	strcpy(uart2_msg, "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n");
 8001366:	4a3b      	ldr	r2, [pc, #236]	@ (8001454 <App_StateMachine_Init+0xf4>)
 8001368:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <App_StateMachine_Init+0xf8>)
 800136a:	4614      	mov	r4, r2
 800136c:	461d      	mov	r5, r3
 800136e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800137e:	c403      	stmia	r4!, {r0, r1}
 8001380:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart2_msg, strlen(uart2_msg));
 8001382:	4834      	ldr	r0, [pc, #208]	@ (8001454 <App_StateMachine_Init+0xf4>)
 8001384:	f7fe ff3e 	bl	8000204 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4931      	ldr	r1, [pc, #196]	@ (8001454 <App_StateMachine_Init+0xf4>)
 8001390:	4832      	ldr	r0, [pc, #200]	@ (800145c <App_StateMachine_Init+0xfc>)
 8001392:	f005 f85f 	bl	8006454 <HAL_UART_Transmit_DMA>
	// initialize LoRa
	LoRa lora;
	lora = newLoRa();
 8001396:	463b      	mov	r3, r7
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fca9 	bl	8000cf0 <newLoRa>
 800139e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80013a2:	463d      	mov	r5, r7
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	lora.CS_port = LORA_NSS_GPIO_Port;
 80013b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <App_StateMachine_Init+0x100>)
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
	lora.CS_pin = LORA_NSS_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	86bb      	strh	r3, [r7, #52]	@ 0x34
	lora.reset_port = LORA_RST_GPIO_Port;
 80013be:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <App_StateMachine_Init+0x100>)
 80013c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	lora.reset_pin = LORA_RST_Pin;
 80013c2:	2310      	movs	r3, #16
 80013c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	lora.DIO0_port = LORA_DIO0_GPIO_Port;
 80013c6:	4b26      	ldr	r3, [pc, #152]	@ (8001460 <App_StateMachine_Init+0x100>)
 80013c8:	643b      	str	r3, [r7, #64]	@ 0x40
	lora.DIO0_pin = LORA_DIO0_Pin;
 80013ca:	2320      	movs	r3, #32
 80013cc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	lora.hSPIx = &hspi2;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <App_StateMachine_Init+0x104>)
 80013d2:	64bb      	str	r3, [r7, #72]	@ 0x48

	lora.frequency = 915;
 80013d4:	f240 3393 	movw	r3, #915	@ 0x393
 80013d8:	653b      	str	r3, [r7, #80]	@ 0x50

	LoRa_reset(&lora);
 80013da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fcaf 	bl	8000d42 <LoRa_reset>
	uint16_t lora_status = LoRa_init(&lora);
 80013e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff12 	bl	8001212 <LoRa_init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	if (lora_status == LORA_OK)
 80013f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80013f8:	2bc8      	cmp	r3, #200	@ 0xc8
 80013fa:	d10f      	bne.n	800141c <App_StateMachine_Init+0xbc>
	{
		strcpy(uart2_msg, "LoRA OK\r\n");
 80013fc:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <App_StateMachine_Init+0xf4>)
 80013fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <App_StateMachine_Init+0x108>)
 8001400:	ca07      	ldmia	r2, {r0, r1, r2}
 8001402:	c303      	stmia	r3!, {r0, r1}
 8001404:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart2_msg, strlen(uart2_msg));
 8001406:	4813      	ldr	r0, [pc, #76]	@ (8001454 <App_StateMachine_Init+0xf4>)
 8001408:	f7fe fefc 	bl	8000204 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4910      	ldr	r1, [pc, #64]	@ (8001454 <App_StateMachine_Init+0xf4>)
 8001414:	4811      	ldr	r0, [pc, #68]	@ (800145c <App_StateMachine_Init+0xfc>)
 8001416:	f005 f81d 	bl	8006454 <HAL_UART_Transmit_DMA>
 800141a:	e00f      	b.n	800143c <App_StateMachine_Init+0xdc>
	}
	else
	{
		strcpy(uart2_msg, "LoRA FAILED\r\n");
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <App_StateMachine_Init+0xf4>)
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <App_StateMachine_Init+0x10c>)
 8001420:	4614      	mov	r4, r2
 8001422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001424:	c407      	stmia	r4!, {r0, r1, r2}
 8001426:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart2_msg, strlen(uart2_msg));
 8001428:	480a      	ldr	r0, [pc, #40]	@ (8001454 <App_StateMachine_Init+0xf4>)
 800142a:	f7fe feeb 	bl	8000204 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	4907      	ldr	r1, [pc, #28]	@ (8001454 <App_StateMachine_Init+0xf4>)
 8001436:	4809      	ldr	r0, [pc, #36]	@ (800145c <App_StateMachine_Init+0xfc>)
 8001438:	f005 f80c 	bl	8006454 <HAL_UART_Transmit_DMA>
	}
	// turn all fans off (should be default state anyway)
	Driver_Fan_All_Off();
 800143c:	f000 f8ca 	bl	80015d4 <Driver_Fan_All_Off>
	// initialize e-brake
	Driver_EBrake_Init();
 8001440:	f000 f86c 	bl	800151c <Driver_EBrake_Init>
	// set current state to idle
	current_state = STATE_IDLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <App_StateMachine_Init+0x110>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	3760      	adds	r7, #96	@ 0x60
 800144e:	46bd      	mov	sp, r7
 8001450:	bdb0      	pop	{r4, r5, r7, pc}
 8001452:	bf00      	nop
 8001454:	20000070 	.word	0x20000070
 8001458:	08007558 	.word	0x08007558
 800145c:	20000358 	.word	0x20000358
 8001460:	40020400 	.word	0x40020400
 8001464:	20000108 	.word	0x20000108
 8001468:	08007594 	.word	0x08007594
 800146c:	080075a0 	.word	0x080075a0
 8001470:	20000068 	.word	0x20000068

08001474 <App_StateMachine_Tick>:

// function to be called on timer interrupt
void App_StateMachine_Tick()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	// statements to be called regardless of state
	ticks_in_state += 1;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <App_StateMachine_Tick+0x74>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <App_StateMachine_Tick+0x74>)
 8001480:	6013      	str	r3, [r2, #0]
	// run state-specific code
	switch (current_state)
 8001482:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <App_StateMachine_Tick+0x78>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d82c      	bhi.n	80014e4 <App_StateMachine_Tick+0x70>
 800148a:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <App_StateMachine_Tick+0x1c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014a5 	.word	0x080014a5
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014c5 	.word	0x080014c5
 800149c:	080014cd 	.word	0x080014cd
 80014a0:	080014db 	.word	0x080014db
	{
		case (STATE_IDLE):
		{
			Driver_Status_LED_SetHex(0x1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 f8d5 	bl	8001654 <Driver_Status_LED_SetHex>
			if (ticks_in_state > (5 * TICKS_PER_SEC))
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <App_StateMachine_Tick+0x74>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014b2:	d916      	bls.n	80014e2 <App_StateMachine_Tick+0x6e>
			{
				App_StateMachine_ChangeState(STATE_ERROR);
 80014b4:	2004      	movs	r0, #4
 80014b6:	f000 f81b 	bl	80014f0 <App_StateMachine_ChangeState>
			}
			break;
 80014ba:	e012      	b.n	80014e2 <App_StateMachine_Tick+0x6e>
		}

		case (STATE_AUTO):
		{
			Driver_Status_LED_SetHex(0x2);
 80014bc:	2002      	movs	r0, #2
 80014be:	f000 f8c9 	bl	8001654 <Driver_Status_LED_SetHex>
			break;
 80014c2:	e00f      	b.n	80014e4 <App_StateMachine_Tick+0x70>
		}

		case (STATE_RC):
		{
			Driver_Status_LED_SetHex(0x3);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f8c5 	bl	8001654 <Driver_Status_LED_SetHex>
			break;
 80014ca:	e00b      	b.n	80014e4 <App_StateMachine_Tick+0x70>
		}

		case (STATE_EBRAKE):
		{
			Driver_Status_LED_SetHex(0x4);
 80014cc:	2004      	movs	r0, #4
 80014ce:	f000 f8c1 	bl	8001654 <Driver_Status_LED_SetHex>
			App_StateMachine_ChangeState(STATE_ERROR);
 80014d2:	2004      	movs	r0, #4
 80014d4:	f000 f80c 	bl	80014f0 <App_StateMachine_ChangeState>
			break;
 80014d8:	e004      	b.n	80014e4 <App_StateMachine_Tick+0x70>
		}

		case (STATE_ERROR):
		{
			Driver_Status_LED_SetHex(0x8);
 80014da:	2008      	movs	r0, #8
 80014dc:	f000 f8ba 	bl	8001654 <Driver_Status_LED_SetHex>
			break;
 80014e0:	e000      	b.n	80014e4 <App_StateMachine_Tick+0x70>
			break;
 80014e2:	bf00      	nop
		}
	}
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000006c 	.word	0x2000006c
 80014ec:	20000068 	.word	0x20000068

080014f0 <App_StateMachine_ChangeState>:

void App_StateMachine_ChangeState(State_T new_state)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	// statements to be called regardless of state transition
	ticks_in_state = 0;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <App_StateMachine_ChangeState+0x24>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
	// change state
	current_state = new_state;
 8001500:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <App_StateMachine_ChangeState+0x28>)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	7013      	strb	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000006c 	.word	0x2000006c
 8001518:	20000068 	.word	0x20000068

0800151c <Driver_EBrake_Init>:
#include "main.h"
#include "driver_ebrake.h"

// function to initialize the e-brake (retract for a set period of time)
void Driver_EBrake_Init()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	// retract e-brake
	Driver_EBrake_Retract();
 8001520:	f000 f808 	bl	8001534 <Driver_EBrake_Retract>
	// let e-brake retract for some time
	HAL_Delay(2000);
 8001524:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001528:	f001 f92a 	bl	8002780 <HAL_Delay>
	// turn e-brake off
	Driver_EBrake_Off();
 800152c:	f000 f822 	bl	8001574 <Driver_EBrake_Off>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <Driver_EBrake_Retract>:
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
}

// function to retract the e-brake servo
void Driver_EBrake_Retract()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800153e:	480b      	ldr	r0, [pc, #44]	@ (800156c <Driver_EBrake_Retract+0x38>)
 8001540:	f002 fa5c 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2140      	movs	r1, #64	@ 0x40
 8001548:	4808      	ldr	r0, [pc, #32]	@ (800156c <Driver_EBrake_Retract+0x38>)
 800154a:	f002 fa57 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001554:	4806      	ldr	r0, [pc, #24]	@ (8001570 <Driver_EBrake_Retract+0x3c>)
 8001556:	f002 fa51 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001560:	4803      	ldr	r0, [pc, #12]	@ (8001570 <Driver_EBrake_Retract+0x3c>)
 8001562:	f002 fa4b 	bl	80039fc <HAL_GPIO_WritePin>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020800 	.word	0x40020800
 8001570:	40020400 	.word	0x40020400

08001574 <Driver_EBrake_Off>:

// function to turn the e-brake servo off (no drive command)
void Driver_EBrake_Off()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800157e:	480b      	ldr	r0, [pc, #44]	@ (80015ac <Driver_EBrake_Off+0x38>)
 8001580:	f002 fa3c 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2140      	movs	r1, #64	@ 0x40
 8001588:	4808      	ldr	r0, [pc, #32]	@ (80015ac <Driver_EBrake_Off+0x38>)
 800158a:	f002 fa37 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001594:	4806      	ldr	r0, [pc, #24]	@ (80015b0 <Driver_EBrake_Off+0x3c>)
 8001596:	f002 fa31 	bl	80039fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015a0:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <Driver_EBrake_Off+0x3c>)
 80015a2:	f002 fa2b 	bl	80039fc <HAL_GPIO_WritePin>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020400 	.word	0x40020400

080015b4 <Driver_Fan_Off>:
	HAL_GPIO_WritePin(fan.port, fan.pin, 1);
}

// function to turn a fan off
void Driver_Fan_Off(Fan_T fan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	463b      	mov	r3, r7
 80015bc:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(fan.port, fan.pin, 0);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	88b9      	ldrh	r1, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fa18 	bl	80039fc <HAL_GPIO_WritePin>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <Driver_Fan_All_Off>:
	Driver_Fan_On(FAN4);
}

// toggle to turn all fans off
void Driver_Fan_All_Off()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	Driver_Fan_Off(FAN1);
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <Driver_Fan_All_Off+0x30>)
 80015da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015de:	f7ff ffe9 	bl	80015b4 <Driver_Fan_Off>
	Driver_Fan_Off(FAN2);
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <Driver_Fan_All_Off+0x34>)
 80015e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015e8:	f7ff ffe4 	bl	80015b4 <Driver_Fan_Off>
	Driver_Fan_Off(FAN3);
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <Driver_Fan_All_Off+0x38>)
 80015ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f2:	f7ff ffdf 	bl	80015b4 <Driver_Fan_Off>
	Driver_Fan_Off(FAN4);
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <Driver_Fan_All_Off+0x3c>)
 80015f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015fc:	f7ff ffda 	bl	80015b4 <Driver_Fan_Off>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008
 800160c:	20000010 	.word	0x20000010
 8001610:	20000018 	.word	0x20000018

08001614 <Driver_Status_LED_On>:
Stat_LED_T STAT3 = { .port = STAT3_GPIO_Port, .pin = STAT3_Pin };
Stat_LED_T STAT4 = { .port = STAT4_GPIO_Port, .pin = STAT4_Pin };

// function to turn a status LED on
void Driver_Status_LED_On(Stat_LED_T led)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	463b      	mov	r3, r7
 800161c:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 1);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	88b9      	ldrh	r1, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f002 f9e8 	bl	80039fc <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <Driver_Status_LED_Off>:

// function to turn a status LED off
void Driver_Status_LED_Off(Stat_LED_T led)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	463b      	mov	r3, r7
 800163c:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 0);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	88b9      	ldrh	r1, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f002 f9d8 	bl	80039fc <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <Driver_Status_LED_SetHex>:

// function to convert a 4-bit hex value into LED status function calls
void Driver_Status_LED_SetHex(uint8_t value)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	if (value & 0x1)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <Driver_Status_LED_SetHex+0x20>
	{
		Driver_Status_LED_On(STAT1);
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <Driver_Status_LED_SetHex+0x94>)
 800166a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800166e:	f7ff ffd1 	bl	8001614 <Driver_Status_LED_On>
 8001672:	e004      	b.n	800167e <Driver_Status_LED_SetHex+0x2a>
	}
	else
	{
		Driver_Status_LED_Off(STAT1);
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <Driver_Status_LED_SetHex+0x94>)
 8001676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800167a:	f7ff ffdb 	bl	8001634 <Driver_Status_LED_Off>
	}

	if (value & 0x2)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <Driver_Status_LED_SetHex+0x40>
	{
		Driver_Status_LED_On(STAT2);
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <Driver_Status_LED_SetHex+0x98>)
 800168a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800168e:	f7ff ffc1 	bl	8001614 <Driver_Status_LED_On>
 8001692:	e004      	b.n	800169e <Driver_Status_LED_SetHex+0x4a>
	}
	else
	{
		Driver_Status_LED_Off(STAT2);
 8001694:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <Driver_Status_LED_SetHex+0x98>)
 8001696:	e893 0003 	ldmia.w	r3, {r0, r1}
 800169a:	f7ff ffcb 	bl	8001634 <Driver_Status_LED_Off>
	}

	if (value & 0x4)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <Driver_Status_LED_SetHex+0x60>
	{
		Driver_Status_LED_On(STAT3);
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <Driver_Status_LED_SetHex+0x9c>)
 80016aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ae:	f7ff ffb1 	bl	8001614 <Driver_Status_LED_On>
 80016b2:	e004      	b.n	80016be <Driver_Status_LED_SetHex+0x6a>
	}
	else
	{
		Driver_Status_LED_Off(STAT3);
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <Driver_Status_LED_SetHex+0x9c>)
 80016b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ba:	f7ff ffbb 	bl	8001634 <Driver_Status_LED_Off>
	}

	if (value & 0x8)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <Driver_Status_LED_SetHex+0x80>
	{
		Driver_Status_LED_On(STAT4);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <Driver_Status_LED_SetHex+0xa0>)
 80016ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ce:	f7ff ffa1 	bl	8001614 <Driver_Status_LED_On>
	}
	else
	{
		Driver_Status_LED_Off(STAT4);
	}
}
 80016d2:	e004      	b.n	80016de <Driver_Status_LED_SetHex+0x8a>
		Driver_Status_LED_Off(STAT4);
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <Driver_Status_LED_SetHex+0xa0>)
 80016d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016da:	f7ff ffab 	bl	8001634 <Driver_Status_LED_Off>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000020 	.word	0x20000020
 80016ec:	20000028 	.word	0x20000028
 80016f0:	20000030 	.word	0x20000030
 80016f4:	20000038 	.word	0x20000038

080016f8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <MX_ADC1_Init+0x98>)
 800170c:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <MX_ADC1_Init+0x9c>)
 800170e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001712:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001716:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001718:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <MX_ADC1_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800171e:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <MX_ADC1_Init+0x98>)
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <MX_ADC1_Init+0x98>)
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <MX_ADC1_Init+0xa0>)
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001746:	2201      	movs	r2, #1
 8001748:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_ADC1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001754:	2201      	movs	r2, #1
 8001756:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001758:	480d      	ldr	r0, [pc, #52]	@ (8001790 <MX_ADC1_Init+0x98>)
 800175a:	f001 f835 	bl	80027c8 <HAL_ADC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001764:	f000 f9ee 	bl	8001b44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001768:	230f      	movs	r3, #15
 800176a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800176c:	2301      	movs	r3, #1
 800176e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_ADC1_Init+0x98>)
 800177a:	f001 f869 	bl	8002850 <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001784:	f000 f9de 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200000c0 	.word	0x200000c0
 8001794:	40012000 	.word	0x40012000
 8001798:	0f000001 	.word	0x0f000001

0800179c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_ADC_MspInit+0x7c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d127      	bne.n	800180e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	4a15      	ldr	r2, [pc, #84]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ce:	4b13      	ldr	r3, [pc, #76]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BRAKE_CS_Pin;
 80017f6:	2320      	movs	r3, #32
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fa:	2303      	movs	r3, #3
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BRAKE_CS_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	@ (8001820 <HAL_ADC_MspInit+0x84>)
 800180a:	f001 ff63 	bl	80036d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	@ 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40012000 	.word	0x40012000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020800 	.word	0x40020800

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_DMA_Init+0x3c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <MX_DMA_Init+0x3c>)
 8001834:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_DMA_Init+0x3c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2011      	movs	r0, #17
 800184c:	f001 fb09 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001850:	2011      	movs	r0, #17
 8001852:	f001 fb22 	bl	8002e9a <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b5f      	ldr	r3, [pc, #380]	@ (80019fc <MX_GPIO_Init+0x198>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a5e      	ldr	r2, [pc, #376]	@ (80019fc <MX_GPIO_Init+0x198>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b5c      	ldr	r3, [pc, #368]	@ (80019fc <MX_GPIO_Init+0x198>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b58      	ldr	r3, [pc, #352]	@ (80019fc <MX_GPIO_Init+0x198>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a57      	ldr	r2, [pc, #348]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b55      	ldr	r3, [pc, #340]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b51      	ldr	r3, [pc, #324]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a50      	ldr	r2, [pc, #320]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b4e      	ldr	r3, [pc, #312]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b4a      	ldr	r3, [pc, #296]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a49      	ldr	r2, [pc, #292]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b47      	ldr	r3, [pc, #284]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a42      	ldr	r2, [pc, #264]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <MX_GPIO_Init+0x198>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 8001906:	2200      	movs	r2, #0
 8001908:	f640 5147 	movw	r1, #3399	@ 0xd47
 800190c:	483c      	ldr	r0, [pc, #240]	@ (8001a00 <MX_GPIO_Init+0x19c>)
 800190e:	f002 f875 	bl	80039fc <HAL_GPIO_WritePin>
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 8001912:	2200      	movs	r2, #0
 8001914:	f649 4130 	movw	r1, #39984	@ 0x9c30
 8001918:	483a      	ldr	r0, [pc, #232]	@ (8001a04 <MX_GPIO_Init+0x1a0>)
 800191a:	f002 f86f 	bl	80039fc <HAL_GPIO_WritePin>
                          |STAT4_Pin|FAN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 800191e:	2200      	movs	r2, #0
 8001920:	f243 3190 	movw	r1, #13200	@ 0x3390
 8001924:	4838      	ldr	r0, [pc, #224]	@ (8001a08 <MX_GPIO_Init+0x1a4>)
 8001926:	f002 f869 	bl	80039fc <HAL_GPIO_WritePin>
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800192a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001930:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	482f      	ldr	r0, [pc, #188]	@ (8001a00 <MX_GPIO_Init+0x19c>)
 8001942:	f001 fec7 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 8001946:	f640 5347 	movw	r3, #3399	@ 0xd47
 800194a:	617b      	str	r3, [r7, #20]
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4828      	ldr	r0, [pc, #160]	@ (8001a00 <MX_GPIO_Init+0x19c>)
 8001960:	f001 feb8 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 8001964:	f649 4330 	movw	r3, #39984	@ 0x9c30
 8001968:	617b      	str	r3, [r7, #20]
                          |STAT4_Pin|FAN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4821      	ldr	r0, [pc, #132]	@ (8001a04 <MX_GPIO_Init+0x1a0>)
 800197e:	f001 fea9 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001982:	2310      	movs	r3, #16
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001986:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	481a      	ldr	r0, [pc, #104]	@ (8001a00 <MX_GPIO_Init+0x19c>)
 8001998:	f001 fe9c 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 800199c:	f243 3390 	movw	r3, #13200	@ 0x3390
 80019a0:	617b      	str	r3, [r7, #20]
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4814      	ldr	r0, [pc, #80]	@ (8001a08 <MX_GPIO_Init+0x1a4>)
 80019b6:	f001 fe8d 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 80019ba:	2320      	movs	r3, #32
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	480e      	ldr	r0, [pc, #56]	@ (8001a08 <MX_GPIO_Init+0x1a4>)
 80019d0:	f001 fe80 	bl	80036d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	200a      	movs	r0, #10
 80019da:	f001 fa42 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019de:	200a      	movs	r0, #10
 80019e0:	f001 fa5b 	bl	8002e9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2017      	movs	r0, #23
 80019ea:	f001 fa3a 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ee:	2017      	movs	r0, #23
 80019f0:	f001 fa53 	bl	8002e9a <HAL_NVIC_EnableIRQ>

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400

08001a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a10:	f000 fe44 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a14:	f000 f824 	bl	8001a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a18:	f7ff ff24 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a1c:	f7ff ff02 	bl	8001824 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a20:	f000 fcdc 	bl	80023dc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001a24:	f000 fc86 	bl	8002334 <MX_UART4_Init>
  MX_SPI2_Init();
 8001a28:	f000 f892 	bl	8001b50 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001a2c:	f000 fa42 	bl	8001eb4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001a30:	f000 fb02 	bl	8002038 <MX_TIM8_Init>
  MX_UART5_Init();
 8001a34:	f000 fca8 	bl	8002388 <MX_UART5_Init>
  MX_TIM1_Init();
 8001a38:	f000 f9a0 	bl	8001d7c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a3c:	f7ff fe5c 	bl	80016f8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001a40:	f000 f9ec 	bl	8001e1c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001a44:	f000 fac2 	bl	8001fcc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // disable timer interrupt for tick() to make sure init() function completes
  HAL_TIM_Base_Stop_IT(&htim6);
 8001a48:	4804      	ldr	r0, [pc, #16]	@ (8001a5c <main+0x50>)
 8001a4a:	f003 fcf1 	bl	8005430 <HAL_TIM_Base_Stop_IT>
  // call init() function for state machine
  App_StateMachine_Init();
 8001a4e:	f7ff fc87 	bl	8001360 <App_StateMachine_Init>
  // re-enable timer interrupt for tick()
  HAL_TIM_Base_Start_IT(&htim6);
 8001a52:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <main+0x50>)
 8001a54:	f003 fc7c 	bl	8005350 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <main+0x4c>
 8001a5c:	20000238 	.word	0x20000238

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	@ 0x50
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	2234      	movs	r2, #52	@ 0x34
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fd04 	bl	800747c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <SystemClock_Config+0xdc>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001b3c <SystemClock_Config+0xdc>)
 8001a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a94:	4b29      	ldr	r3, [pc, #164]	@ (8001b3c <SystemClock_Config+0xdc>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <SystemClock_Config+0xe0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a25      	ldr	r2, [pc, #148]	@ (8001b40 <SystemClock_Config+0xe0>)
 8001aaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <SystemClock_Config+0xe0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ad4:	23b4      	movs	r3, #180	@ 0xb4
 8001ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fb5f 	bl	80041ac <HAL_RCC_OscConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001af4:	f000 f826 	bl	8001b44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001af8:	f001 ffbe 	bl	8003a78 <HAL_PWREx_EnableOverDrive>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b02:	f000 f81f 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b06:	230f      	movs	r3, #15
 8001b08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	2105      	movs	r1, #5
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fff7 	bl	8003b18 <HAL_RCC_ClockConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b30:	f000 f808 	bl	8001b44 <Error_Handler>
  }
}
 8001b34:	bf00      	nop
 8001b36:	3750      	adds	r7, #80	@ 0x50
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b54:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b56:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <MX_SPI2_Init+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b62:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <MX_SPI2_Init+0x64>)
 8001ba2:	f002 fda1 	bl	80046e8 <HAL_SPI_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bac:	f7ff ffca 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000108 	.word	0x20000108
 8001bb8:	40003800 	.word	0x40003800

08001bbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_SPI_MspInit+0x84>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12c      	bne.n	8001c38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001c16:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c28:	2305      	movs	r3, #5
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001c34:	f001 fd4e 	bl	80036d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	@ 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40003800 	.word	0x40003800
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020400 	.word	0x40020400

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c8a:	2007      	movs	r0, #7
 8001c8c:	f001 f8de 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf2:	f000 fd25 	bl	8002740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8001cfe:	2010      	movs	r0, #16
 8001d00:	f001 fe96 	bl	8003a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <DMA1_Stream6_IRQHandler+0x10>)
 8001d0e:	f001 fa77 	bl	8003200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200003a0 	.word	0x200003a0

08001d1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8001d20:	2020      	movs	r0, #32
 8001d22:	f001 fe85 	bl	8003a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d30:	4802      	ldr	r0, [pc, #8]	@ (8001d3c <USART2_IRQHandler+0x10>)
 8001d32:	f004 fbff 	bl	8006534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000358 	.word	0x20000358

08001d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  App_StateMachine_Tick();
 8001d44:	f7ff fb96 	bl	8001474 <App_StateMachine_Tick>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <TIM6_DAC_IRQHandler+0x14>)
 8001d4a:	f003 fc52 	bl	80055f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000238 	.word	0x20000238

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	463b      	mov	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e18 <MX_TIM1_Init+0x9c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001dac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001db0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc4:	4813      	ldr	r0, [pc, #76]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001dc6:	f003 fa73 	bl	80052b0 <HAL_TIM_Base_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001dd0:	f7ff feb8 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001de2:	f003 fe15 	bl	8005a10 <HAL_TIM_ConfigClockSource>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001dec:	f7ff feaa 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_TIM1_Init+0x98>)
 8001dfe:	f004 f9f7 	bl	80061f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e08:	f7ff fe9c 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000160 	.word	0x20000160
 8001e18:	40010000 	.word	0x40010000

08001e1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	463b      	mov	r3, r7
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e60:	4813      	ldr	r0, [pc, #76]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e62:	f003 fa25 	bl	80052b0 <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e6c:	f7ff fe6a 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e7e:	f003 fdc7 	bl	8005a10 <HAL_TIM_ConfigClockSource>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e88:	f7ff fe5c 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_TIM2_Init+0x94>)
 8001e9a:	f004 f9a9 	bl	80061f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ea4:	f7ff fe4e 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200001a8 	.word	0x200001a8

08001eb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08e      	sub	sp, #56	@ 0x38
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ee4:	4b37      	ldr	r3, [pc, #220]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001ee6:	4a38      	ldr	r2, [pc, #224]	@ (8001fc8 <MX_TIM3_Init+0x114>)
 8001ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eea:	4b36      	ldr	r3, [pc, #216]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b34      	ldr	r3, [pc, #208]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ef6:	4b33      	ldr	r3, [pc, #204]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001ef8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001efc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f0a:	482e      	ldr	r0, [pc, #184]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f0c:	f003 f9d0 	bl	80052b0 <HAL_TIM_Base_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f16:	f7ff fe15 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4827      	ldr	r0, [pc, #156]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f28:	f003 fd72 	bl	8005a10 <HAL_TIM_ConfigClockSource>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f32:	f7ff fe07 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001f36:	4823      	ldr	r0, [pc, #140]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f38:	f003 faa9 	bl	800548e <HAL_TIM_OC_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f42:	f7ff fdff 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f46:	481f      	ldr	r0, [pc, #124]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f48:	f003 fafa 	bl	8005540 <HAL_TIM_PWM_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001f52:	f7ff fdf7 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	4619      	mov	r1, r3
 8001f64:	4817      	ldr	r0, [pc, #92]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f66:	f004 f943 	bl	80061f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001f70:	f7ff fde8 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2208      	movs	r2, #8
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480e      	ldr	r0, [pc, #56]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001f8c:	f003 fc22 	bl	80057d4 <HAL_TIM_OC_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001f96:	f7ff fdd5 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9a:	2360      	movs	r3, #96	@ 0x60
 8001f9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001fa6:	f003 fc71 	bl	800588c <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001fb0:	f7ff fdc8 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb4:	4803      	ldr	r0, [pc, #12]	@ (8001fc4 <MX_TIM3_Init+0x110>)
 8001fb6:	f000 f95b 	bl	8002270 <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3738      	adds	r7, #56	@ 0x38
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200001f0 	.word	0x200001f0
 8001fc8:	40000400 	.word	0x40000400

08001fcc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fdc:	4a15      	ldr	r2, [pc, #84]	@ (8002034 <MX_TIM6_Init+0x68>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fe2:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001fe6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ff0:	2264      	movs	r2, #100	@ 0x64
 8001ff2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ff6:	2280      	movs	r2, #128	@ 0x80
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ffa:	480d      	ldr	r0, [pc, #52]	@ (8002030 <MX_TIM6_Init+0x64>)
 8001ffc:	f003 f958 	bl	80052b0 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002006:	f7ff fd9d 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800200a:	2320      	movs	r3, #32
 800200c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002012:	463b      	mov	r3, r7
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	@ (8002030 <MX_TIM6_Init+0x64>)
 8002018:	f004 f8ea 	bl	80061f0 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002022:	f7ff fd8f 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000238 	.word	0x20000238
 8002034:	40001000 	.word	0x40001000

08002038 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b096      	sub	sp, #88	@ 0x58
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
 8002064:	611a      	str	r2, [r3, #16]
 8002066:	615a      	str	r2, [r3, #20]
 8002068:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2220      	movs	r2, #32
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f005 fa03 	bl	800747c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002076:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <MX_TIM8_Init+0x134>)
 8002078:	4a3d      	ldr	r2, [pc, #244]	@ (8002170 <MX_TIM8_Init+0x138>)
 800207a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800207c:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <MX_TIM8_Init+0x134>)
 800207e:	2200      	movs	r2, #0
 8002080:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <MX_TIM8_Init+0x134>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002088:	4b38      	ldr	r3, [pc, #224]	@ (800216c <MX_TIM8_Init+0x134>)
 800208a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800208e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <MX_TIM8_Init+0x134>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002096:	4b35      	ldr	r3, [pc, #212]	@ (800216c <MX_TIM8_Init+0x134>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b33      	ldr	r3, [pc, #204]	@ (800216c <MX_TIM8_Init+0x134>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020a2:	4832      	ldr	r0, [pc, #200]	@ (800216c <MX_TIM8_Init+0x134>)
 80020a4:	f003 f904 	bl	80052b0 <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80020ae:	f7ff fd49 	bl	8001b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020bc:	4619      	mov	r1, r3
 80020be:	482b      	ldr	r0, [pc, #172]	@ (800216c <MX_TIM8_Init+0x134>)
 80020c0:	f003 fca6 	bl	8005a10 <HAL_TIM_ConfigClockSource>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020ca:	f7ff fd3b 	bl	8001b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80020ce:	4827      	ldr	r0, [pc, #156]	@ (800216c <MX_TIM8_Init+0x134>)
 80020d0:	f003 fa36 	bl	8005540 <HAL_TIM_PWM_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80020da:	f7ff fd33 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020ea:	4619      	mov	r1, r3
 80020ec:	481f      	ldr	r0, [pc, #124]	@ (800216c <MX_TIM8_Init+0x134>)
 80020ee:	f004 f87f 	bl	80061f0 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80020f8:	f7ff fd24 	bl	8001b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fc:	2360      	movs	r3, #96	@ 0x60
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002118:	220c      	movs	r2, #12
 800211a:	4619      	mov	r1, r3
 800211c:	4813      	ldr	r0, [pc, #76]	@ (800216c <MX_TIM8_Init+0x134>)
 800211e:	f003 fbb5 	bl	800588c <HAL_TIM_PWM_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8002128:	f7ff fd0c 	bl	8001b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002140:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002144:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4807      	ldr	r0, [pc, #28]	@ (800216c <MX_TIM8_Init+0x134>)
 8002150:	f004 f8ca 	bl	80062e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800215a:	f7ff fcf3 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800215e:	4803      	ldr	r0, [pc, #12]	@ (800216c <MX_TIM8_Init+0x134>)
 8002160:	f000 f886 	bl	8002270 <HAL_TIM_MspPostInit>

}
 8002164:	bf00      	nop
 8002166:	3758      	adds	r7, #88	@ 0x58
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000280 	.word	0x20000280
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a36      	ldr	r2, [pc, #216]	@ (800225c <HAL_TIM_Base_MspInit+0xe8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	4a34      	ldr	r2, [pc, #208]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6453      	str	r3, [r2, #68]	@ 0x44
 8002196:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021a2:	e056      	b.n	8002252 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021be:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]
}
 80021ca:	e042      	b.n	8002252 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <HAL_TIM_Base_MspInit+0xf0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4a20      	ldr	r2, [pc, #128]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
}
 80021f2:	e02e      	b.n	8002252 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM6)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002268 <HAL_TIM_Base_MspInit+0xf4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d116      	bne.n	800222c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	4a16      	ldr	r2, [pc, #88]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 8002208:	f043 0310 	orr.w	r3, r3, #16
 800220c:	6413      	str	r3, [r2, #64]	@ 0x40
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2036      	movs	r0, #54	@ 0x36
 8002220:	f000 fe1f 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002224:	2036      	movs	r0, #54	@ 0x36
 8002226:	f000 fe38 	bl	8002e9a <HAL_NVIC_EnableIRQ>
}
 800222a:	e012      	b.n	8002252 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <HAL_TIM_Base_MspInit+0xf8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d10d      	bne.n	8002252 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_TIM_Base_MspInit+0xec>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
}
 8002252:	bf00      	nop
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000
 8002260:	40023800 	.word	0x40023800
 8002264:	40000400 	.word	0x40000400
 8002268:	40001000 	.word	0x40001000
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_TIM_MspPostInit+0xb0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d11e      	bne.n	80022d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_TIM_MspPostInit+0xb4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <HAL_TIM_MspPostInit+0xb4>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = STR_INPUTB__Pin|LED_SIG_Pin;
 80022ae:	2303      	movs	r3, #3
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4817      	ldr	r0, [pc, #92]	@ (8002328 <HAL_TIM_MspPostInit+0xb8>)
 80022ca:	f001 fa03 	bl	80036d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022ce:	e023      	b.n	8002318 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a15      	ldr	r2, [pc, #84]	@ (800232c <HAL_TIM_MspPostInit+0xbc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d11e      	bne.n	8002318 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a10      	ldr	r2, [pc, #64]	@ (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_TIM_MspPostInit+0xb4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VESC_PPM_Pin;
 80022f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002308:	2303      	movs	r3, #3
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VESC_PPM_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	4807      	ldr	r0, [pc, #28]	@ (8002330 <HAL_TIM_MspPostInit+0xc0>)
 8002314:	f001 f9de 	bl	80036d4 <HAL_GPIO_Init>
}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	@ 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40000400 	.word	0x40000400
 8002324:	40023800 	.word	0x40023800
 8002328:	40020400 	.word	0x40020400
 800232c:	40010400 	.word	0x40010400
 8002330:	40020800 	.word	0x40020800

08002334 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <MX_UART4_Init+0x4c>)
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <MX_UART4_Init+0x50>)
 800233c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <MX_UART4_Init+0x4c>)
 8002340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002344:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <MX_UART4_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <MX_UART4_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <MX_UART4_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <MX_UART4_Init+0x4c>)
 800235a:	220c      	movs	r2, #12
 800235c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <MX_UART4_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <MX_UART4_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <MX_UART4_Init+0x4c>)
 800236c:	f004 f822 	bl	80063b4 <HAL_UART_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002376:	f7ff fbe5 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200002c8 	.word	0x200002c8
 8002384:	40004c00 	.word	0x40004c00

08002388 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <MX_UART5_Init+0x4c>)
 800238e:	4a12      	ldr	r2, [pc, #72]	@ (80023d8 <MX_UART5_Init+0x50>)
 8002390:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <MX_UART5_Init+0x4c>)
 8002394:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002398:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <MX_UART5_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <MX_UART5_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <MX_UART5_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80023ac:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <MX_UART5_Init+0x4c>)
 80023ae:	220c      	movs	r2, #12
 80023b0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <MX_UART5_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <MX_UART5_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <MX_UART5_Init+0x4c>)
 80023c0:	f003 fff8 	bl	80063b4 <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80023ca:	f7ff fbbb 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000310 	.word	0x20000310
 80023d8:	40005000 	.word	0x40005000

080023dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	@ (800242c <MX_USART2_UART_Init+0x50>)
 80023e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 80023e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 8002402:	220c      	movs	r2, #12
 8002404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	@ (8002428 <MX_USART2_UART_Init+0x4c>)
 8002414:	f003 ffce 	bl	80063b4 <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800241e:	f7ff fb91 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000358 	.word	0x20000358
 800242c:	40004400 	.word	0x40004400

08002430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	@ 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a75      	ldr	r2, [pc, #468]	@ (8002624 <HAL_UART_MspInit+0x1f4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d12c      	bne.n	80024ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	4b74      	ldr	r3, [pc, #464]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4a73      	ldr	r2, [pc, #460]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 800245c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002460:	6413      	str	r3, [r2, #64]	@ 0x40
 8002462:	4b71      	ldr	r3, [pc, #452]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800246a:	623b      	str	r3, [r7, #32]
 800246c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	4b6d      	ldr	r3, [pc, #436]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a6c      	ldr	r2, [pc, #432]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b6a      	ldr	r3, [pc, #424]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800248a:	2303      	movs	r3, #3
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002496:	2303      	movs	r3, #3
 8002498:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800249a:	2308      	movs	r3, #8
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a2:	4619      	mov	r1, r3
 80024a4:	4861      	ldr	r0, [pc, #388]	@ (800262c <HAL_UART_MspInit+0x1fc>)
 80024a6:	f001 f915 	bl	80036d4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024aa:	e0b7      	b.n	800261c <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==UART5)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002630 <HAL_UART_MspInit+0x200>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d14b      	bne.n	800254e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	4a5a      	ldr	r2, [pc, #360]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c6:	4b58      	ldr	r3, [pc, #352]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	4b54      	ldr	r3, [pc, #336]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a53      	ldr	r2, [pc, #332]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b51      	ldr	r3, [pc, #324]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800250a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800251c:	2308      	movs	r3, #8
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002524:	4619      	mov	r1, r3
 8002526:	4843      	ldr	r0, [pc, #268]	@ (8002634 <HAL_UART_MspInit+0x204>)
 8002528:	f001 f8d4 	bl	80036d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800252c:	2304      	movs	r3, #4
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800253c:	2308      	movs	r3, #8
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	483c      	ldr	r0, [pc, #240]	@ (8002638 <HAL_UART_MspInit+0x208>)
 8002548:	f001 f8c4 	bl	80036d4 <HAL_GPIO_Init>
}
 800254c:	e066      	b.n	800261c <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==USART2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a3a      	ldr	r2, [pc, #232]	@ (800263c <HAL_UART_MspInit+0x20c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d161      	bne.n	800261c <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	4b32      	ldr	r3, [pc, #200]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	4a31      	ldr	r2, [pc, #196]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002566:	6413      	str	r3, [r2, #64]	@ 0x40
 8002568:	4b2f      	ldr	r3, [pc, #188]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	4b2b      	ldr	r3, [pc, #172]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	4a2a      	ldr	r2, [pc, #168]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6313      	str	r3, [r2, #48]	@ 0x30
 8002584:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <HAL_UART_MspInit+0x1f8>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002590:	230c      	movs	r3, #12
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a0:	2307      	movs	r3, #7
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	4820      	ldr	r0, [pc, #128]	@ (800262c <HAL_UART_MspInit+0x1fc>)
 80025ac:	f001 f892 	bl	80036d4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80025b0:	4b23      	ldr	r3, [pc, #140]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025b2:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <HAL_UART_MspInit+0x214>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025be:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025c0:	2240      	movs	r2, #64	@ 0x40
 80025c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025e4:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025f0:	4813      	ldr	r0, [pc, #76]	@ (8002640 <HAL_UART_MspInit+0x210>)
 80025f2:	f000 fc6d 	bl	8002ed0 <HAL_DMA_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 80025fc:	f7ff faa2 	bl	8001b44 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0f      	ldr	r2, [pc, #60]	@ (8002640 <HAL_UART_MspInit+0x210>)
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38
 8002606:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <HAL_UART_MspInit+0x210>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	2026      	movs	r0, #38	@ 0x26
 8002612:	f000 fc26 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002616:	2026      	movs	r0, #38	@ 0x26
 8002618:	f000 fc3f 	bl	8002e9a <HAL_NVIC_EnableIRQ>
}
 800261c:	bf00      	nop
 800261e:	3738      	adds	r7, #56	@ 0x38
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40004c00 	.word	0x40004c00
 8002628:	40023800 	.word	0x40023800
 800262c:	40020000 	.word	0x40020000
 8002630:	40005000 	.word	0x40005000
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40004400 	.word	0x40004400
 8002640:	200003a0 	.word	0x200003a0
 8002644:	400260a0 	.word	0x400260a0

08002648 <Reset_Handler>:
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002680 <LoopFillZerobss+0xe>
 800264c:	f7ff fb84 	bl	8001d58 <SystemInit>
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <LoopFillZerobss+0x12>)
 8002652:	490d      	ldr	r1, [pc, #52]	@ (8002688 <LoopFillZerobss+0x16>)
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <LoopFillZerobss+0x1a>)
 8002656:	2300      	movs	r3, #0
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:
 800265a:	58d4      	ldr	r4, [r2, r3]
 800265c:	50c4      	str	r4, [r0, r3]
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:
 8002660:	18c4      	adds	r4, r0, r3
 8002662:	428c      	cmp	r4, r1
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <LoopFillZerobss+0x1e>)
 8002668:	4c0a      	ldr	r4, [pc, #40]	@ (8002694 <LoopFillZerobss+0x22>)
 800266a:	2300      	movs	r3, #0
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:
 8002672:	42a2      	cmp	r2, r4
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>
 8002676:	f004 ff09 	bl	800748c <__libc_init_array>
 800267a:	f7ff f9c7 	bl	8001a0c <main>
 800267e:	4770      	bx	lr
 8002680:	20020000 	.word	0x20020000
 8002684:	20000000 	.word	0x20000000
 8002688:	2000004c 	.word	0x2000004c
 800268c:	080075e0 	.word	0x080075e0
 8002690:	2000004c 	.word	0x2000004c
 8002694:	20000404 	.word	0x20000404

08002698 <ADC_IRQHandler>:
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <HAL_Init+0x40>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_Init+0x40>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <HAL_Init+0x40>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f000 fbc1 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f000 f808 	bl	80026e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d0:	f7ff fabc 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_InitTick+0x54>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_InitTick+0x58>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fbd9 	bl	8002eb6 <HAL_SYSTICK_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00e      	b.n	800272c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d80a      	bhi.n	800272a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800271c:	f000 fba1 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002720:	4a06      	ldr	r2, [pc, #24]	@ (800273c <HAL_InitTick+0x5c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000040 	.word	0x20000040
 8002738:	20000048 	.word	0x20000048
 800273c:	20000044 	.word	0x20000044

08002740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_IncTick+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b06      	ldr	r3, [pc, #24]	@ (8002764 <HAL_IncTick+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <HAL_IncTick+0x24>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000048 	.word	0x20000048
 8002764:	20000400 	.word	0x20000400

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_GetTick+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000400 	.word	0x20000400

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff ffee 	bl	8002768 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_Delay+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a6:	bf00      	nop
 80027a8:	f7ff ffde 	bl	8002768 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000048 	.word	0x20000048

080027c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e033      	b.n	8002846 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe ffd8 	bl	800179c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800280e:	f023 0302 	bic.w	r3, r3, #2
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f94a 	bl	8002ab4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
 8002836:	e001      	b.n	800283c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x1c>
 8002868:	2302      	movs	r3, #2
 800286a:	e113      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x244>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b09      	cmp	r3, #9
 800287a:	d925      	bls.n	80028c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	3b1e      	subs	r3, #30
 8002892:	2207      	movs	r2, #7
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43da      	mvns	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	400a      	ands	r2, r1
 80028a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68d9      	ldr	r1, [r3, #12]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	4603      	mov	r3, r0
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4403      	add	r3, r0
 80028ba:	3b1e      	subs	r3, #30
 80028bc:	409a      	lsls	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	e022      	b.n	800290e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6919      	ldr	r1, [r3, #16]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	2207      	movs	r2, #7
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	400a      	ands	r2, r1
 80028ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4403      	add	r3, r0
 8002904:	409a      	lsls	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d824      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b05      	subs	r3, #5
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b05      	subs	r3, #5
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	635a      	str	r2, [r3, #52]	@ 0x34
 800295e:	e04c      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	d824      	bhi.n	80029b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	3b23      	subs	r3, #35	@ 0x23
 800297a:	221f      	movs	r2, #31
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43da      	mvns	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	400a      	ands	r2, r1
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3b23      	subs	r3, #35	@ 0x23
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80029b0:	e023      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b41      	subs	r3, #65	@ 0x41
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b41      	subs	r3, #65	@ 0x41
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029fa:	4b29      	ldr	r3, [pc, #164]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x250>)
 80029fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a28      	ldr	r2, [pc, #160]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x254>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10f      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1d8>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d10b      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x254>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12b      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x23a>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x258>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x1f4>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b11      	cmp	r3, #17
 8002a42:	d122      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a11      	ldr	r2, [pc, #68]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x258>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d111      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_ADC_ConfigChannel+0x25c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a11      	ldr	r2, [pc, #68]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x260>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	0c9a      	lsrs	r2, r3, #18
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40012300 	.word	0x40012300
 8002aa4:	40012000 	.word	0x40012000
 8002aa8:	10000012 	.word	0x10000012
 8002aac:	20000040 	.word	0x20000040
 8002ab0:	431bde83 	.word	0x431bde83

08002ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002abc:	4b79      	ldr	r3, [pc, #484]	@ (8002ca4 <ADC_Init+0x1f0>)
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	021a      	lsls	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	4a58      	ldr	r2, [pc, #352]	@ (8002ca8 <ADC_Init+0x1f4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d022      	beq.n	8002b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	e00f      	b.n	8002bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0202 	bic.w	r2, r2, #2
 8002bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e1b      	ldrb	r3, [r3, #24]
 8002bcc:	005a      	lsls	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	035a      	lsls	r2, r3, #13
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	e007      	b.n	8002c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	051a      	lsls	r2, r3, #20
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c6a:	025a      	lsls	r2, r3, #9
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	029a      	lsls	r2, r3, #10
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	0f000001 	.word	0x0f000001

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	@ (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	@ (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	@ (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	@ (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff29 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff3e 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff31 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ffa2 	bl	8002e08 <SysTick_Config>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff fc44 	bl	8002768 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e099      	b.n	8003020 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0c:	e00f      	b.n	8002f2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f0e:	f7ff fc2b 	bl	8002768 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d908      	bls.n	8002f2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2203      	movs	r2, #3
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e078      	b.n	8003020 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e8      	bne.n	8002f0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <HAL_DMA_Init+0x158>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d107      	bne.n	8002f98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	4313      	orrs	r3, r2
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0307 	bic.w	r3, r3, #7
 8002fae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d117      	bne.n	8002ff2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fb01 	bl	80035dc <DMA_CheckFifoParam>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e016      	b.n	8003020 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fab8 	bl	8003570 <DMA_CalcBaseAndBitshift>
 8003000:	4603      	mov	r3, r0
 8003002:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	223f      	movs	r2, #63	@ 0x3f
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	f010803f 	.word	0xf010803f

0800302c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_DMA_Start_IT+0x26>
 800304e:	2302      	movs	r3, #2
 8003050:	e040      	b.n	80030d4 <HAL_DMA_Start_IT+0xa8>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d12f      	bne.n	80030c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fa4a 	bl	8003514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	223f      	movs	r2, #63	@ 0x3f
 8003086:	409a      	lsls	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0216 	orr.w	r2, r2, #22
 800309a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0208 	orr.w	r2, r2, #8
 80030b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e005      	b.n	80030d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030ea:	f7ff fb3d 	bl	8002768 <HAL_GetTick>
 80030ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d008      	beq.n	800310e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2280      	movs	r2, #128	@ 0x80
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e052      	b.n	80031b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0216 	bic.w	r2, r2, #22
 800311c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800312c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_DMA_Abort+0x62>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0208 	bic.w	r2, r2, #8
 800314c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315e:	e013      	b.n	8003188 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003160:	f7ff fb02 	bl	8002768 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b05      	cmp	r3, #5
 800316c:	d90c      	bls.n	8003188 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2203      	movs	r2, #3
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e015      	b.n	80031b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e4      	bne.n	8003160 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319a:	223f      	movs	r2, #63	@ 0x3f
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d004      	beq.n	80031da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2280      	movs	r2, #128	@ 0x80
 80031d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00c      	b.n	80031f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2205      	movs	r2, #5
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800320c:	4b8e      	ldr	r3, [pc, #568]	@ (8003448 <HAL_DMA_IRQHandler+0x248>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a8e      	ldr	r2, [pc, #568]	@ (800344c <HAL_DMA_IRQHandler+0x24c>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322a:	2208      	movs	r2, #8
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0204 	bic.w	r2, r2, #4
 8003252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	2208      	movs	r2, #8
 800325a:	409a      	lsls	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	2201      	movs	r2, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328e:	2201      	movs	r2, #1
 8003290:	409a      	lsls	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	2204      	movs	r2, #4
 80032a8:	409a      	lsls	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c4:	2204      	movs	r2, #4
 80032c6:	409a      	lsls	r2, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032dc:	2210      	movs	r2, #16
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d043      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d03c      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	2210      	movs	r2, #16
 80032fc:	409a      	lsls	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d018      	beq.n	8003342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d024      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
 800332e:	e01f      	b.n	8003370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
 8003340:	e016      	b.n	8003370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0208 	bic.w	r2, r2, #8
 800335e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003374:	2220      	movs	r2, #32
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 808f 	beq.w	80034a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8087 	beq.w	80034a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	2220      	movs	r2, #32
 8003398:	409a      	lsls	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d136      	bne.n	8003418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0216 	bic.w	r2, r2, #22
 80033b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <HAL_DMA_IRQHandler+0x1da>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0208 	bic.w	r2, r2, #8
 80033e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ee:	223f      	movs	r2, #63	@ 0x3f
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340a:	2b00      	cmp	r3, #0
 800340c:	d07e      	beq.n	800350c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
        }
        return;
 8003416:	e079      	b.n	800350c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	2b00      	cmp	r3, #0
 800343a:	d031      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e02c      	b.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
 8003446:	bf00      	nop
 8003448:	20000040 	.word	0x20000040
 800344c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d023      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
 8003460:	e01e      	b.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10f      	bne.n	8003490 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0210 	bic.w	r2, r2, #16
 800347e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d032      	beq.n	800350e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2205      	movs	r2, #5
 80034b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d307      	bcc.n	80034e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f2      	bne.n	80034cc <HAL_DMA_IRQHandler+0x2cc>
 80034e6:	e000      	b.n	80034ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
 800350a:	e000      	b.n	800350e <HAL_DMA_IRQHandler+0x30e>
        return;
 800350c:	bf00      	nop
    }
  }
}
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d108      	bne.n	8003554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003552:	e007      	b.n	8003564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3b10      	subs	r3, #16
 8003580:	4a14      	ldr	r2, [pc, #80]	@ (80035d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800358a:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <DMA_CalcBaseAndBitshift+0x68>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d909      	bls.n	80035b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80035b0:	e007      	b.n	80035c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	aaaaaaab 	.word	0xaaaaaaab
 80035d8:	080075c8 	.word	0x080075c8

080035dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11f      	bne.n	8003636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d856      	bhi.n	80036aa <DMA_CheckFifoParam+0xce>
 80035fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <DMA_CheckFifoParam+0x28>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	08003627 	.word	0x08003627
 800360c:	08003615 	.word	0x08003615
 8003610:	080036ab 	.word	0x080036ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d046      	beq.n	80036ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e043      	b.n	80036ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800362e:	d140      	bne.n	80036b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e03d      	b.n	80036b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800363e:	d121      	bne.n	8003684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d837      	bhi.n	80036b6 <DMA_CheckFifoParam+0xda>
 8003646:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <DMA_CheckFifoParam+0x70>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003663 	.word	0x08003663
 8003654:	0800365d 	.word	0x0800365d
 8003658:	08003675 	.word	0x08003675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e030      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e022      	b.n	80036ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003682:	e01c      	b.n	80036be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d903      	bls.n	8003692 <DMA_CheckFifoParam+0xb6>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d003      	beq.n	8003698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003690:	e018      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e015      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e00b      	b.n	80036c2 <DMA_CheckFifoParam+0xe6>
      break;
 80036aa:	bf00      	nop
 80036ac:	e00a      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e008      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e006      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e004      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
    }
  } 
  
  return status; 
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	@ 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e165      	b.n	80039bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	f040 8154 	bne.w	80039b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d005      	beq.n	8003726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003722:	2b02      	cmp	r3, #2
 8003724:	d130      	bne.n	8003788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d017      	beq.n	80037c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	69b9      	ldr	r1, [r7, #24]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80ae 	beq.w	80039b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b5d      	ldr	r3, [pc, #372]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4a5c      	ldr	r2, [pc, #368]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 8003864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003868:	6453      	str	r3, [r2, #68]	@ 0x44
 800386a:	4b5a      	ldr	r3, [pc, #360]	@ (80039d4 <HAL_GPIO_Init+0x300>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003876:	4a58      	ldr	r2, [pc, #352]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4f      	ldr	r2, [pc, #316]	@ (80039dc <HAL_GPIO_Init+0x308>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d025      	beq.n	80038ee <HAL_GPIO_Init+0x21a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4e      	ldr	r2, [pc, #312]	@ (80039e0 <HAL_GPIO_Init+0x30c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_GPIO_Init+0x216>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4d      	ldr	r2, [pc, #308]	@ (80039e4 <HAL_GPIO_Init+0x310>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x212>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4c      	ldr	r2, [pc, #304]	@ (80039e8 <HAL_GPIO_Init+0x314>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x20e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4b      	ldr	r2, [pc, #300]	@ (80039ec <HAL_GPIO_Init+0x318>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x20a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <HAL_GPIO_Init+0x31c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x206>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a49      	ldr	r2, [pc, #292]	@ (80039f4 <HAL_GPIO_Init+0x320>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x202>
 80038d2:	2306      	movs	r3, #6
 80038d4:	e00c      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e00a      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038da:	2305      	movs	r3, #5
 80038dc:	e008      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038de:	2304      	movs	r3, #4
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038e2:	2303      	movs	r3, #3
 80038e4:	e004      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e002      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_GPIO_Init+0x21c>
 80038ee:	2300      	movs	r3, #0
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	f002 0203 	and.w	r2, r2, #3
 80038f6:	0092      	lsls	r2, r2, #2
 80038f8:	4093      	lsls	r3, r2
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003900:	4935      	ldr	r1, [pc, #212]	@ (80039d8 <HAL_GPIO_Init+0x304>)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	3302      	adds	r3, #2
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800390e:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003932:	4a31      	ldr	r2, [pc, #196]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003938:	4b2f      	ldr	r3, [pc, #188]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800395c:	4a26      	ldr	r2, [pc, #152]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003962:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003986:	4a1c      	ldr	r2, [pc, #112]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800398c:	4b1a      	ldr	r3, [pc, #104]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b0:	4a11      	ldr	r2, [pc, #68]	@ (80039f8 <HAL_GPIO_Init+0x324>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b0f      	cmp	r3, #15
 80039c0:	f67f ae96 	bls.w	80036f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	@ 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40021400 	.word	0x40021400
 80039f4:	40021800 	.word	0x40021800
 80039f8:	40013c00 	.word	0x40013c00

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a0c:	787b      	ldrb	r3, [r7, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a18:	e003      	b.n	8003a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a3a:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d006      	beq.n	8003a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a46:	4a05      	ldr	r2, [pc, #20]	@ (8003a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f806 	bl	8003a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40013c00 	.word	0x40013c00

08003a60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <HAL_PWREx_EnableOverDrive+0x94>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa4:	f7fe fe60 	bl	8002768 <HAL_GetTick>
 8003aa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003aaa:	e009      	b.n	8003ac0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aac:	f7fe fe5c 	bl	8002768 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003aba:	d901      	bls.n	8003ac0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e01f      	b.n	8003b00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ac0:	4b13      	ldr	r3, [pc, #76]	@ (8003b10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003acc:	d1ee      	bne.n	8003aac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ace:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad4:	f7fe fe48 	bl	8002768 <HAL_GetTick>
 8003ad8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ada:	e009      	b.n	8003af0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003adc:	f7fe fe44 	bl	8002768 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003aea:	d901      	bls.n	8003af0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e007      	b.n	8003b00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003afc:	d1ee      	bne.n	8003adc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	420e0040 	.word	0x420e0040
 8003b10:	40007000 	.word	0x40007000
 8003b14:	420e0044 	.word	0x420e0044

08003b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0cc      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b68      	ldr	r3, [pc, #416]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d90c      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b65      	ldr	r3, [pc, #404]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b63      	ldr	r3, [pc, #396]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0b8      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a58      	ldr	r2, [pc, #352]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b84:	4b53      	ldr	r3, [pc, #332]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a52      	ldr	r2, [pc, #328]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4b50      	ldr	r3, [pc, #320]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	494d      	ldr	r1, [pc, #308]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d044      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b47      	ldr	r3, [pc, #284]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d119      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e07f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e067      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf6:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f023 0203 	bic.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4934      	ldr	r1, [pc, #208]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c08:	f7fe fdae 	bl	8002768 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c10:	f7fe fdaa 	bl	8002768 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e04f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 020c 	and.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d1eb      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c38:	4b25      	ldr	r3, [pc, #148]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d20c      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c46:	4b22      	ldr	r3, [pc, #136]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b20      	ldr	r3, [pc, #128]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e032      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4916      	ldr	r1, [pc, #88]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8a:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	490e      	ldr	r1, [pc, #56]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c9e:	f000 f855 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	490a      	ldr	r1, [pc, #40]	@ (8003cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb6:	4a09      	ldr	r2, [pc, #36]	@ (8003cdc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fd0e 	bl	80026e0 <HAL_InitTick>

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023c00 	.word	0x40023c00
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	080075b0 	.word	0x080075b0
 8003cdc:	20000040 	.word	0x20000040
 8003ce0:	20000044 	.word	0x20000044

08003ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	@ (8003cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000040 	.word	0x20000040

08003cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d00:	f7ff fff0 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0a9b      	lsrs	r3, r3, #10
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	080075c0 	.word	0x080075c0

08003d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d28:	f7ff ffdc 	bl	8003ce4 <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	@ (8003d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0b5b      	lsrs	r3, r3, #13
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4903      	ldr	r1, [pc, #12]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	080075c0 	.word	0x080075c0

08003d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d50:	b0ae      	sub	sp, #184	@ 0xb8
 8003d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d72:	4bcb      	ldr	r3, [pc, #812]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	f200 8206 	bhi.w	800418c <HAL_RCC_GetSysClockFreq+0x440>
 8003d80:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	0800418d 	.word	0x0800418d
 8003d90:	0800418d 	.word	0x0800418d
 8003d94:	0800418d 	.word	0x0800418d
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	0800418d 	.word	0x0800418d
 8003da0:	0800418d 	.word	0x0800418d
 8003da4:	0800418d 	.word	0x0800418d
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	0800418d 	.word	0x0800418d
 8003db0:	0800418d 	.word	0x0800418d
 8003db4:	0800418d 	.word	0x0800418d
 8003db8:	08003fbd 	.word	0x08003fbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dbc:	4bb9      	ldr	r3, [pc, #740]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003dc2:	e1e7      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dc4:	4bb8      	ldr	r3, [pc, #736]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dca:	e1e3      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dcc:	4bb4      	ldr	r3, [pc, #720]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dd8:	4bb1      	ldr	r3, [pc, #708]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d071      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de4:	4bae      	ldr	r3, [pc, #696]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	099b      	lsrs	r3, r3, #6
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003df0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	f04f 0000 	mov.w	r0, #0
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	0159      	lsls	r1, r3, #5
 8003e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e1c:	0150      	lsls	r0, r2, #5
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4621      	mov	r1, r4
 8003e24:	1a51      	subs	r1, r2, r1
 8003e26:	6439      	str	r1, [r7, #64]	@ 0x40
 8003e28:	4629      	mov	r1, r5
 8003e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	018b      	lsls	r3, r1, #6
 8003e40:	4641      	mov	r1, r8
 8003e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e46:	4641      	mov	r1, r8
 8003e48:	018a      	lsls	r2, r1, #6
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	1a51      	subs	r1, r2, r1
 8003e4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e50:	4649      	mov	r1, r9
 8003e52:	eb63 0301 	sbc.w	r3, r3, r1
 8003e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e64:	4649      	mov	r1, r9
 8003e66:	00cb      	lsls	r3, r1, #3
 8003e68:	4641      	mov	r1, r8
 8003e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6e:	4641      	mov	r1, r8
 8003e70:	00ca      	lsls	r2, r1, #3
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	4622      	mov	r2, r4
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e7e:	462b      	mov	r3, r5
 8003e80:	460a      	mov	r2, r1
 8003e82:	eb42 0303 	adc.w	r3, r2, r3
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e94:	4629      	mov	r1, r5
 8003e96:	024b      	lsls	r3, r1, #9
 8003e98:	4621      	mov	r1, r4
 8003e9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	024a      	lsls	r2, r1, #9
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003eb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003eb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003eb8:	f7fc fda2 	bl	8000a00 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ec6:	e067      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec8:	4b75      	ldr	r3, [pc, #468]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ed4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ee6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003eea:	4622      	mov	r2, r4
 8003eec:	462b      	mov	r3, r5
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	0159      	lsls	r1, r3, #5
 8003ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003efc:	0150      	lsls	r0, r2, #5
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4621      	mov	r1, r4
 8003f04:	1a51      	subs	r1, r2, r1
 8003f06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f08:	4629      	mov	r1, r5
 8003f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	018b      	lsls	r3, r1, #6
 8003f20:	4641      	mov	r1, r8
 8003f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f26:	4641      	mov	r1, r8
 8003f28:	018a      	lsls	r2, r1, #6
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f30:	4649      	mov	r1, r9
 8003f32:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4a:	4692      	mov	sl, r2
 8003f4c:	469b      	mov	fp, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	eb1a 0303 	adds.w	r3, sl, r3
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	462b      	mov	r3, r5
 8003f58:	eb4b 0303 	adc.w	r3, fp, r3
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	028b      	lsls	r3, r1, #10
 8003f6e:	4621      	mov	r1, r4
 8003f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f74:	4621      	mov	r1, r4
 8003f76:	028a      	lsls	r2, r1, #10
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f80:	2200      	movs	r2, #0
 8003f82:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f84:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f8a:	f7fc fd39 	bl	8000a00 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4613      	mov	r3, r2
 8003f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f98:	4b41      	ldr	r3, [pc, #260]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fba:	e0eb      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fbc:	4b38      	ldr	r3, [pc, #224]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc8:	4b35      	ldr	r3, [pc, #212]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d06b      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd4:	4b32      	ldr	r3, [pc, #200]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	2200      	movs	r2, #0
 8003fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fe8:	2300      	movs	r3, #0
 8003fea:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	0159      	lsls	r1, r3, #5
 8003ffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004002:	0150      	lsls	r0, r2, #5
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4621      	mov	r1, r4
 800400a:	1a51      	subs	r1, r2, r1
 800400c:	61b9      	str	r1, [r7, #24]
 800400e:	4629      	mov	r1, r5
 8004010:	eb63 0301 	sbc.w	r3, r3, r1
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004022:	4659      	mov	r1, fp
 8004024:	018b      	lsls	r3, r1, #6
 8004026:	4651      	mov	r1, sl
 8004028:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800402c:	4651      	mov	r1, sl
 800402e:	018a      	lsls	r2, r1, #6
 8004030:	4651      	mov	r1, sl
 8004032:	ebb2 0801 	subs.w	r8, r2, r1
 8004036:	4659      	mov	r1, fp
 8004038:	eb63 0901 	sbc.w	r9, r3, r1
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004048:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800404c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004050:	4690      	mov	r8, r2
 8004052:	4699      	mov	r9, r3
 8004054:	4623      	mov	r3, r4
 8004056:	eb18 0303 	adds.w	r3, r8, r3
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	462b      	mov	r3, r5
 800405e:	eb49 0303 	adc.w	r3, r9, r3
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004070:	4629      	mov	r1, r5
 8004072:	024b      	lsls	r3, r1, #9
 8004074:	4621      	mov	r1, r4
 8004076:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800407a:	4621      	mov	r1, r4
 800407c:	024a      	lsls	r2, r1, #9
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004086:	2200      	movs	r2, #0
 8004088:	65bb      	str	r3, [r7, #88]	@ 0x58
 800408a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800408c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004090:	f7fc fcb6 	bl	8000a00 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800409e:	e065      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x420>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ac:	4b3d      	ldr	r3, [pc, #244]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	2200      	movs	r2, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	4611      	mov	r1, r2
 80040b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80040be:	2300      	movs	r3, #0
 80040c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80040c6:	4642      	mov	r2, r8
 80040c8:	464b      	mov	r3, r9
 80040ca:	f04f 0000 	mov.w	r0, #0
 80040ce:	f04f 0100 	mov.w	r1, #0
 80040d2:	0159      	lsls	r1, r3, #5
 80040d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d8:	0150      	lsls	r0, r2, #5
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4641      	mov	r1, r8
 80040e0:	1a51      	subs	r1, r2, r1
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	4649      	mov	r1, r9
 80040e6:	eb63 0301 	sbc.w	r3, r3, r1
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040f8:	4659      	mov	r1, fp
 80040fa:	018b      	lsls	r3, r1, #6
 80040fc:	4651      	mov	r1, sl
 80040fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004102:	4651      	mov	r1, sl
 8004104:	018a      	lsls	r2, r1, #6
 8004106:	4651      	mov	r1, sl
 8004108:	1a54      	subs	r4, r2, r1
 800410a:	4659      	mov	r1, fp
 800410c:	eb63 0501 	sbc.w	r5, r3, r1
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	00eb      	lsls	r3, r5, #3
 800411a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800411e:	00e2      	lsls	r2, r4, #3
 8004120:	4614      	mov	r4, r2
 8004122:	461d      	mov	r5, r3
 8004124:	4643      	mov	r3, r8
 8004126:	18e3      	adds	r3, r4, r3
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	464b      	mov	r3, r9
 800412c:	eb45 0303 	adc.w	r3, r5, r3
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800413e:	4629      	mov	r1, r5
 8004140:	028b      	lsls	r3, r1, #10
 8004142:	4621      	mov	r1, r4
 8004144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004148:	4621      	mov	r1, r4
 800414a:	028a      	lsls	r2, r1, #10
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004154:	2200      	movs	r2, #0
 8004156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004158:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800415a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800415e:	f7fc fc4f 	bl	8000a00 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4613      	mov	r3, r2
 8004168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800416c:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	0f1b      	lsrs	r3, r3, #28
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800417a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800417e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800418a:	e003      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800418e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004198:	4618      	mov	r0, r3
 800419a:	37b8      	adds	r7, #184	@ 0xb8
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00f42400 	.word	0x00f42400

080041ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e28d      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8083 	beq.w	80042d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041cc:	4b94      	ldr	r3, [pc, #592]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d019      	beq.n	800420c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041d8:	4b91      	ldr	r3, [pc, #580]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041f0:	d00c      	beq.n	800420c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d112      	bne.n	8004224 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fe:	4b88      	ldr	r3, [pc, #544]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004206:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800420a:	d10b      	bne.n	8004224 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	4b84      	ldr	r3, [pc, #528]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d05b      	beq.n	80042d0 <HAL_RCC_OscConfig+0x124>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d157      	bne.n	80042d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e25a      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422c:	d106      	bne.n	800423c <HAL_RCC_OscConfig+0x90>
 800422e:	4b7c      	ldr	r3, [pc, #496]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a7b      	ldr	r2, [pc, #492]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e01d      	b.n	8004278 <HAL_RCC_OscConfig+0xcc>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0xb4>
 8004246:	4b76      	ldr	r3, [pc, #472]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a75      	ldr	r2, [pc, #468]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 800424c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b73      	ldr	r3, [pc, #460]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a72      	ldr	r2, [pc, #456]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0xcc>
 8004260:	4b6f      	ldr	r3, [pc, #444]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6e      	ldr	r2, [pc, #440]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	4b6c      	ldr	r3, [pc, #432]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a6b      	ldr	r2, [pc, #428]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d013      	beq.n	80042a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fe fa72 	bl	8002768 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe fa6e 	bl	8002768 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	@ 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e21f      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b61      	ldr	r3, [pc, #388]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0xdc>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fe fa5e 	bl	8002768 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b0:	f7fe fa5a 	bl	8002768 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	@ 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e20b      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c2:	4b57      	ldr	r3, [pc, #348]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x104>
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d06f      	beq.n	80043be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042de:	4b50      	ldr	r3, [pc, #320]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d105      	bne.n	8004302 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d11c      	bne.n	8004348 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b44      	ldr	r3, [pc, #272]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d116      	bne.n	8004348 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_RCC_OscConfig+0x186>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e1d3      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004332:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4937      	ldr	r1, [pc, #220]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	e03a      	b.n	80043be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004350:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_OscConfig+0x278>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7fe fa07 	bl	8002768 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435e:	f7fe fa03 	bl	8002768 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1b4      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004370:	4b2b      	ldr	r3, [pc, #172]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4925      	ldr	r1, [pc, #148]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
 8004390:	e015      	b.n	80043be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <HAL_RCC_OscConfig+0x278>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe f9e6 	bl	8002768 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fe f9e2 	bl	8002768 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e193      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d036      	beq.n	8004438 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fe f9c6 	bl	8002768 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fe f9c2 	bl	8002768 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e173      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_OscConfig+0x274>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x234>
 80043fe:	e01b      	b.n	8004438 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004400:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe f9af 	bl	8002768 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	e00e      	b.n	800442c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440e:	f7fe f9ab 	bl	8002768 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d907      	bls.n	800442c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e15c      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
 8004420:	40023800 	.word	0x40023800
 8004424:	42470000 	.word	0x42470000
 8004428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442c:	4b8a      	ldr	r3, [pc, #552]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 800442e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ea      	bne.n	800440e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8097 	beq.w	8004574 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444a:	4b83      	ldr	r3, [pc, #524]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	4b7f      	ldr	r3, [pc, #508]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	4a7e      	ldr	r2, [pc, #504]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004464:	6413      	str	r3, [r2, #64]	@ 0x40
 8004466:	4b7c      	ldr	r3, [pc, #496]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004476:	4b79      	ldr	r3, [pc, #484]	@ (800465c <HAL_RCC_OscConfig+0x4b0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	4b76      	ldr	r3, [pc, #472]	@ (800465c <HAL_RCC_OscConfig+0x4b0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a75      	ldr	r2, [pc, #468]	@ (800465c <HAL_RCC_OscConfig+0x4b0>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448e:	f7fe f96b 	bl	8002768 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fe f967 	bl	8002768 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e118      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b6c      	ldr	r3, [pc, #432]	@ (800465c <HAL_RCC_OscConfig+0x4b0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x31e>
 80044bc:	4b66      	ldr	r3, [pc, #408]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c0:	4a65      	ldr	r2, [pc, #404]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x358>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x340>
 80044d2:	4b61      	ldr	r3, [pc, #388]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d6:	4a60      	ldr	r2, [pc, #384]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80044de:	4b5e      	ldr	r3, [pc, #376]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0x358>
 80044ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f0:	4a59      	ldr	r2, [pc, #356]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f8:	4b57      	ldr	r3, [pc, #348]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fc:	4a56      	ldr	r2, [pc, #344]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80044fe:	f023 0304 	bic.w	r3, r3, #4
 8004502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fe f92c 	bl	8002768 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fe f928 	bl	8002768 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0d7      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	4b4b      	ldr	r3, [pc, #300]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ee      	beq.n	8004514 <HAL_RCC_OscConfig+0x368>
 8004536:	e014      	b.n	8004562 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fe f916 	bl	8002768 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe f912 	bl	8002768 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0c1      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004556:	4b40      	ldr	r3, [pc, #256]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ee      	bne.n	8004540 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	4a3a      	ldr	r2, [pc, #232]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80ad 	beq.w	80046d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457e:	4b36      	ldr	r3, [pc, #216]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b08      	cmp	r3, #8
 8004588:	d060      	beq.n	800464c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d145      	bne.n	800461e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b33      	ldr	r3, [pc, #204]	@ (8004660 <HAL_RCC_OscConfig+0x4b4>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe f8e6 	bl	8002768 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a0:	f7fe f8e2 	bl	8002768 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e093      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	4b29      	ldr	r3, [pc, #164]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	3b01      	subs	r3, #1
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	071b      	lsls	r3, r3, #28
 80045ea:	491b      	ldr	r1, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <HAL_RCC_OscConfig+0x4b4>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fe f8b7 	bl	8002768 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fe f8b3 	bl	8002768 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e064      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	4b11      	ldr	r3, [pc, #68]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x452>
 800461c:	e05c      	b.n	80046d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCC_OscConfig+0x4b4>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fe f8a0 	bl	8002768 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462c:	f7fe f89c 	bl	8002768 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e04d      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x480>
 800464a:	e045      	b.n	80046d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e040      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
 8004658:	40023800 	.word	0x40023800
 800465c:	40007000 	.word	0x40007000
 8004660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004664:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <HAL_RCC_OscConfig+0x538>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d030      	beq.n	80046d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d129      	bne.n	80046d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d122      	bne.n	80046d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800469a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800469c:	4293      	cmp	r3, r2
 800469e:	d119      	bne.n	80046d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d10f      	bne.n	80046d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d107      	bne.n	80046d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800

080046e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07b      	b.n	80047f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800470a:	d009      	beq.n	8004720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
 8004712:	e005      	b.n	8004720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fd fa3e 	bl	8001bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	ea42 0103 	orr.w	r1, r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	f003 0104 	and.w	r1, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	f003 0210 	and.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b088      	sub	sp, #32
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_SPI_Transmit+0x22>
 8004818:	2302      	movs	r3, #2
 800481a:	e12d      	b.n	8004a78 <HAL_SPI_Transmit+0x27e>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004824:	f7fd ffa0 	bl	8002768 <HAL_GetTick>
 8004828:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d002      	beq.n	8004840 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800483a:	2302      	movs	r3, #2
 800483c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800483e:	e116      	b.n	8004a6e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_Transmit+0x52>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004850:	e10d      	b.n	8004a6e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2203      	movs	r2, #3
 8004856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004898:	d10f      	bne.n	80048ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b40      	cmp	r3, #64	@ 0x40
 80048c6:	d007      	beq.n	80048d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e0:	d14f      	bne.n	8004982 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Transmit+0xf6>
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d142      	bne.n	8004976 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004914:	e02f      	b.n	8004976 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d112      	bne.n	800494a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	881a      	ldrh	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004948:	e015      	b.n	8004976 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494a:	f7fd ff0d 	bl	8002768 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d803      	bhi.n	8004962 <HAL_SPI_Transmit+0x168>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004960:	d102      	bne.n	8004968 <HAL_SPI_Transmit+0x16e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004974:	e07b      	b.n	8004a6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ca      	bne.n	8004916 <HAL_SPI_Transmit+0x11c>
 8004980:	e050      	b.n	8004a24 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SPI_Transmit+0x196>
 800498a:	8afb      	ldrh	r3, [r7, #22]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d144      	bne.n	8004a1a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049b6:	e030      	b.n	8004a1a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d113      	bne.n	80049ee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049ec:	e015      	b.n	8004a1a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ee:	f7fd febb 	bl	8002768 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d803      	bhi.n	8004a06 <HAL_SPI_Transmit+0x20c>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a04:	d102      	bne.n	8004a0c <HAL_SPI_Transmit+0x212>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004a18:	e029      	b.n	8004a6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c9      	bne.n	80049b8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fbed 	bl	8005208 <SPI_EndRxTxTransaction>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a42:	2300      	movs	r3, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e003      	b.n	8004a6e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d002      	beq.n	8004aa6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aa4:	e0fb      	b.n	8004c9e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aae:	d112      	bne.n	8004ad6 <HAL_SPI_Receive+0x56>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10e      	bne.n	8004ad6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2204      	movs	r2, #4
 8004abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f8ef 	bl	8004cb0 <HAL_SPI_TransmitReceive>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	e0e8      	b.n	8004ca8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_SPI_Receive+0x64>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0e1      	b.n	8004ca8 <HAL_SPI_Receive+0x228>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aec:	f7fd fe3c 	bl	8002768 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_Receive+0x7e>
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b02:	e0cc      	b.n	8004c9e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2204      	movs	r2, #4
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4a:	d10f      	bne.n	8004b6c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b76:	2b40      	cmp	r3, #64	@ 0x40
 8004b78:	d007      	beq.n	8004b8a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d16a      	bne.n	8004c68 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b92:	e032      	b.n	8004bfa <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d115      	bne.n	8004bce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f103 020c 	add.w	r2, r3, #12
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	7812      	ldrb	r2, [r2, #0]
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bcc:	e015      	b.n	8004bfa <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bce:	f7fd fdcb 	bl	8002768 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d803      	bhi.n	8004be6 <HAL_SPI_Receive+0x166>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_Receive+0x16c>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004bf8:	e051      	b.n	8004c9e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1c7      	bne.n	8004b94 <HAL_SPI_Receive+0x114>
 8004c04:	e035      	b.n	8004c72 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d113      	bne.n	8004c3c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	1c9a      	adds	r2, r3, #2
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c3a:	e015      	b.n	8004c68 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c3c:	f7fd fd94 	bl	8002768 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d803      	bhi.n	8004c54 <HAL_SPI_Receive+0x1d4>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Receive+0x1da>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c66:	e01a      	b.n	8004c9e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1c9      	bne.n	8004c06 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fa60 	bl	800513c <SPI_EndRxTransaction>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
 8004c94:	e003      	b.n	8004c9e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	@ 0x30
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x26>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e198      	b.n	8005008 <HAL_SPI_TransmitReceive+0x358>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cde:	f7fd fd43 	bl	8002768 <HAL_GetTick>
 8004ce2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d00f      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x70>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d06:	d107      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x68>
 8004d10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d003      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d1e:	e16d      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x82>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x82>
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d38:	e160      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d003      	beq.n	8004d4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2205      	movs	r2, #5
 8004d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	887a      	ldrh	r2, [r7, #2]
 8004d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	887a      	ldrh	r2, [r7, #2]
 8004d76:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b40      	cmp	r3, #64	@ 0x40
 8004d90:	d007      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004daa:	d17c      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x10a>
 8004db4:	8b7b      	ldrh	r3, [r7, #26]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d16a      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	881a      	ldrh	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	1c9a      	adds	r2, r3, #2
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dde:	e057      	b.n	8004e90 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d11b      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x176>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d016      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x176>
 8004df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d113      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d119      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x1b8>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d014      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	b292      	uxth	r2, r2
 8004e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e64:	2301      	movs	r3, #1
 8004e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e68:	f7fd fc7e 	bl	8002768 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d80b      	bhi.n	8004e90 <HAL_SPI_TransmitReceive+0x1e0>
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e7e:	d007      	beq.n	8004e90 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004e8e:	e0b5      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1a2      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x130>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d19d      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x130>
 8004ea4:	e080      	b.n	8004fa8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_TransmitReceive+0x204>
 8004eae:	8b7b      	ldrh	r3, [r7, #26]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d16f      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	7812      	ldrb	r2, [r2, #0]
 8004ec0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eda:	e05b      	b.n	8004f94 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d11c      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x274>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d017      	beq.n	8004f24 <HAL_SPI_TransmitReceive+0x274>
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d114      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d119      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x2b6>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d014      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f62:	2301      	movs	r3, #1
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f66:	f7fd fbff 	bl	8002768 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d803      	bhi.n	8004f7e <HAL_SPI_TransmitReceive+0x2ce>
 8004f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f7c:	d102      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x2d4>
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004f92:	e033      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d19e      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x22c>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d199      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004faa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f92b 	bl	8005208 <SPI_EndRxTxTransaction>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d006      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004fc4:	e01a      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff2:	e003      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005004:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005008:	4618      	mov	r0, r3
 800500a:	3730      	adds	r7, #48	@ 0x30
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800501e:	b2db      	uxtb	r3, r3
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800503c:	f7fd fb94 	bl	8002768 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	4413      	add	r3, r2
 800504a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800504c:	f7fd fb8c 	bl	8002768 <HAL_GetTick>
 8005050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005052:	4b39      	ldr	r3, [pc, #228]	@ (8005138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	0d1b      	lsrs	r3, r3, #20
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005062:	e054      	b.n	800510e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800506a:	d050      	beq.n	800510e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800506c:	f7fd fb7c 	bl	8002768 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	429a      	cmp	r2, r3
 800507a:	d902      	bls.n	8005082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d13d      	bne.n	80050fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800509a:	d111      	bne.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a4:	d004      	beq.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ae:	d107      	bne.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c8:	d10f      	bne.n	80050ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e017      	b.n	800512e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	3b01      	subs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	429a      	cmp	r2, r3
 800512a:	d19b      	bne.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000040 	.word	0x20000040

0800513c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005150:	d111      	bne.n	8005176 <SPI_EndRxTransaction+0x3a>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800515a:	d004      	beq.n	8005166 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005164:	d107      	bne.n	8005176 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005174:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800517e:	d12a      	bne.n	80051d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005188:	d012      	beq.n	80051b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	2180      	movs	r1, #128	@ 0x80
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff ff49 	bl	800502c <SPI_WaitFlagStateUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02d      	beq.n	80051fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e026      	b.n	80051fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	2101      	movs	r1, #1
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff ff36 	bl	800502c <SPI_WaitFlagStateUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01a      	beq.n	80051fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e013      	b.n	80051fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2200      	movs	r2, #0
 80051de:	2101      	movs	r1, #1
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff ff23 	bl	800502c <SPI_WaitFlagStateUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e000      	b.n	80051fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2201      	movs	r2, #1
 800521c:	2102      	movs	r1, #2
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ff04 	bl	800502c <SPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e032      	b.n	80052a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800523a:	4b1b      	ldr	r3, [pc, #108]	@ (80052a8 <SPI_EndRxTxTransaction+0xa0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ac <SPI_EndRxTxTransaction+0xa4>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	0d5b      	lsrs	r3, r3, #21
 8005246:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005258:	d112      	bne.n	8005280 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	2180      	movs	r1, #128	@ 0x80
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fee1 	bl	800502c <SPI_WaitFlagStateUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d016      	beq.n	800529e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e00f      	b.n	80052a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3b01      	subs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	d0f2      	beq.n	8005280 <SPI_EndRxTxTransaction+0x78>
 800529a:	e000      	b.n	800529e <SPI_EndRxTxTransaction+0x96>
        break;
 800529c:	bf00      	nop
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20000040 	.word	0x20000040
 80052ac:	165e9f81 	.word	0x165e9f81

080052b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e041      	b.n	8005346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fc ff4c 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f000 fc88 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d001      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e04e      	b.n	8005406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <HAL_TIM_Base_Start_IT+0xc4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005392:	d01d      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1f      	ldr	r2, [pc, #124]	@ (8005418 <HAL_TIM_Base_Start_IT+0xc8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	@ (800541c <HAL_TIM_Base_Start_IT+0xcc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005420 <HAL_TIM_Base_Start_IT+0xd0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005424 <HAL_TIM_Base_Start_IT+0xd4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <HAL_TIM_Base_Start_IT+0xd8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x80>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a18      	ldr	r2, [pc, #96]	@ (800542c <HAL_TIM_Base_Start_IT+0xdc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d111      	bne.n	80053f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b06      	cmp	r3, #6
 80053e0:	d010      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	e007      	b.n	8005404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10f      	bne.n	8005478 <HAL_TIM_Base_Stop_IT+0x48>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a1a      	ldr	r2, [r3, #32]
 800545e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <HAL_TIM_Base_Stop_IT+0x48>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e041      	b.n	8005524 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f839 	bl	800552c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f000 fb99 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e041      	b.n	80055d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f839 	bl	80055de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fb40 	bl	8005c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d020      	beq.n	8005656 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01b      	beq.n	8005656 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0202 	mvn.w	r2, #2
 8005626:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fac2 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 8005642:	e005      	b.n	8005650 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fab4 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fac5 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d020      	beq.n	80056a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01b      	beq.n	80056a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f06f 0204 	mvn.w	r2, #4
 8005672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa9c 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 800568e:	e005      	b.n	800569c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fa8e 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa9f 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d020      	beq.n	80056ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0208 	mvn.w	r2, #8
 80056be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2204      	movs	r2, #4
 80056c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa76 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 80056da:	e005      	b.n	80056e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa68 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa79 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d020      	beq.n	800573a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01b      	beq.n	800573a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f06f 0210 	mvn.w	r2, #16
 800570a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2208      	movs	r2, #8
 8005710:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fa50 	bl	8005bc6 <HAL_TIM_IC_CaptureCallback>
 8005726:	e005      	b.n	8005734 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa42 	bl	8005bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fa53 	bl	8005bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00c      	beq.n	800575e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f06f 0201 	mvn.w	r2, #1
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fa20 	bl	8005b9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00c      	beq.n	8005782 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fe0f 	bl	80063a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fa24 	bl	8005bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00c      	beq.n	80057ca <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0220 	mvn.w	r2, #32
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fde1 	bl	800638c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e048      	b.n	8005884 <HAL_TIM_OC_ConfigChannel+0xb0>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b0c      	cmp	r3, #12
 80057fe:	d839      	bhi.n	8005874 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005800:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800583d 	.word	0x0800583d
 800580c:	08005875 	.word	0x08005875
 8005810:	08005875 	.word	0x08005875
 8005814:	08005875 	.word	0x08005875
 8005818:	0800584b 	.word	0x0800584b
 800581c:	08005875 	.word	0x08005875
 8005820:	08005875 	.word	0x08005875
 8005824:	08005875 	.word	0x08005875
 8005828:	08005859 	.word	0x08005859
 800582c:	08005875 	.word	0x08005875
 8005830:	08005875 	.word	0x08005875
 8005834:	08005875 	.word	0x08005875
 8005838:	08005867 	.word	0x08005867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fa8a 	bl	8005d5c <TIM_OC1_SetConfig>
      break;
 8005848:	e017      	b.n	800587a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 faf3 	bl	8005e3c <TIM_OC2_SetConfig>
      break;
 8005856:	e010      	b.n	800587a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fb62 	bl	8005f28 <TIM_OC3_SetConfig>
      break;
 8005864:	e009      	b.n	800587a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fbcf 	bl	8006010 <TIM_OC4_SetConfig>
      break;
 8005872:	e002      	b.n	800587a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	75fb      	strb	r3, [r7, #23]
      break;
 8005878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e0ae      	b.n	8005a08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b0c      	cmp	r3, #12
 80058b6:	f200 809f 	bhi.w	80059f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058ba:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058f5 	.word	0x080058f5
 80058c4:	080059f9 	.word	0x080059f9
 80058c8:	080059f9 	.word	0x080059f9
 80058cc:	080059f9 	.word	0x080059f9
 80058d0:	08005935 	.word	0x08005935
 80058d4:	080059f9 	.word	0x080059f9
 80058d8:	080059f9 	.word	0x080059f9
 80058dc:	080059f9 	.word	0x080059f9
 80058e0:	08005977 	.word	0x08005977
 80058e4:	080059f9 	.word	0x080059f9
 80058e8:	080059f9 	.word	0x080059f9
 80058ec:	080059f9 	.word	0x080059f9
 80058f0:	080059b7 	.word	0x080059b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fa2e 	bl	8005d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0208 	orr.w	r2, r2, #8
 800590e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0204 	bic.w	r2, r2, #4
 800591e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6999      	ldr	r1, [r3, #24]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	619a      	str	r2, [r3, #24]
      break;
 8005932:	e064      	b.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fa7e 	bl	8005e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800594e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800595e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	021a      	lsls	r2, r3, #8
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	619a      	str	r2, [r3, #24]
      break;
 8005974:	e043      	b.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fad3 	bl	8005f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0208 	orr.w	r2, r2, #8
 8005990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0204 	bic.w	r2, r2, #4
 80059a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69d9      	ldr	r1, [r3, #28]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	61da      	str	r2, [r3, #28]
      break;
 80059b4:	e023      	b.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fb27 	bl	8006010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	021a      	lsls	r2, r3, #8
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	61da      	str	r2, [r3, #28]
      break;
 80059f6:	e002      	b.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
      break;
 80059fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_ConfigClockSource+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e0b4      	b.n	8005b96 <HAL_TIM_ConfigClockSource+0x186>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a64:	d03e      	beq.n	8005ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a6a:	f200 8087 	bhi.w	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a72:	f000 8086 	beq.w	8005b82 <HAL_TIM_ConfigClockSource+0x172>
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7a:	d87f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b70      	cmp	r3, #112	@ 0x70
 8005a7e:	d01a      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8005a80:	2b70      	cmp	r3, #112	@ 0x70
 8005a82:	d87b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b60      	cmp	r3, #96	@ 0x60
 8005a86:	d050      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x11a>
 8005a88:	2b60      	cmp	r3, #96	@ 0x60
 8005a8a:	d877      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b50      	cmp	r3, #80	@ 0x50
 8005a8e:	d03c      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xfa>
 8005a90:	2b50      	cmp	r3, #80	@ 0x50
 8005a92:	d873      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	2b40      	cmp	r3, #64	@ 0x40
 8005a96:	d058      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x13a>
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	d86f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b30      	cmp	r3, #48	@ 0x30
 8005a9e:	d064      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	2b30      	cmp	r3, #48	@ 0x30
 8005aa2:	d86b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d060      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d867      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d05c      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d05a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab4:	e062      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac6:	f000 fb73 	bl	80061b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	609a      	str	r2, [r3, #8]
      break;
 8005ae2:	e04f      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005af4:	f000 fb5c 	bl	80061b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b06:	609a      	str	r2, [r3, #8]
      break;
 8005b08:	e03c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 fad0 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2150      	movs	r1, #80	@ 0x50
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fb29 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005b28:	e02c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 faef 	bl	800611a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2160      	movs	r1, #96	@ 0x60
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb19 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005b48:	e01c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 fab0 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2140      	movs	r1, #64	@ 0x40
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fb09 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005b68:	e00c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 fb00 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005b7a:	e003      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a46      	ldr	r2, [pc, #280]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c22:	d00f      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a43      	ldr	r2, [pc, #268]	@ (8005d34 <TIM_Base_SetConfig+0x130>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a42      	ldr	r2, [pc, #264]	@ (8005d38 <TIM_Base_SetConfig+0x134>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a41      	ldr	r2, [pc, #260]	@ (8005d3c <TIM_Base_SetConfig+0x138>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a40      	ldr	r2, [pc, #256]	@ (8005d40 <TIM_Base_SetConfig+0x13c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d108      	bne.n	8005c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a35      	ldr	r2, [pc, #212]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d02b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c64:	d027      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a32      	ldr	r2, [pc, #200]	@ (8005d34 <TIM_Base_SetConfig+0x130>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d023      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a31      	ldr	r2, [pc, #196]	@ (8005d38 <TIM_Base_SetConfig+0x134>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01f      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a30      	ldr	r2, [pc, #192]	@ (8005d3c <TIM_Base_SetConfig+0x138>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2f      	ldr	r2, [pc, #188]	@ (8005d40 <TIM_Base_SetConfig+0x13c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d017      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2e      	ldr	r2, [pc, #184]	@ (8005d44 <TIM_Base_SetConfig+0x140>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2d      	ldr	r2, [pc, #180]	@ (8005d48 <TIM_Base_SetConfig+0x144>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00f      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2c      	ldr	r2, [pc, #176]	@ (8005d4c <TIM_Base_SetConfig+0x148>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d50 <TIM_Base_SetConfig+0x14c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d54 <TIM_Base_SetConfig+0x150>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a29      	ldr	r2, [pc, #164]	@ (8005d58 <TIM_Base_SetConfig+0x154>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d108      	bne.n	8005cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a10      	ldr	r2, [pc, #64]	@ (8005d30 <TIM_Base_SetConfig+0x12c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_Base_SetConfig+0xf8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a12      	ldr	r2, [pc, #72]	@ (8005d40 <TIM_Base_SetConfig+0x13c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d103      	bne.n	8005d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d105      	bne.n	8005d22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f023 0201 	bic.w	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	611a      	str	r2, [r3, #16]
  }
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800
 8005d50:	40001800 	.word	0x40001800
 8005d54:	40001c00 	.word	0x40001c00
 8005d58:	40002000 	.word	0x40002000

08005d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f023 0201 	bic.w	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0302 	bic.w	r3, r3, #2
 8005da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a20      	ldr	r2, [pc, #128]	@ (8005e34 <TIM_OC1_SetConfig+0xd8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC1_SetConfig+0x64>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a1f      	ldr	r2, [pc, #124]	@ (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10c      	bne.n	8005dda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0308 	bic.w	r3, r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <TIM_OC1_SetConfig+0xd8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC1_SetConfig+0x8e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a14      	ldr	r2, [pc, #80]	@ (8005e38 <TIM_OC1_SetConfig+0xdc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d111      	bne.n	8005e0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40010400 	.word	0x40010400

08005e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 0210 	bic.w	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0320 	bic.w	r3, r3, #32
 8005e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a22      	ldr	r2, [pc, #136]	@ (8005f20 <TIM_OC2_SetConfig+0xe4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC2_SetConfig+0x68>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	@ (8005f24 <TIM_OC2_SetConfig+0xe8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10d      	bne.n	8005ec0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <TIM_OC2_SetConfig+0xe4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_OC2_SetConfig+0x94>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <TIM_OC2_SetConfig+0xe8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d113      	bne.n	8005ef8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400

08005f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a21      	ldr	r2, [pc, #132]	@ (8006008 <TIM_OC3_SetConfig+0xe0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC3_SetConfig+0x66>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a20      	ldr	r2, [pc, #128]	@ (800600c <TIM_OC3_SetConfig+0xe4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d10d      	bne.n	8005faa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <TIM_OC3_SetConfig+0xe0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x92>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	@ (800600c <TIM_OC3_SetConfig+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d113      	bne.n	8005fe2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400

08006010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800605a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	031b      	lsls	r3, r3, #12
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a12      	ldr	r2, [pc, #72]	@ (80060b4 <TIM_OC4_SetConfig+0xa4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC4_SetConfig+0x68>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <TIM_OC4_SetConfig+0xa8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d109      	bne.n	800608c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800607e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400

080060bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 030a 	bic.w	r3, r3, #10
 80060f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611a:	b480      	push	{r7}
 800611c:	b087      	sub	sp, #28
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 0210 	bic.w	r2, r3, #16
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006156:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	f043 0307 	orr.w	r3, r3, #7
 800619c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	609a      	str	r2, [r3, #8]
}
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	021a      	lsls	r2, r3, #8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006204:	2302      	movs	r3, #2
 8006206:	e05a      	b.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800622e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a21      	ldr	r2, [pc, #132]	@ (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d022      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006254:	d01d      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1d      	ldr	r2, [pc, #116]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d018      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1a      	ldr	r2, [pc, #104]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a18      	ldr	r2, [pc, #96]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a17      	ldr	r2, [pc, #92]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10c      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40010400 	.word	0x40010400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40001800 	.word	0x40001800

080062e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e03d      	b.n	8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e042      	b.n	800644c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fc f828 	bl	8002430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2224      	movs	r2, #36	@ 0x24
 80063e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fdcb 	bl	8006f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800640c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800641c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800642c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	@ 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b20      	cmp	r3, #32
 800646c:	d156      	bne.n	800651c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_UART_Transmit_DMA+0x26>
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e04f      	b.n	800651e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2221      	movs	r2, #33	@ 0x21
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	4a21      	ldr	r2, [pc, #132]	@ (8006528 <HAL_UART_Transmit_DMA+0xd4>)
 80064a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064aa:	4a20      	ldr	r2, [pc, #128]	@ (800652c <HAL_UART_Transmit_DMA+0xd8>)
 80064ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006530 <HAL_UART_Transmit_DMA+0xdc>)
 80064b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	2200      	movs	r2, #0
 80064bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80064c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ca:	6819      	ldr	r1, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3304      	adds	r3, #4
 80064d2:	461a      	mov	r2, r3
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	f7fc fda9 	bl	800302c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3314      	adds	r3, #20
 80064ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	617b      	str	r3, [r7, #20]
   return(result);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3314      	adds	r3, #20
 8006502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006504:	627a      	str	r2, [r7, #36]	@ 0x24
 8006506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6a39      	ldr	r1, [r7, #32]
 800650a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	61fb      	str	r3, [r7, #28]
   return(result);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e5      	bne.n	80064e4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e000      	b.n	800651e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800651c:	2302      	movs	r3, #2
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3730      	adds	r7, #48	@ 0x30
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	08006ac1 	.word	0x08006ac1
 800652c:	08006b5b 	.word	0x08006b5b
 8006530:	08006b77 	.word	0x08006b77

08006534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b0ba      	sub	sp, #232	@ 0xe8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800655a:	2300      	movs	r3, #0
 800655c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006560:	2300      	movs	r3, #0
 8006562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10f      	bne.n	800659a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_UART_IRQHandler+0x66>
 8006586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fc40 	bl	8006e18 <UART_Receive_IT>
      return;
 8006598:	e25b      	b.n	8006a52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800659a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80de 	beq.w	8006760 <HAL_UART_IRQHandler+0x22c>
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80d1 	beq.w	8006760 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <HAL_UART_IRQHandler+0xae>
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065da:	f043 0201 	orr.w	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00b      	beq.n	8006606 <HAL_UART_IRQHandler+0xd2>
 80065ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fe:	f043 0202 	orr.w	r2, r3, #2
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <HAL_UART_IRQHandler+0xf6>
 8006612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006622:	f043 0204 	orr.w	r2, r3, #4
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800662a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d011      	beq.n	800665a <HAL_UART_IRQHandler+0x126>
 8006636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d105      	bne.n	800664e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006652:	f043 0208 	orr.w	r2, r3, #8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 81f2 	beq.w	8006a48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <HAL_UART_IRQHandler+0x14e>
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fbcb 	bl	8006e18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668c:	2b40      	cmp	r3, #64	@ 0x40
 800668e:	bf0c      	ite	eq
 8006690:	2301      	moveq	r3, #1
 8006692:	2300      	movne	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <HAL_UART_IRQHandler+0x17a>
 80066a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d04f      	beq.n	800674e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fad3 	bl	8006c5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066be:	2b40      	cmp	r3, #64	@ 0x40
 80066c0:	d141      	bne.n	8006746 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3314      	adds	r3, #20
 80066c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1d9      	bne.n	80066c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671a:	4a7e      	ldr	r2, [pc, #504]	@ (8006914 <HAL_UART_IRQHandler+0x3e0>)
 800671c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006722:	4618      	mov	r0, r3
 8006724:	f7fc fd4a 	bl	80031bc <HAL_DMA_Abort_IT>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d016      	beq.n	800675c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	e00e      	b.n	800675c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9a8 	bl	8006a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	e00a      	b.n	800675c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9a4 	bl	8006a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e006      	b.n	800675c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9a0 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800675a:	e175      	b.n	8006a48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	bf00      	nop
    return;
 800675e:	e173      	b.n	8006a48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006764:	2b01      	cmp	r3, #1
 8006766:	f040 814f 	bne.w	8006a08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8148 	beq.w	8006a08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8141 	beq.w	8006a08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a6:	2b40      	cmp	r3, #64	@ 0x40
 80067a8:	f040 80b6 	bne.w	8006918 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8145 	beq.w	8006a4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f080 813e 	bcs.w	8006a4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e2:	f000 8088 	beq.w	80068f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006812:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800681e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800682a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1d9      	bne.n	80067e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3314      	adds	r3, #20
 8006838:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3314      	adds	r3, #20
 8006852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006856:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800685a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800685e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e1      	bne.n	8006832 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3314      	adds	r3, #20
 8006874:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800687e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006892:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006894:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006898:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e3      	bne.n	800686e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c6:	f023 0310 	bic.w	r3, r3, #16
 80068ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	330c      	adds	r3, #12
 80068d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80068d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e3      	bne.n	80068b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fc fbf3 	bl	80030dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006904:	b29b      	uxth	r3, r3
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	b29b      	uxth	r3, r3
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f8cb 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006912:	e09b      	b.n	8006a4c <HAL_UART_IRQHandler+0x518>
 8006914:	08006d21 	.word	0x08006d21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006920:	b29b      	uxth	r3, r3
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 808e 	beq.w	8006a50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8089 	beq.w	8006a50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800694e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006962:	647a      	str	r2, [r7, #68]	@ 0x44
 8006964:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e3      	bne.n	800693e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3314      	adds	r3, #20
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	623b      	str	r3, [r7, #32]
   return(result);
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3314      	adds	r3, #20
 8006996:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800699a:	633a      	str	r2, [r7, #48]	@ 0x30
 800699c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e3      	bne.n	8006976 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0310 	bic.w	r3, r3, #16
 80069d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069e0:	61fa      	str	r2, [r7, #28]
 80069e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	69b9      	ldr	r1, [r7, #24]
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	617b      	str	r3, [r7, #20]
   return(result);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e3      	bne.n	80069bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f851 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a06:	e023      	b.n	8006a50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_UART_IRQHandler+0x4f4>
 8006a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f991 	bl	8006d48 <UART_Transmit_IT>
    return;
 8006a26:	e014      	b.n	8006a52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <HAL_UART_IRQHandler+0x51e>
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f9d1 	bl	8006de8 <UART_EndTransmit_IT>
    return;
 8006a46:	e004      	b.n	8006a52 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a48:	bf00      	nop
 8006a4a:	e002      	b.n	8006a52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a4c:	bf00      	nop
 8006a4e:	e000      	b.n	8006a52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a50:	bf00      	nop
  }
}
 8006a52:	37e8      	adds	r7, #232	@ 0xe8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b090      	sub	sp, #64	@ 0x40
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d137      	bne.n	8006b4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ade:	2200      	movs	r2, #0
 8006ae0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3314      	adds	r3, #20
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	623b      	str	r3, [r7, #32]
   return(result);
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006af8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3314      	adds	r3, #20
 8006b00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b36:	61fa      	str	r2, [r7, #28]
 8006b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	617b      	str	r3, [r7, #20]
   return(result);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e5      	bne.n	8006b16 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b4a:	e002      	b.n	8006b52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006b4e:	f7ff ff83 	bl	8006a58 <HAL_UART_TxCpltCallback>
}
 8006b52:	bf00      	nop
 8006b54:	3740      	adds	r7, #64	@ 0x40
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff ff7f 	bl	8006a6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b86:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b92:	2b80      	cmp	r3, #128	@ 0x80
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b21      	cmp	r3, #33	@ 0x21
 8006ba8:	d108      	bne.n	8006bbc <UART_DMAError+0x46>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006bb6:	68b8      	ldr	r0, [r7, #8]
 8006bb8:	f000 f827 	bl	8006c0a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc6:	2b40      	cmp	r3, #64	@ 0x40
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b22      	cmp	r3, #34	@ 0x22
 8006bdc:	d108      	bne.n	8006bf0 <UART_DMAError+0x7a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006bea:	68b8      	ldr	r0, [r7, #8]
 8006bec:	f000 f835 	bl	8006c5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf4:	f043 0210 	orr.w	r2, r3, #16
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bfc:	68b8      	ldr	r0, [r7, #8]
 8006bfe:	f7ff ff49 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b089      	sub	sp, #36	@ 0x24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	61ba      	str	r2, [r7, #24]
 8006c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6979      	ldr	r1, [r7, #20]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e5      	bne.n	8006c12 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006c4e:	bf00      	nop
 8006c50:	3724      	adds	r7, #36	@ 0x24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b095      	sub	sp, #84	@ 0x54
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	330c      	adds	r3, #12
 8006c68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c82:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e5      	bne.n	8006c62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3314      	adds	r3, #20
 8006cb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e5      	bne.n	8006c96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d119      	bne.n	8006d06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f023 0310 	bic.w	r3, r3, #16
 8006ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cf2:	61ba      	str	r2, [r7, #24]
 8006cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	6979      	ldr	r1, [r7, #20]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e5      	bne.n	8006cd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d14:	bf00      	nop
 8006d16:	3754      	adds	r7, #84	@ 0x54
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7ff feaa 	bl	8006a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b21      	cmp	r3, #33	@ 0x21
 8006d5a:	d13e      	bne.n	8006dda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d64:	d114      	bne.n	8006d90 <UART_Transmit_IT+0x48>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d110      	bne.n	8006d90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	1c9a      	adds	r2, r3, #2
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	621a      	str	r2, [r3, #32]
 8006d8e:	e008      	b.n	8006da2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	1c59      	adds	r1, r3, #1
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6211      	str	r1, [r2, #32]
 8006d9a:	781a      	ldrb	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4619      	mov	r1, r3
 8006db0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10f      	bne.n	8006dd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e000      	b.n	8006ddc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dda:	2302      	movs	r3, #2
  }
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff fe25 	bl	8006a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08c      	sub	sp, #48	@ 0x30
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b22      	cmp	r3, #34	@ 0x22
 8006e2a:	f040 80ae 	bne.w	8006f8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e36:	d117      	bne.n	8006e68 <UART_Receive_IT+0x50>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d113      	bne.n	8006e68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	1c9a      	adds	r2, r3, #2
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e66:	e026      	b.n	8006eb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e7a:	d007      	beq.n	8006e8c <UART_Receive_IT+0x74>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <UART_Receive_IT+0x82>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e008      	b.n	8006eac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eaa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d15d      	bne.n	8006f86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68da      	ldr	r2, [r3, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0220 	bic.w	r2, r2, #32
 8006ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ee8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695a      	ldr	r2, [r3, #20]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0201 	bic.w	r2, r2, #1
 8006ef8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d135      	bne.n	8006f7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	613b      	str	r3, [r7, #16]
   return(result);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f023 0310 	bic.w	r3, r3, #16
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f36:	623a      	str	r2, [r7, #32]
 8006f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	69f9      	ldr	r1, [r7, #28]
 8006f3c:	6a3a      	ldr	r2, [r7, #32]
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e5      	bne.n	8006f16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d10a      	bne.n	8006f6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff fd97 	bl	8006aa8 <HAL_UARTEx_RxEventCallback>
 8006f7a:	e002      	b.n	8006f82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff fd7f 	bl	8006a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e002      	b.n	8006f8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e000      	b.n	8006f8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f8a:	2302      	movs	r3, #2
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3730      	adds	r7, #48	@ 0x30
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f98:	b0c0      	sub	sp, #256	@ 0x100
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb0:	68d9      	ldr	r1, [r3, #12]
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	ea40 0301 	orr.w	r3, r0, r1
 8006fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006fec:	f021 010c 	bic.w	r1, r1, #12
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800700a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700e:	6999      	ldr	r1, [r3, #24]
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	ea40 0301 	orr.w	r3, r0, r1
 800701a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b8f      	ldr	r3, [pc, #572]	@ (8007260 <UART_SetConfig+0x2cc>)
 8007024:	429a      	cmp	r2, r3
 8007026:	d005      	beq.n	8007034 <UART_SetConfig+0xa0>
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4b8d      	ldr	r3, [pc, #564]	@ (8007264 <UART_SetConfig+0x2d0>)
 8007030:	429a      	cmp	r2, r3
 8007032:	d104      	bne.n	800703e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007034:	f7fc fe76 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8007038:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800703c:	e003      	b.n	8007046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800703e:	f7fc fe5d 	bl	8003cfc <HAL_RCC_GetPCLK1Freq>
 8007042:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007050:	f040 810c 	bne.w	800726c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007058:	2200      	movs	r2, #0
 800705a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800705e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	1891      	adds	r1, r2, r2
 800706c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800706e:	415b      	adcs	r3, r3
 8007070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007076:	4621      	mov	r1, r4
 8007078:	eb12 0801 	adds.w	r8, r2, r1
 800707c:	4629      	mov	r1, r5
 800707e:	eb43 0901 	adc.w	r9, r3, r1
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800708e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007096:	4690      	mov	r8, r2
 8007098:	4699      	mov	r9, r3
 800709a:	4623      	mov	r3, r4
 800709c:	eb18 0303 	adds.w	r3, r8, r3
 80070a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070a4:	462b      	mov	r3, r5
 80070a6:	eb49 0303 	adc.w	r3, r9, r3
 80070aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80070be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070c2:	460b      	mov	r3, r1
 80070c4:	18db      	adds	r3, r3, r3
 80070c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80070c8:	4613      	mov	r3, r2
 80070ca:	eb42 0303 	adc.w	r3, r2, r3
 80070ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80070d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80070d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070d8:	f7f9 fc92 	bl	8000a00 <__aeabi_uldivmod>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4b61      	ldr	r3, [pc, #388]	@ (8007268 <UART_SetConfig+0x2d4>)
 80070e2:	fba3 2302 	umull	r2, r3, r3, r2
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	011c      	lsls	r4, r3, #4
 80070ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80070fc:	4642      	mov	r2, r8
 80070fe:	464b      	mov	r3, r9
 8007100:	1891      	adds	r1, r2, r2
 8007102:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007104:	415b      	adcs	r3, r3
 8007106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800710c:	4641      	mov	r1, r8
 800710e:	eb12 0a01 	adds.w	sl, r2, r1
 8007112:	4649      	mov	r1, r9
 8007114:	eb43 0b01 	adc.w	fp, r3, r1
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800712c:	4692      	mov	sl, r2
 800712e:	469b      	mov	fp, r3
 8007130:	4643      	mov	r3, r8
 8007132:	eb1a 0303 	adds.w	r3, sl, r3
 8007136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800713a:	464b      	mov	r3, r9
 800713c:	eb4b 0303 	adc.w	r3, fp, r3
 8007140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007150:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007158:	460b      	mov	r3, r1
 800715a:	18db      	adds	r3, r3, r3
 800715c:	643b      	str	r3, [r7, #64]	@ 0x40
 800715e:	4613      	mov	r3, r2
 8007160:	eb42 0303 	adc.w	r3, r2, r3
 8007164:	647b      	str	r3, [r7, #68]	@ 0x44
 8007166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800716a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800716e:	f7f9 fc47 	bl	8000a00 <__aeabi_uldivmod>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4611      	mov	r1, r2
 8007178:	4b3b      	ldr	r3, [pc, #236]	@ (8007268 <UART_SetConfig+0x2d4>)
 800717a:	fba3 2301 	umull	r2, r3, r3, r1
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	2264      	movs	r2, #100	@ 0x64
 8007182:	fb02 f303 	mul.w	r3, r2, r3
 8007186:	1acb      	subs	r3, r1, r3
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800718e:	4b36      	ldr	r3, [pc, #216]	@ (8007268 <UART_SetConfig+0x2d4>)
 8007190:	fba3 2302 	umull	r2, r3, r3, r2
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800719c:	441c      	add	r4, r3
 800719e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80071ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80071b0:	4642      	mov	r2, r8
 80071b2:	464b      	mov	r3, r9
 80071b4:	1891      	adds	r1, r2, r2
 80071b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80071b8:	415b      	adcs	r3, r3
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071c0:	4641      	mov	r1, r8
 80071c2:	1851      	adds	r1, r2, r1
 80071c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80071c6:	4649      	mov	r1, r9
 80071c8:	414b      	adcs	r3, r1
 80071ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80071d8:	4659      	mov	r1, fp
 80071da:	00cb      	lsls	r3, r1, #3
 80071dc:	4651      	mov	r1, sl
 80071de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071e2:	4651      	mov	r1, sl
 80071e4:	00ca      	lsls	r2, r1, #3
 80071e6:	4610      	mov	r0, r2
 80071e8:	4619      	mov	r1, r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	4642      	mov	r2, r8
 80071ee:	189b      	adds	r3, r3, r2
 80071f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071f4:	464b      	mov	r3, r9
 80071f6:	460a      	mov	r2, r1
 80071f8:	eb42 0303 	adc.w	r3, r2, r3
 80071fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800720c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007214:	460b      	mov	r3, r1
 8007216:	18db      	adds	r3, r3, r3
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800721a:	4613      	mov	r3, r2
 800721c:	eb42 0303 	adc.w	r3, r2, r3
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800722a:	f7f9 fbe9 	bl	8000a00 <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4b0d      	ldr	r3, [pc, #52]	@ (8007268 <UART_SetConfig+0x2d4>)
 8007234:	fba3 1302 	umull	r1, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	2164      	movs	r1, #100	@ 0x64
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	3332      	adds	r3, #50	@ 0x32
 8007246:	4a08      	ldr	r2, [pc, #32]	@ (8007268 <UART_SetConfig+0x2d4>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	f003 0207 	and.w	r2, r3, #7
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4422      	add	r2, r4
 800725a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800725c:	e106      	b.n	800746c <UART_SetConfig+0x4d8>
 800725e:	bf00      	nop
 8007260:	40011000 	.word	0x40011000
 8007264:	40011400 	.word	0x40011400
 8007268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800726c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007270:	2200      	movs	r2, #0
 8007272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800727a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800727e:	4642      	mov	r2, r8
 8007280:	464b      	mov	r3, r9
 8007282:	1891      	adds	r1, r2, r2
 8007284:	6239      	str	r1, [r7, #32]
 8007286:	415b      	adcs	r3, r3
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
 800728a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800728e:	4641      	mov	r1, r8
 8007290:	1854      	adds	r4, r2, r1
 8007292:	4649      	mov	r1, r9
 8007294:	eb43 0501 	adc.w	r5, r3, r1
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	00eb      	lsls	r3, r5, #3
 80072a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072a6:	00e2      	lsls	r2, r4, #3
 80072a8:	4614      	mov	r4, r2
 80072aa:	461d      	mov	r5, r3
 80072ac:	4643      	mov	r3, r8
 80072ae:	18e3      	adds	r3, r4, r3
 80072b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072b4:	464b      	mov	r3, r9
 80072b6:	eb45 0303 	adc.w	r3, r5, r3
 80072ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072da:	4629      	mov	r1, r5
 80072dc:	008b      	lsls	r3, r1, #2
 80072de:	4621      	mov	r1, r4
 80072e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072e4:	4621      	mov	r1, r4
 80072e6:	008a      	lsls	r2, r1, #2
 80072e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80072ec:	f7f9 fb88 	bl	8000a00 <__aeabi_uldivmod>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4b60      	ldr	r3, [pc, #384]	@ (8007478 <UART_SetConfig+0x4e4>)
 80072f6:	fba3 2302 	umull	r2, r3, r3, r2
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	011c      	lsls	r4, r3, #4
 80072fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007302:	2200      	movs	r2, #0
 8007304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007308:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800730c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	1891      	adds	r1, r2, r2
 8007316:	61b9      	str	r1, [r7, #24]
 8007318:	415b      	adcs	r3, r3
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007320:	4641      	mov	r1, r8
 8007322:	1851      	adds	r1, r2, r1
 8007324:	6139      	str	r1, [r7, #16]
 8007326:	4649      	mov	r1, r9
 8007328:	414b      	adcs	r3, r1
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007338:	4659      	mov	r1, fp
 800733a:	00cb      	lsls	r3, r1, #3
 800733c:	4651      	mov	r1, sl
 800733e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007342:	4651      	mov	r1, sl
 8007344:	00ca      	lsls	r2, r1, #3
 8007346:	4610      	mov	r0, r2
 8007348:	4619      	mov	r1, r3
 800734a:	4603      	mov	r3, r0
 800734c:	4642      	mov	r2, r8
 800734e:	189b      	adds	r3, r3, r2
 8007350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007354:	464b      	mov	r3, r9
 8007356:	460a      	mov	r2, r1
 8007358:	eb42 0303 	adc.w	r3, r2, r3
 800735c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800736a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007378:	4649      	mov	r1, r9
 800737a:	008b      	lsls	r3, r1, #2
 800737c:	4641      	mov	r1, r8
 800737e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007382:	4641      	mov	r1, r8
 8007384:	008a      	lsls	r2, r1, #2
 8007386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800738a:	f7f9 fb39 	bl	8000a00 <__aeabi_uldivmod>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4611      	mov	r1, r2
 8007394:	4b38      	ldr	r3, [pc, #224]	@ (8007478 <UART_SetConfig+0x4e4>)
 8007396:	fba3 2301 	umull	r2, r3, r3, r1
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	2264      	movs	r2, #100	@ 0x64
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	1acb      	subs	r3, r1, r3
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	3332      	adds	r3, #50	@ 0x32
 80073a8:	4a33      	ldr	r2, [pc, #204]	@ (8007478 <UART_SetConfig+0x4e4>)
 80073aa:	fba2 2303 	umull	r2, r3, r2, r3
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073b4:	441c      	add	r4, r3
 80073b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ba:	2200      	movs	r2, #0
 80073bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80073be:	677a      	str	r2, [r7, #116]	@ 0x74
 80073c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073c4:	4642      	mov	r2, r8
 80073c6:	464b      	mov	r3, r9
 80073c8:	1891      	adds	r1, r2, r2
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	415b      	adcs	r3, r3
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073d4:	4641      	mov	r1, r8
 80073d6:	1851      	adds	r1, r2, r1
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	4649      	mov	r1, r9
 80073dc:	414b      	adcs	r3, r1
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073ec:	4659      	mov	r1, fp
 80073ee:	00cb      	lsls	r3, r1, #3
 80073f0:	4651      	mov	r1, sl
 80073f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073f6:	4651      	mov	r1, sl
 80073f8:	00ca      	lsls	r2, r1, #3
 80073fa:	4610      	mov	r0, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	4603      	mov	r3, r0
 8007400:	4642      	mov	r2, r8
 8007402:	189b      	adds	r3, r3, r2
 8007404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007406:	464b      	mov	r3, r9
 8007408:	460a      	mov	r2, r1
 800740a:	eb42 0303 	adc.w	r3, r2, r3
 800740e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	663b      	str	r3, [r7, #96]	@ 0x60
 800741a:	667a      	str	r2, [r7, #100]	@ 0x64
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	f04f 0300 	mov.w	r3, #0
 8007424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007428:	4649      	mov	r1, r9
 800742a:	008b      	lsls	r3, r1, #2
 800742c:	4641      	mov	r1, r8
 800742e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007432:	4641      	mov	r1, r8
 8007434:	008a      	lsls	r2, r1, #2
 8007436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800743a:	f7f9 fae1 	bl	8000a00 <__aeabi_uldivmod>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4b0d      	ldr	r3, [pc, #52]	@ (8007478 <UART_SetConfig+0x4e4>)
 8007444:	fba3 1302 	umull	r1, r3, r3, r2
 8007448:	095b      	lsrs	r3, r3, #5
 800744a:	2164      	movs	r1, #100	@ 0x64
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	3332      	adds	r3, #50	@ 0x32
 8007456:	4a08      	ldr	r2, [pc, #32]	@ (8007478 <UART_SetConfig+0x4e4>)
 8007458:	fba2 2303 	umull	r2, r3, r2, r3
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	f003 020f 	and.w	r2, r3, #15
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4422      	add	r2, r4
 800746a:	609a      	str	r2, [r3, #8]
}
 800746c:	bf00      	nop
 800746e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007472:	46bd      	mov	sp, r7
 8007474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007478:	51eb851f 	.word	0x51eb851f

0800747c <memset>:
 800747c:	4402      	add	r2, r0
 800747e:	4603      	mov	r3, r0
 8007480:	4293      	cmp	r3, r2
 8007482:	d100      	bne.n	8007486 <memset+0xa>
 8007484:	4770      	bx	lr
 8007486:	f803 1b01 	strb.w	r1, [r3], #1
 800748a:	e7f9      	b.n	8007480 <memset+0x4>

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	@ (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	@ (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	@ (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	@ (80074d0 <__libc_init_array+0x44>)
 80074a0:	f000 f826 	bl	80074f0 <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	080075d8 	.word	0x080075d8
 80074c8:	080075d8 	.word	0x080075d8
 80074cc:	080075d8 	.word	0x080075d8
 80074d0:	080075dc 	.word	0x080075dc

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <_init>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr

080074fc <_fini>:
 80074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fe:	bf00      	nop
 8007500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007502:	bc08      	pop	{r3}
 8007504:	469e      	mov	lr, r3
 8007506:	4770      	bx	lr
