
AMP_PCBv3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080085a8  080085a8  000095a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e0  080086e0  0000a09c  2**0
                  CONTENTS
  4 .ARM          00000008  080086e0  080086e0  000096e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e8  080086e8  0000a09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e8  080086e8  000096e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086ec  080086ec  000096ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080086f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  2000009c  0800878c  0000a09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800878c  0000a708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153f2  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a7  00000000  00000000  0001f4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00022e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e84  00000000  00000000  00024130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bae  00000000  00000000  00024fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188bf  00000000  00000000  0004ab62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e07eb  00000000  00000000  00063421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143c0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005220  00000000  00000000  00143c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00148e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008590 	.word	0x08008590

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08008590 	.word	0x08008590

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000d9c:	b4b0      	push	{r4, r5, r7}
 8000d9e:	b08f      	sub	sp, #60	@ 0x3c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000da4:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000daa:	2307      	movs	r3, #7
 8000dac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000dbc:	23ff      	movs	r3, #255	@ 0xff
 8000dbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000dc2:	2364      	movs	r3, #100	@ 0x64
 8000dc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	461d      	mov	r5, r3
 8000dd0:	f107 040c 	add.w	r4, r7, #12
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000de0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	373c      	adds	r7, #60	@ 0x3c
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bcb0      	pop	{r4, r5, r7}
 8000dec:	4770      	bx	lr

08000dee <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6898      	ldr	r0, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	899b      	ldrh	r3, [r3, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	f003 f89f 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f001 ff5e 	bl	8002cc8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6898      	ldr	r0, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	899b      	ldrh	r3, [r3, #12]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4619      	mov	r1, r3
 8000e18:	f003 f894 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e1c:	2064      	movs	r0, #100	@ 0x64
 8000e1e:	f001 ff53 	bl	8002cc8 <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000e34:	2101      	movs	r1, #1
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f9ff 	bl	800123a <LoRa_read>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d107      	bne.n	8000e5a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e4a:	7bbb      	ldrb	r3, [r7, #14]
 8000e4c:	f023 0307 	bic.w	r3, r3, #7
 8000e50:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
 8000e58:	e03e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10c      	bne.n	8000e7a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e64:	f023 0307 	bic.w	r3, r3, #7
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	61da      	str	r2, [r3, #28]
 8000e78:	e02e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d10c      	bne.n	8000e9a <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e84:	f023 0307 	bic.w	r3, r3, #7
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f043 0303 	orr.w	r3, r3, #3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2203      	movs	r2, #3
 8000e96:	61da      	str	r2, [r3, #28]
 8000e98:	e01e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	d10c      	bne.n	8000eba <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ea4:	f023 0307 	bic.w	r3, r3, #7
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	f043 0305 	orr.w	r3, r3, #5
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	61da      	str	r2, [r3, #28]
 8000eb8:	e00e      	b.n	8000ed8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d10b      	bne.n	8000ed8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ec4:	f023 0307 	bic.w	r3, r3, #7
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	f043 0306 	orr.w	r3, r3, #6
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2206      	movs	r2, #6
 8000ed6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	461a      	mov	r2, r3
 8000edc:	2101      	movs	r1, #1
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f9c5 	bl	800126e <LoRa_write>
	//HAL_Delay(10);
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	889b      	ldrh	r3, [r3, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	f003 f81c 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6998      	ldr	r0, [r3, #24]
 8000f10:	88fa      	ldrh	r2, [r7, #6]
 8000f12:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	f003 ff13 	bl	8004d42 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f1c:	bf00      	nop
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fb18 	bl	8005558 <HAL_SPI_GetState>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d1f7      	bne.n	8000f1e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6998      	ldr	r0, [r3, #24]
 8000f32:	8b3a      	ldrh	r2, [r7, #24]
 8000f34:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f38:	6839      	ldr	r1, [r7, #0]
 8000f3a:	f004 f845 	bl	8004fc8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f3e:	bf00      	nop
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f004 fb07 	bl	8005558 <HAL_SPI_GetState>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1f7      	bne.n	8000f40 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f002 fff2 	bl	8003f44 <HAL_GPIO_WritePin>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	4613      	mov	r3, r2
 8000f76:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	889b      	ldrh	r3, [r3, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	4619      	mov	r1, r3
 8000f84:	f002 ffde 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6998      	ldr	r0, [r3, #24]
 8000f8c:	88fa      	ldrh	r2, [r7, #6]
 8000f8e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	f003 fed5 	bl	8004d42 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f98:	bf00      	nop
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fada 	bl	8005558 <HAL_SPI_GetState>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d1f7      	bne.n	8000f9a <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6998      	ldr	r0, [r3, #24]
 8000fae:	8b3a      	ldrh	r2, [r7, #24]
 8000fb0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	f003 fec4 	bl	8004d42 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fba:	bf00      	nop
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fac9 	bl	8005558 <HAL_SPI_GetState>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d1f7      	bne.n	8000fbc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	889b      	ldrh	r3, [r3, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f002 ffb4 	bl	8003f44 <HAL_GPIO_WritePin>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000ff0:	2126      	movs	r1, #38	@ 0x26
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f921 	bl	800123a <LoRa_read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e003      	b.n	8001014 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	f023 0308 	bic.w	r3, r3, #8
 8001012:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	461a      	mov	r2, r3
 8001018:	2126      	movs	r1, #38	@ 0x26
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f927 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f001 fe51 	bl	8002cc8 <HAL_Delay>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	@ 0x58
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <LoRa_setAutoLDO+0x68>)
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4611      	mov	r1, r2
 8001040:	2250      	movs	r2, #80	@ 0x50
 8001042:	4618      	mov	r0, r3
 8001044:	f006 fe58 	bl	8007cf8 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800104e:	461a      	mov	r2, r3
 8001050:	2301      	movs	r3, #1
 8001052:	4093      	lsls	r3, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa85 	bl	8000564 <__aeabi_i2d>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	3358      	adds	r3, #88	@ 0x58
 8001064:	443b      	add	r3, r7
 8001066:	3b50      	subs	r3, #80	@ 0x50
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff fc0e 	bl	800088c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fcf0 	bl	8000a5c <__aeabi_d2iz>
 800107c:	4603      	mov	r3, r0
 800107e:	2b10      	cmp	r3, #16
 8001080:	bfcc      	ite	gt
 8001082:	2301      	movgt	r3, #1
 8001084:	2300      	movle	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffaa 	bl	8000fe4 <LoRa_setLowDaraRateOptimization>
}
 8001090:	bf00      	nop
 8001092:	3758      	adds	r7, #88	@ 0x58
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	080085a8 	.word	0x080085a8

0800109c <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	04db      	lsls	r3, r3, #19
 80010aa:	115b      	asrs	r3, r3, #5
 80010ac:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2106      	movs	r1, #6
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f8d7 	bl	800126e <LoRa_write>
	HAL_Delay(5);
 80010c0:	2005      	movs	r0, #5
 80010c2:	f001 fe01 	bl	8002cc8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	461a      	mov	r2, r3
 80010d0:	2107      	movs	r1, #7
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f8cb 	bl	800126e <LoRa_write>
	HAL_Delay(5);
 80010d8:	2005      	movs	r0, #5
 80010da:	f001 fdf5 	bl	8002cc8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	461a      	mov	r2, r3
 80010e6:	2108      	movs	r1, #8
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f8c0 	bl	800126e <LoRa_write>
	HAL_Delay(5);
 80010ee:	2005      	movs	r0, #5
 80010f0:	f001 fdea 	bl	8002cc8 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b0c      	cmp	r3, #12
 800110a:	dd01      	ble.n	8001110 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800110c:	230c      	movs	r3, #12
 800110e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2b06      	cmp	r3, #6
 8001114:	dc01      	bgt.n	800111a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001116:	2307      	movs	r3, #7
 8001118:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800111a:	211e      	movs	r1, #30
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f88c 	bl	800123a <LoRa_read>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001126:	200a      	movs	r0, #10
 8001128:	f001 fdce 	bl	8002cc8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	b2da      	uxtb	r2, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	461a      	mov	r2, r3
 8001144:	211e      	movs	r1, #30
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f891 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f001 fdbb 	bl	8002cc8 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff6c 	bl	8001030 <LoRa_setAutoLDO>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	461a      	mov	r2, r3
 8001170:	2109      	movs	r1, #9
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f87b 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f001 fda5 	bl	8002cc8 <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2b2c      	cmp	r3, #44	@ 0x2c
 800119c:	d801      	bhi.n	80011a2 <LoRa_setOCP+0x1a>
		current = 45;
 800119e:	232d      	movs	r3, #45	@ 0x2d
 80011a0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80011a6:	d901      	bls.n	80011ac <LoRa_setOCP+0x24>
		current = 240;
 80011a8:	23f0      	movs	r3, #240	@ 0xf0
 80011aa:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b78      	cmp	r3, #120	@ 0x78
 80011b0:	d809      	bhi.n	80011c6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	3b2d      	subs	r3, #45	@ 0x2d
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <LoRa_setOCP+0x78>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1052      	asrs	r2, r2, #1
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e00b      	b.n	80011de <LoRa_setOCP+0x56>
	else if(current <= 240)
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2bf0      	cmp	r3, #240	@ 0xf0
 80011ca:	d808      	bhi.n	80011de <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	331e      	adds	r3, #30
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <LoRa_setOCP+0x78>)
 80011d2:	fb82 1203 	smull	r1, r2, r2, r3
 80011d6:	1092      	asrs	r2, r2, #2
 80011d8:	17db      	asrs	r3, r3, #31
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3320      	adds	r3, #32
 80011e2:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	461a      	mov	r2, r3
 80011e8:	210b      	movs	r1, #11
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f83f 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f001 fd69 	bl	8002cc8 <HAL_Delay>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	66666667 	.word	0x66666667

08001204 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800120c:	211e      	movs	r1, #30
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f813 	bl	800123a <LoRa_read>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	f043 0307 	orr.w	r3, r3, #7
 800121e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	461a      	mov	r2, r3
 8001224:	211e      	movs	r1, #30
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f821 	bl	800126e <LoRa_write>
	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f001 fd4b 	bl	8002cc8 <HAL_Delay>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af02      	add	r7, sp, #8
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800124c:	b2db      	uxtb	r3, r3
 800124e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001250:	f107 030f 	add.w	r3, r7, #15
 8001254:	f107 010e 	add.w	r1, r7, #14
 8001258:	2201      	movs	r2, #1
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe44 	bl	8000eec <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af02      	add	r7, sp, #8
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
 800127a:	4613      	mov	r3, r2
 800127c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800128c:	f107 030f 	add.w	r3, r7, #15
 8001290:	f107 010e 	add.w	r1, r7, #14
 8001294:	2201      	movs	r2, #1
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fe64 	bl	8000f68 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

	return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffee 	bl	80012a8 <LoRa_isvalid>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8096 	beq.w	8001400 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80012d4:	2100      	movs	r1, #0
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fda7 	bl	8000e2a <LoRa_gotoMode>
			HAL_Delay(10);
 80012dc:	200a      	movs	r0, #10
 80012de:	f001 fcf3 	bl	8002cc8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80012e2:	2101      	movs	r1, #1
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffa8 	bl	800123a <LoRa_read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80012ee:	200a      	movs	r0, #10
 80012f0:	f001 fcea 	bl	8002cc8 <HAL_Delay>
			data = read | 0x80;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012fa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	461a      	mov	r2, r3
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffb3 	bl	800126e <LoRa_write>
			HAL_Delay(100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f001 fcdd 	bl	8002cc8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fec1 	bl	800109c <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff1c 	bl	8001160 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800132e:	4619      	mov	r1, r3
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff29 	bl	8001188 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001336:	2223      	movs	r2, #35	@ 0x23
 8001338:	210c      	movs	r1, #12
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff97 	bl	800126e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff5f 	bl	8001204 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fed4 	bl	80010fc <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001354:	22ff      	movs	r2, #255	@ 0xff
 8001356:	211f      	movs	r1, #31
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff88 	bl	800126e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	b2da      	uxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	461a      	mov	r2, r3
 800137e:	211d      	movs	r1, #29
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff74 	bl	800126e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fe52 	bl	8001030 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	2120      	movs	r1, #32
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff67 	bl	800126e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	2121      	movs	r1, #33	@ 0x21
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff5f 	bl	800126e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80013b0:	2140      	movs	r1, #64	@ 0x40
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff41 	bl	800123a <LoRa_read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80013c2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	461a      	mov	r2, r3
 80013c8:	2140      	movs	r1, #64	@ 0x40
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff4f 	bl	800126e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80013d0:	2101      	movs	r1, #1
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fd29 	bl	8000e2a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80013de:	200a      	movs	r0, #10
 80013e0:	f001 fc72 	bl	8002cc8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80013e4:	2142      	movs	r1, #66	@ 0x42
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff27 	bl	800123a <LoRa_read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d101      	bne.n	80013fa <LoRa_init+0x13c>
				return LORA_OK;
 80013f6:	23c8      	movs	r3, #200	@ 0xc8
 80013f8:	e004      	b.n	8001404 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80013fa:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80013fe:	e001      	b.n	8001404 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001400:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <App_StateMachine_Init>:
uint8_t throttle;			// throttle value
uint8_t steering;			// steering value

// function to be called before tick() function
void App_StateMachine_Init()
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b098      	sub	sp, #96	@ 0x60
 8001410:	af00      	add	r7, sp, #0
	// initialize UART driver
	Driver_UART_Init();
 8001412:	f000 f9f5 	bl	8001800 <Driver_UART_Init>
	// initialize LoRa
	LoRa lora;
	lora = newLoRa();
 8001416:	463b      	mov	r3, r7
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fcbf 	bl	8000d9c <newLoRa>
 800141e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001422:	463d      	mov	r5, r7
 8001424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001430:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	lora.CS_port = LORA_NSS_GPIO_Port;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <App_StateMachine_Init+0x98>)
 8001436:	633b      	str	r3, [r7, #48]	@ 0x30
	lora.CS_pin = LORA_NSS_Pin;
 8001438:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	lora.reset_port = LORA_RST_GPIO_Port;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <App_StateMachine_Init+0x98>)
 8001440:	63bb      	str	r3, [r7, #56]	@ 0x38
	lora.reset_pin = LORA_RST_Pin;
 8001442:	2310      	movs	r3, #16
 8001444:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	lora.DIO0_port = LORA_DIO0_GPIO_Port;
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <App_StateMachine_Init+0x98>)
 8001448:	643b      	str	r3, [r7, #64]	@ 0x40
	lora.DIO0_pin = LORA_DIO0_Pin;
 800144a:	2320      	movs	r3, #32
 800144c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	lora.hSPIx = &hspi2;
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <App_StateMachine_Init+0x9c>)
 8001452:	64bb      	str	r3, [r7, #72]	@ 0x48

	lora.frequency = 915;
 8001454:	f240 3393 	movw	r3, #915	@ 0x393
 8001458:	653b      	str	r3, [r7, #80]	@ 0x50

	LoRa_reset(&lora);
 800145a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fcc5 	bl	8000dee <LoRa_reset>
	uint16_t lora_status = LoRa_init(&lora);
 8001464:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff28 	bl	80012be <LoRa_init>
 800146e:	4603      	mov	r3, r0
 8001470:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	if (lora_status == LORA_OK)
 8001474:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001478:	2bc8      	cmp	r3, #200	@ 0xc8
 800147a:	d104      	bne.n	8001486 <App_StateMachine_Init+0x7a>
	{
		Driver_UART_Transmit(NUCLEO, "LoRa OK\r\n");
 800147c:	490b      	ldr	r1, [pc, #44]	@ (80014ac <App_StateMachine_Init+0xa0>)
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f9e4 	bl	800184c <Driver_UART_Transmit>
 8001484:	e003      	b.n	800148e <App_StateMachine_Init+0x82>
	}
	else
	{
		Driver_UART_Transmit(NUCLEO, "LoRa FAILED\r\n");
 8001486:	490a      	ldr	r1, [pc, #40]	@ (80014b0 <App_StateMachine_Init+0xa4>)
 8001488:	2000      	movs	r0, #0
 800148a:	f000 f9df 	bl	800184c <Driver_UART_Transmit>
	}
	// turn all fans off (should be default state anyway)
	Driver_Fan_All_Off();
 800148e:	f000 f925 	bl	80016dc <Driver_Fan_All_Off>
	// initialize e-brake
	Driver_EBrake_Init();
 8001492:	f000 f8c7 	bl	8001624 <Driver_EBrake_Init>
	// set current state to idle
	current_state = STATE_IDLE;
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <App_StateMachine_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	3760      	adds	r7, #96	@ 0x60
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdb0      	pop	{r4, r5, r7, pc}
 80014a4:	40020400 	.word	0x40020400
 80014a8:	20000200 	.word	0x20000200
 80014ac:	080085f8 	.word	0x080085f8
 80014b0:	08008604 	.word	0x08008604
 80014b4:	200000b8 	.word	0x200000b8

080014b8 <App_StateMachine_Tick>:

// function to be called on timer interrupt
void App_StateMachine_Tick()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b09c      	sub	sp, #112	@ 0x70
 80014bc:	af00      	add	r7, sp, #0
	// statements to be called regardless of state
	ticks_in_state += 1;
 80014be:	4b48      	ldr	r3, [pc, #288]	@ (80015e0 <App_StateMachine_Tick+0x128>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a46      	ldr	r2, [pc, #280]	@ (80015e0 <App_StateMachine_Tick+0x128>)
 80014c6:	6013      	str	r3, [r2, #0]
	// run state-specific code
	switch (current_state)
 80014c8:	4b46      	ldr	r3, [pc, #280]	@ (80015e4 <App_StateMachine_Tick+0x12c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	f200 8083 	bhi.w	80015d8 <App_StateMachine_Tick+0x120>
 80014d2:	a201      	add	r2, pc, #4	@ (adr r2, 80014d8 <App_StateMachine_Tick+0x20>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	080014ed 	.word	0x080014ed
 80014dc:	08001505 	.word	0x08001505
 80014e0:	080015b5 	.word	0x080015b5
 80014e4:	080015bd 	.word	0x080015bd
 80014e8:	080015cb 	.word	0x080015cb
	{
		case (STATE_IDLE):
		{
			Driver_Status_LED_SetHex(0x1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f000 f935 	bl	800175c <Driver_Status_LED_SetHex>
			if (ticks_in_state > (5 * TICKS_PER_SEC))
 80014f2:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <App_StateMachine_Tick+0x128>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014fa:	d96a      	bls.n	80015d2 <App_StateMachine_Tick+0x11a>
			{
				App_StateMachine_ChangeState(STATE_AUTO);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f000 f87b 	bl	80015f8 <App_StateMachine_ChangeState>
			}
			break;
 8001502:	e066      	b.n	80015d2 <App_StateMachine_Tick+0x11a>
		}

		case (STATE_AUTO):
		{
			// set status LEDs
			Driver_Status_LED_SetHex(0x2);
 8001504:	2002      	movs	r0, #2
 8001506:	f000 f929 	bl	800175c <Driver_Status_LED_SetHex>
			// get current UART sequence
			unsigned char * uart_seq = Driver_UART_GetBuffer(JETSON);
 800150a:	2001      	movs	r0, #1
 800150c:	f000 fa0a 	bl	8001924 <Driver_UART_GetBuffer>
 8001510:	66f8      	str	r0, [r7, #108]	@ 0x6c
			uint8_t uart_seq_tail = Driver_UART_GetTail(JETSON);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 fa20 	bl	8001958 <Driver_UART_GetTail>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			// make sure enough bytes have arrived and last byte is end byte
			if ((uart_seq_tail >= (JETSON_UART_SEQ_LENGTH + 2)) && (uart_seq[uart_seq_tail - 1] == JETSON_UART_END_BYTE))
 800151e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001522:	2b03      	cmp	r3, #3
 8001524:	d957      	bls.n	80015d6 <App_StateMachine_Tick+0x11e>
 8001526:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800152a:	3b01      	subs	r3, #1
 800152c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800152e:	4413      	add	r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2bff      	cmp	r3, #255	@ 0xff
 8001534:	d14f      	bne.n	80015d6 <App_StateMachine_Tick+0x11e>
			{
				// check if first byte was the start byte
				if (uart_seq[uart_seq_tail - JETSON_UART_SEQ_LENGTH - 2] == JETSON_UART_START_BYTE)
 8001536:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800153a:	3b04      	subs	r3, #4
 800153c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2bfe      	cmp	r3, #254	@ 0xfe
 8001544:	d12e      	bne.n	80015a4 <App_StateMachine_Tick+0xec>
				{
					// first byte after start byte is throttle
					throttle = uart_seq[(uart_seq_tail - JETSON_UART_SEQ_LENGTH - 2) + 1];
 8001546:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800154a:	3b03      	subs	r3, #3
 800154c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800154e:	4413      	add	r3, r2
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <App_StateMachine_Tick+0x130>)
 8001554:	701a      	strb	r2, [r3, #0]
					throttle <<= 1; // multiply by 2 (map 128-255 to 0-255)
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <App_StateMachine_Tick+0x130>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <App_StateMachine_Tick+0x130>)
 8001560:	701a      	strb	r2, [r3, #0]
					// next byte is steering
					steering = uart_seq[(uart_seq_tail - JETSON_UART_SEQ_LENGTH - 2) + 2];
 8001562:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001566:	3b02      	subs	r3, #2
 8001568:	461a      	mov	r2, r3
 800156a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800156c:	4413      	add	r3, r2
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <App_StateMachine_Tick+0x134>)
 8001572:	701a      	strb	r2, [r3, #0]
					steering <<= 1; // multiply by 2 (map 128-255 to 0-255)
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <App_StateMachine_Tick+0x134>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <App_StateMachine_Tick+0x134>)
 800157e:	701a      	strb	r2, [r3, #0]
					// print received values to debug UART interface
					char buf[100];
					sprintf(buf, "Throttle: %d, Steering: %d\r\n", throttle, steering);
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <App_StateMachine_Tick+0x130>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <App_StateMachine_Tick+0x134>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	1d38      	adds	r0, r7, #4
 800158c:	4918      	ldr	r1, [pc, #96]	@ (80015f0 <App_StateMachine_Tick+0x138>)
 800158e:	f006 fb43 	bl	8007c18 <siprintf>
					Driver_UART_Transmit(NUCLEO, buf);
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f958 	bl	800184c <Driver_UART_Transmit>
					// clear buffer for next data
					Driver_UART_ClearBuffer(JETSON);
 800159c:	2001      	movs	r0, #1
 800159e:	f000 f9f7 	bl	8001990 <Driver_UART_ClearBuffer>
					Driver_UART_Transmit(NUCLEO, "Incorrect start bit!\r\n");
					// clear buffer for next data
					Driver_UART_ClearBuffer(JETSON);
				}
			}
			break;
 80015a2:	e018      	b.n	80015d6 <App_StateMachine_Tick+0x11e>
					Driver_UART_Transmit(NUCLEO, "Incorrect start bit!\r\n");
 80015a4:	4913      	ldr	r1, [pc, #76]	@ (80015f4 <App_StateMachine_Tick+0x13c>)
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f950 	bl	800184c <Driver_UART_Transmit>
					Driver_UART_ClearBuffer(JETSON);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 f9ef 	bl	8001990 <Driver_UART_ClearBuffer>
			break;
 80015b2:	e010      	b.n	80015d6 <App_StateMachine_Tick+0x11e>
		}

		case (STATE_RC):
		{
			Driver_Status_LED_SetHex(0x3);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f8d1 	bl	800175c <Driver_Status_LED_SetHex>
			break;
 80015ba:	e00d      	b.n	80015d8 <App_StateMachine_Tick+0x120>
		}

		case (STATE_EBRAKE):
		{
			Driver_Status_LED_SetHex(0x4);
 80015bc:	2004      	movs	r0, #4
 80015be:	f000 f8cd 	bl	800175c <Driver_Status_LED_SetHex>
			App_StateMachine_ChangeState(STATE_ERROR);
 80015c2:	2004      	movs	r0, #4
 80015c4:	f000 f818 	bl	80015f8 <App_StateMachine_ChangeState>
			break;
 80015c8:	e006      	b.n	80015d8 <App_StateMachine_Tick+0x120>
		}

		case (STATE_ERROR):
		{
			Driver_Status_LED_SetHex(0x8);
 80015ca:	2008      	movs	r0, #8
 80015cc:	f000 f8c6 	bl	800175c <Driver_Status_LED_SetHex>
			break;
 80015d0:	e002      	b.n	80015d8 <App_StateMachine_Tick+0x120>
			break;
 80015d2:	bf00      	nop
 80015d4:	e000      	b.n	80015d8 <App_StateMachine_Tick+0x120>
			break;
 80015d6:	bf00      	nop
		}
	}
}
 80015d8:	bf00      	nop
 80015da:	3770      	adds	r7, #112	@ 0x70
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000bc 	.word	0x200000bc
 80015e4:	200000b8 	.word	0x200000b8
 80015e8:	200000c0 	.word	0x200000c0
 80015ec:	200000c1 	.word	0x200000c1
 80015f0:	08008614 	.word	0x08008614
 80015f4:	08008634 	.word	0x08008634

080015f8 <App_StateMachine_ChangeState>:

void App_StateMachine_ChangeState(State_T new_state)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	// statements to be called regardless of state transition
	ticks_in_state = 0;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <App_StateMachine_ChangeState+0x24>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
	// change state
	current_state = new_state;
 8001608:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <App_StateMachine_ChangeState+0x28>)
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	7013      	strb	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200000bc 	.word	0x200000bc
 8001620:	200000b8 	.word	0x200000b8

08001624 <Driver_EBrake_Init>:
#include "main.h"
#include "driver_ebrake.h"

// function to initialize the e-brake (retract for a set period of time)
void Driver_EBrake_Init()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	// retract e-brake
	Driver_EBrake_Retract();
 8001628:	f000 f808 	bl	800163c <Driver_EBrake_Retract>
	// let e-brake retract for some time
	HAL_Delay(2000);
 800162c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001630:	f001 fb4a 	bl	8002cc8 <HAL_Delay>
	// turn e-brake off
	Driver_EBrake_Off();
 8001634:	f000 f822 	bl	800167c <Driver_EBrake_Off>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <Driver_EBrake_Retract>:
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
}

// function to retract the e-brake servo
void Driver_EBrake_Retract()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001646:	480b      	ldr	r0, [pc, #44]	@ (8001674 <Driver_EBrake_Retract+0x38>)
 8001648:	f002 fc7c 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 1);
 800164c:	2201      	movs	r2, #1
 800164e:	2140      	movs	r1, #64	@ 0x40
 8001650:	4808      	ldr	r0, [pc, #32]	@ (8001674 <Driver_EBrake_Retract+0x38>)
 8001652:	f002 fc77 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800165c:	4806      	ldr	r0, [pc, #24]	@ (8001678 <Driver_EBrake_Retract+0x3c>)
 800165e:	f002 fc71 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001668:	4803      	ldr	r0, [pc, #12]	@ (8001678 <Driver_EBrake_Retract+0x3c>)
 800166a:	f002 fc6b 	bl	8003f44 <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020800 	.word	0x40020800
 8001678:	40020400 	.word	0x40020400

0800167c <Driver_EBrake_Off>:

// function to turn the e-brake servo off (no drive command)
void Driver_EBrake_Off()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_INA_GPIO_Port, BRAKE_INA_Pin, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001686:	480b      	ldr	r0, [pc, #44]	@ (80016b4 <Driver_EBrake_Off+0x38>)
 8001688:	f002 fc5c 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_INB_GPIO_Port, BRAKE_INB_Pin, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2140      	movs	r1, #64	@ 0x40
 8001690:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <Driver_EBrake_Off+0x38>)
 8001692:	f002 fc57 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_SEL0_GPIO_Port, BRAKE_SEL0_Pin, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800169c:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <Driver_EBrake_Off+0x3c>)
 800169e:	f002 fc51 	bl	8003f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRAKE_PWM_GPIO_Port, BRAKE_PWM_Pin, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <Driver_EBrake_Off+0x3c>)
 80016aa:	f002 fc4b 	bl	8003f44 <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020400 	.word	0x40020400

080016bc <Driver_Fan_Off>:
	HAL_GPIO_WritePin(fan.port, fan.pin, 1);
}

// function to turn a fan off
void Driver_Fan_Off(Fan_T fan)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	463b      	mov	r3, r7
 80016c4:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(fan.port, fan.pin, 0);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	88b9      	ldrh	r1, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fc38 	bl	8003f44 <HAL_GPIO_WritePin>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <Driver_Fan_All_Off>:
	Driver_Fan_On(FAN4);
}

// toggle to turn all fans off
void Driver_Fan_All_Off()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	Driver_Fan_Off(FAN1);
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <Driver_Fan_All_Off+0x30>)
 80016e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016e6:	f7ff ffe9 	bl	80016bc <Driver_Fan_Off>
	Driver_Fan_Off(FAN2);
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <Driver_Fan_All_Off+0x34>)
 80016ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016f0:	f7ff ffe4 	bl	80016bc <Driver_Fan_Off>
	Driver_Fan_Off(FAN3);
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <Driver_Fan_All_Off+0x38>)
 80016f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016fa:	f7ff ffdf 	bl	80016bc <Driver_Fan_Off>
	Driver_Fan_Off(FAN4);
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <Driver_Fan_All_Off+0x3c>)
 8001700:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001704:	f7ff ffda 	bl	80016bc <Driver_Fan_Off>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	20000008 	.word	0x20000008
 8001714:	20000010 	.word	0x20000010
 8001718:	20000018 	.word	0x20000018

0800171c <Driver_Status_LED_On>:
Stat_LED_T STAT3 = { .port = STAT3_GPIO_Port, .pin = STAT3_Pin };
Stat_LED_T STAT4 = { .port = STAT4_GPIO_Port, .pin = STAT4_Pin };

// function to turn a status LED on
void Driver_Status_LED_On(Stat_LED_T led)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	463b      	mov	r3, r7
 8001724:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 1);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	88b9      	ldrh	r1, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fc08 	bl	8003f44 <HAL_GPIO_WritePin>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <Driver_Status_LED_Off>:

// function to turn a status LED off
void Driver_Status_LED_Off(Stat_LED_T led)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	463b      	mov	r3, r7
 8001744:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(led.port, led.pin, 0);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	88b9      	ldrh	r1, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fbf8 	bl	8003f44 <HAL_GPIO_WritePin>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <Driver_Status_LED_SetHex>:

// function to convert a 4-bit hex value into LED status function calls
void Driver_Status_LED_SetHex(uint8_t value)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	if (value & 0x1)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <Driver_Status_LED_SetHex+0x20>
	{
		Driver_Status_LED_On(STAT1);
 8001770:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <Driver_Status_LED_SetHex+0x94>)
 8001772:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001776:	f7ff ffd1 	bl	800171c <Driver_Status_LED_On>
 800177a:	e004      	b.n	8001786 <Driver_Status_LED_SetHex+0x2a>
	}
	else
	{
		Driver_Status_LED_Off(STAT1);
 800177c:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <Driver_Status_LED_SetHex+0x94>)
 800177e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001782:	f7ff ffdb 	bl	800173c <Driver_Status_LED_Off>
	}

	if (value & 0x2)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <Driver_Status_LED_SetHex+0x40>
	{
		Driver_Status_LED_On(STAT2);
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <Driver_Status_LED_SetHex+0x98>)
 8001792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001796:	f7ff ffc1 	bl	800171c <Driver_Status_LED_On>
 800179a:	e004      	b.n	80017a6 <Driver_Status_LED_SetHex+0x4a>
	}
	else
	{
		Driver_Status_LED_Off(STAT2);
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <Driver_Status_LED_SetHex+0x98>)
 800179e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017a2:	f7ff ffcb 	bl	800173c <Driver_Status_LED_Off>
	}

	if (value & 0x4)
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <Driver_Status_LED_SetHex+0x60>
	{
		Driver_Status_LED_On(STAT3);
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <Driver_Status_LED_SetHex+0x9c>)
 80017b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017b6:	f7ff ffb1 	bl	800171c <Driver_Status_LED_On>
 80017ba:	e004      	b.n	80017c6 <Driver_Status_LED_SetHex+0x6a>
	}
	else
	{
		Driver_Status_LED_Off(STAT3);
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <Driver_Status_LED_SetHex+0x9c>)
 80017be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017c2:	f7ff ffbb 	bl	800173c <Driver_Status_LED_Off>
	}

	if (value & 0x8)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <Driver_Status_LED_SetHex+0x80>
	{
		Driver_Status_LED_On(STAT4);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <Driver_Status_LED_SetHex+0xa0>)
 80017d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017d6:	f7ff ffa1 	bl	800171c <Driver_Status_LED_On>
	}
	else
	{
		Driver_Status_LED_Off(STAT4);
	}
}
 80017da:	e004      	b.n	80017e6 <Driver_Status_LED_SetHex+0x8a>
		Driver_Status_LED_Off(STAT4);
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <Driver_Status_LED_SetHex+0xa0>)
 80017de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017e2:	f7ff ffab 	bl	800173c <Driver_Status_LED_Off>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000020 	.word	0x20000020
 80017f4:	20000028 	.word	0x20000028
 80017f8:	20000030 	.word	0x20000030
 80017fc:	20000038 	.word	0x20000038

08001800 <Driver_UART_Init>:
uint8_t uart2_recv_buf_tail;			// location of next empty byte in recv buffer
uint8_t uart4_recv_buf_tail;			// location of next empty byte in recv buffer

// function to initialize UART driver
void Driver_UART_Init()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	// default variable values
	uart2_recv_buf_tail = 0;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <Driver_UART_Init+0x30>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
	uart4_recv_buf_tail = 0;
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <Driver_UART_Init+0x34>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
	// start listening for interrupts
	HAL_UART_Receive_IT(&huart2, (unsigned char *) uart2_recv_buf, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	4909      	ldr	r1, [pc, #36]	@ (8001838 <Driver_UART_Init+0x38>)
 8001814:	4809      	ldr	r0, [pc, #36]	@ (800183c <Driver_UART_Init+0x3c>)
 8001816:	f005 f8c1 	bl	800699c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, (unsigned char *) uart4_recv_buf, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	4908      	ldr	r1, [pc, #32]	@ (8001840 <Driver_UART_Init+0x40>)
 800181e:	4809      	ldr	r0, [pc, #36]	@ (8001844 <Driver_UART_Init+0x44>)
 8001820:	f005 f8bc 	bl	800699c <HAL_UART_Receive_IT>
	// "hello" message
	Driver_UART_Transmit(NUCLEO, "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n");
 8001824:	4908      	ldr	r1, [pc, #32]	@ (8001848 <Driver_UART_Init+0x48>)
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f810 	bl	800184c <Driver_UART_Transmit>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200001b4 	.word	0x200001b4
 8001834:	200001b5 	.word	0x200001b5
 8001838:	20000114 	.word	0x20000114
 800183c:	20000454 	.word	0x20000454
 8001840:	20000164 	.word	0x20000164
 8001844:	200003c4 	.word	0x200003c4
 8001848:	0800864c 	.word	0x0800864c

0800184c <Driver_UART_Transmit>:

// function to send a string message over UART
void Driver_UART_Transmit(UART_Location_T dest, char * message)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
	// send to correct destination
	if (dest == NUCLEO)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d125      	bne.n	80018aa <Driver_UART_Transmit+0x5e>
	{
		if (message == NULL)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d113      	bne.n	800188c <Driver_UART_Transmit+0x40>
		{
			// place buffer into message
			strncpy(uart_send_buf, uart2_recv_buf, uart2_recv_buf_tail);
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <Driver_UART_Transmit+0xb8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4927      	ldr	r1, [pc, #156]	@ (8001908 <Driver_UART_Transmit+0xbc>)
 800186c:	4827      	ldr	r0, [pc, #156]	@ (800190c <Driver_UART_Transmit+0xc0>)
 800186e:	f006 f9fb 	bl	8007c68 <strncpy>
			// send
			HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart_send_buf, uart2_recv_buf_tail);
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <Driver_UART_Transmit+0xb8>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4924      	ldr	r1, [pc, #144]	@ (800190c <Driver_UART_Transmit+0xc0>)
 800187a:	4825      	ldr	r0, [pc, #148]	@ (8001910 <Driver_UART_Transmit+0xc4>)
 800187c:	f005 f8b4 	bl	80069e8 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(&huart2, (unsigned char *) "\r\n", 2);
 8001880:	2202      	movs	r2, #2
 8001882:	4924      	ldr	r1, [pc, #144]	@ (8001914 <Driver_UART_Transmit+0xc8>)
 8001884:	4822      	ldr	r0, [pc, #136]	@ (8001910 <Driver_UART_Transmit+0xc4>)
 8001886:	f005 f8af 	bl	80069e8 <HAL_UART_Transmit_DMA>
			strcpy(uart_send_buf, message);
			// send
			HAL_UART_Transmit_DMA(&huart4, (unsigned char *) uart_send_buf, strlen(uart_send_buf));
		}
	}
}
 800188a:	e036      	b.n	80018fa <Driver_UART_Transmit+0xae>
			strcpy(uart_send_buf, message);
 800188c:	6839      	ldr	r1, [r7, #0]
 800188e:	481f      	ldr	r0, [pc, #124]	@ (800190c <Driver_UART_Transmit+0xc0>)
 8001890:	f006 fa2a 	bl	8007ce8 <strcpy>
			HAL_UART_Transmit_DMA(&huart2, (unsigned char *) uart_send_buf, strlen(uart_send_buf));
 8001894:	481d      	ldr	r0, [pc, #116]	@ (800190c <Driver_UART_Transmit+0xc0>)
 8001896:	f7fe fcbb 	bl	8000210 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29b      	uxth	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	491a      	ldr	r1, [pc, #104]	@ (800190c <Driver_UART_Transmit+0xc0>)
 80018a2:	481b      	ldr	r0, [pc, #108]	@ (8001910 <Driver_UART_Transmit+0xc4>)
 80018a4:	f005 f8a0 	bl	80069e8 <HAL_UART_Transmit_DMA>
}
 80018a8:	e027      	b.n	80018fa <Driver_UART_Transmit+0xae>
	else if (dest == JETSON)
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d124      	bne.n	80018fa <Driver_UART_Transmit+0xae>
		if (message == NULL)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d113      	bne.n	80018de <Driver_UART_Transmit+0x92>
			strncpy(uart_send_buf, uart4_recv_buf, uart4_recv_buf_tail);
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <Driver_UART_Transmit+0xcc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4917      	ldr	r1, [pc, #92]	@ (800191c <Driver_UART_Transmit+0xd0>)
 80018be:	4813      	ldr	r0, [pc, #76]	@ (800190c <Driver_UART_Transmit+0xc0>)
 80018c0:	f006 f9d2 	bl	8007c68 <strncpy>
			HAL_UART_Transmit_DMA(&huart4, (unsigned char *) uart_send_buf, uart4_recv_buf_tail);
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <Driver_UART_Transmit+0xcc>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4910      	ldr	r1, [pc, #64]	@ (800190c <Driver_UART_Transmit+0xc0>)
 80018cc:	4814      	ldr	r0, [pc, #80]	@ (8001920 <Driver_UART_Transmit+0xd4>)
 80018ce:	f005 f88b 	bl	80069e8 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(&huart4, (unsigned char *) "\r\n", 2);
 80018d2:	2202      	movs	r2, #2
 80018d4:	490f      	ldr	r1, [pc, #60]	@ (8001914 <Driver_UART_Transmit+0xc8>)
 80018d6:	4812      	ldr	r0, [pc, #72]	@ (8001920 <Driver_UART_Transmit+0xd4>)
 80018d8:	f005 f886 	bl	80069e8 <HAL_UART_Transmit_DMA>
}
 80018dc:	e00d      	b.n	80018fa <Driver_UART_Transmit+0xae>
			strcpy(uart_send_buf, message);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	480a      	ldr	r0, [pc, #40]	@ (800190c <Driver_UART_Transmit+0xc0>)
 80018e2:	f006 fa01 	bl	8007ce8 <strcpy>
			HAL_UART_Transmit_DMA(&huart4, (unsigned char *) uart_send_buf, strlen(uart_send_buf));
 80018e6:	4809      	ldr	r0, [pc, #36]	@ (800190c <Driver_UART_Transmit+0xc0>)
 80018e8:	f7fe fc92 	bl	8000210 <strlen>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	4906      	ldr	r1, [pc, #24]	@ (800190c <Driver_UART_Transmit+0xc0>)
 80018f4:	480a      	ldr	r0, [pc, #40]	@ (8001920 <Driver_UART_Transmit+0xd4>)
 80018f6:	f005 f877 	bl	80069e8 <HAL_UART_Transmit_DMA>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001b4 	.word	0x200001b4
 8001908:	20000114 	.word	0x20000114
 800190c:	200000c4 	.word	0x200000c4
 8001910:	20000454 	.word	0x20000454
 8001914:	08008688 	.word	0x08008688
 8001918:	200001b5 	.word	0x200001b5
 800191c:	20000164 	.word	0x20000164
 8001920:	200003c4 	.word	0x200003c4

08001924 <Driver_UART_GetBuffer>:

// function to get char buffer
unsigned char * Driver_UART_GetBuffer(UART_Location_T src)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	if (src == NUCLEO)
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <Driver_UART_GetBuffer+0x14>
	{
		return (unsigned char *) uart2_recv_buf;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <Driver_UART_GetBuffer+0x2c>)
 8001936:	e005      	b.n	8001944 <Driver_UART_GetBuffer+0x20>
	}
	else if (src == JETSON)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <Driver_UART_GetBuffer+0x1e>
	{
		return (unsigned char *) uart4_recv_buf;
 800193e:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <Driver_UART_GetBuffer+0x30>)
 8001940:	e000      	b.n	8001944 <Driver_UART_GetBuffer+0x20>
	}

	// error condition
	return NULL;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	20000114 	.word	0x20000114
 8001954:	20000164 	.word	0x20000164

08001958 <Driver_UART_GetTail>:

// function to get tail value for a buffer
uint8_t Driver_UART_GetTail(UART_Location_T src)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
	if (src == NUCLEO)
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <Driver_UART_GetTail+0x16>
	{
		return uart2_recv_buf_tail;
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <Driver_UART_GetTail+0x30>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	e006      	b.n	800197c <Driver_UART_GetTail+0x24>
	}
	else if (src == JETSON)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d102      	bne.n	800197a <Driver_UART_GetTail+0x22>
	{
		return uart4_recv_buf_tail;
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <Driver_UART_GetTail+0x34>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	e000      	b.n	800197c <Driver_UART_GetTail+0x24>
	}

	// error condition
	return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	200001b4 	.word	0x200001b4
 800198c:	200001b5 	.word	0x200001b5

08001990 <Driver_UART_ClearBuffer>:

// function to "clear" a buffer
void Driver_UART_ClearBuffer(UART_Location_T src)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	if (src == NUCLEO)
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d112      	bne.n	80019c6 <Driver_UART_ClearBuffer+0x36>
	{
		uart2_recv_buf_tail = 0;
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <Driver_UART_ClearBuffer+0x68>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart2);
 80019a6:	4815      	ldr	r0, [pc, #84]	@ (80019fc <Driver_UART_ClearBuffer+0x6c>)
 80019a8:	f005 f88e 	bl	8006ac8 <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(&huart2, Driver_UART_GetBuffer(NUCLEO) + uart2_recv_buf_tail, 1);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff ffb9 	bl	8001924 <Driver_UART_GetBuffer>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a10      	ldr	r2, [pc, #64]	@ (80019f8 <Driver_UART_ClearBuffer+0x68>)
 80019b6:	7812      	ldrb	r2, [r2, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	2201      	movs	r2, #1
 80019bc:	4619      	mov	r1, r3
 80019be:	480f      	ldr	r0, [pc, #60]	@ (80019fc <Driver_UART_ClearBuffer+0x6c>)
 80019c0:	f004 ffec 	bl	800699c <HAL_UART_Receive_IT>
	{
		uart4_recv_buf_tail = 0;
		HAL_UART_AbortReceive_IT(&huart4);
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
	}
}
 80019c4:	e014      	b.n	80019f0 <Driver_UART_ClearBuffer+0x60>
	else if (src == JETSON)
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d111      	bne.n	80019f0 <Driver_UART_ClearBuffer+0x60>
		uart4_recv_buf_tail = 0;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <Driver_UART_ClearBuffer+0x70>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart4);
 80019d2:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <Driver_UART_ClearBuffer+0x74>)
 80019d4:	f005 f878 	bl	8006ac8 <HAL_UART_AbortReceive_IT>
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff ffa3 	bl	8001924 <Driver_UART_GetBuffer>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <Driver_UART_ClearBuffer+0x70>)
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	2201      	movs	r2, #1
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <Driver_UART_ClearBuffer+0x74>)
 80019ec:	f004 ffd6 	bl	800699c <HAL_UART_Receive_IT>
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001b4 	.word	0x200001b4
 80019fc:	20000454 	.word	0x20000454
 8001a00:	200001b5 	.word	0x200001b5
 8001a04:	200003c4 	.word	0x200003c4

08001a08 <HAL_UART_RxCpltCallback>:

// UART interrupt callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_UART_RxCpltCallback+0x7c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d116      	bne.n	8001a46 <HAL_UART_RxCpltCallback+0x3e>
	{
		uart2_recv_buf_tail++;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_UART_RxCpltCallback+0x80>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_UART_RxCpltCallback+0x80>)
 8001a22:	701a      	strb	r2, [r3, #0]
		Driver_UART_Transmit(NUCLEO, NULL);
 8001a24:	2100      	movs	r1, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff ff10 	bl	800184c <Driver_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, Driver_UART_GetBuffer(NUCLEO) + uart2_recv_buf_tail, 1);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ff79 	bl	8001924 <Driver_UART_GetBuffer>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a14      	ldr	r2, [pc, #80]	@ (8001a88 <HAL_UART_RxCpltCallback+0x80>)
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4811      	ldr	r0, [pc, #68]	@ (8001a84 <HAL_UART_RxCpltCallback+0x7c>)
 8001a40:	f004 ffac 	bl	800699c <HAL_UART_Receive_IT>
	{
		uart4_recv_buf_tail++;
		Driver_UART_Transmit(JETSON, NULL);
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
	}
}
 8001a44:	e019      	b.n	8001a7a <HAL_UART_RxCpltCallback+0x72>
	else if (huart == &huart4)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_UART_RxCpltCallback+0x84>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d115      	bne.n	8001a7a <HAL_UART_RxCpltCallback+0x72>
		uart4_recv_buf_tail++;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <HAL_UART_RxCpltCallback+0x88>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_UART_RxCpltCallback+0x88>)
 8001a58:	701a      	strb	r2, [r3, #0]
		Driver_UART_Transmit(JETSON, NULL);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff fef5 	bl	800184c <Driver_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, Driver_UART_GetBuffer(JETSON) + uart4_recv_buf_tail, 1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff ff5e 	bl	8001924 <Driver_UART_GetBuffer>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a09      	ldr	r2, [pc, #36]	@ (8001a90 <HAL_UART_RxCpltCallback+0x88>)
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <HAL_UART_RxCpltCallback+0x84>)
 8001a76:	f004 ff91 	bl	800699c <HAL_UART_Receive_IT>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000454 	.word	0x20000454
 8001a88:	200001b4 	.word	0x200001b4
 8001a8c:	200003c4 	.word	0x200003c4
 8001a90:	200001b5 	.word	0x200001b5

08001a94 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001aa8:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <MX_ADC1_Init+0x9c>)
 8001aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001aae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ab2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ad6:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <MX_ADC1_Init+0xa0>)
 8001ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af4:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001af6:	f001 f90b 	bl	8002d10 <HAL_ADC_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b00:	f000 f9fe 	bl	8001f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001b04:	230f      	movs	r3, #15
 8001b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_ADC1_Init+0x98>)
 8001b16:	f001 f93f 	bl	8002d98 <HAL_ADC_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b20:	f000 f9ee 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200001b8 	.word	0x200001b8
 8001b30:	40012000 	.word	0x40012000
 8001b34:	0f000001 	.word	0x0f000001

08001b38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <HAL_ADC_MspInit+0x7c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d127      	bne.n	8001baa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BRAKE_CS_Pin;
 8001b92:	2320      	movs	r3, #32
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b96:	2303      	movs	r3, #3
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BRAKE_CS_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <HAL_ADC_MspInit+0x84>)
 8001ba6:	f002 f839 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800

08001bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <MX_DMA_Init+0x5c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <MX_DMA_Init+0x5c>)
 8001bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_DMA_Init+0x5c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	200d      	movs	r0, #13
 8001be8:	f001 fbdf 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bec:	200d      	movs	r0, #13
 8001bee:	f001 fbf8 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f001 fbd7 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bfc:	200f      	movs	r0, #15
 8001bfe:	f001 fbf0 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2011      	movs	r0, #17
 8001c08:	f001 fbcf 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c0c:	2011      	movs	r0, #17
 8001c0e:	f001 fbe8 	bl	80033e2 <HAL_NVIC_EnableIRQ>

}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b58      	ldr	r3, [pc, #352]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a57      	ldr	r2, [pc, #348]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b55      	ldr	r3, [pc, #340]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b51      	ldr	r3, [pc, #324]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a50      	ldr	r2, [pc, #320]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a49      	ldr	r2, [pc, #292]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b43      	ldr	r3, [pc, #268]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a42      	ldr	r2, [pc, #264]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <MX_GPIO_Init+0x198>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f640 5147 	movw	r1, #3399	@ 0xd47
 8001cc8:	483c      	ldr	r0, [pc, #240]	@ (8001dbc <MX_GPIO_Init+0x19c>)
 8001cca:	f002 f93b 	bl	8003f44 <HAL_GPIO_WritePin>
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f649 4130 	movw	r1, #39984	@ 0x9c30
 8001cd4:	483a      	ldr	r0, [pc, #232]	@ (8001dc0 <MX_GPIO_Init+0x1a0>)
 8001cd6:	f002 f935 	bl	8003f44 <HAL_GPIO_WritePin>
                          |STAT4_Pin|FAN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f243 3190 	movw	r1, #13200	@ 0x3390
 8001ce0:	4838      	ldr	r0, [pc, #224]	@ (8001dc4 <MX_GPIO_Init+0x1a4>)
 8001ce2:	f002 f92f 	bl	8003f44 <HAL_GPIO_WritePin>
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	482f      	ldr	r0, [pc, #188]	@ (8001dbc <MX_GPIO_Init+0x19c>)
 8001cfe:	f001 ff8d 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STR_EN__Pin|STR_INPUTA__Pin|STR_INPUTA__DIR_Pin|BRAKE_INB_Pin
 8001d02:	f640 5347 	movw	r3, #3399	@ 0xd47
 8001d06:	617b      	str	r3, [r7, #20]
                          |BRAKE_INA_Pin|FAN1_Pin|FAN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4828      	ldr	r0, [pc, #160]	@ (8001dbc <MX_GPIO_Init+0x19c>)
 8001d1c:	f001 ff7e 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = STR_INPUTB__DIR_Pin|STAT3_Pin|IMU_CS_Pin|STAT2_Pin
 8001d20:	f649 4330 	movw	r3, #39984	@ 0x9c30
 8001d24:	617b      	str	r3, [r7, #20]
                          |STAT4_Pin|FAN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4821      	ldr	r0, [pc, #132]	@ (8001dc0 <MX_GPIO_Init+0x1a0>)
 8001d3a:	f001 ff6f 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	481a      	ldr	r0, [pc, #104]	@ (8001dbc <MX_GPIO_Init+0x19c>)
 8001d54:	f001 ff62 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STAT1_Pin|LORA_NSS_Pin|LORA_RST_Pin|FAN3_Pin
 8001d58:	f243 3390 	movw	r3, #13200	@ 0x3390
 8001d5c:	617b      	str	r3, [r7, #20]
                          |BRAKE_SEL0_Pin|BRAKE_PWM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4814      	ldr	r0, [pc, #80]	@ (8001dc4 <MX_GPIO_Init+0x1a4>)
 8001d72:	f001 ff53 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001d76:	2320      	movs	r3, #32
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480e      	ldr	r0, [pc, #56]	@ (8001dc4 <MX_GPIO_Init+0x1a4>)
 8001d8c:	f001 ff46 	bl	8003c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	200a      	movs	r0, #10
 8001d96:	f001 fb08 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f001 fb21 	bl	80033e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2017      	movs	r0, #23
 8001da6:	f001 fb00 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001daa:	2017      	movs	r0, #23
 8001dac:	f001 fb19 	bl	80033e2 <HAL_NVIC_EnableIRQ>

}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	@ 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dcc:	f000 ff0a 	bl	8002be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd0:	f000 f824 	bl	8001e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd4:	f7ff ff24 	bl	8001c20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd8:	f7ff fef2 	bl	8001bc0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ddc:	f000 fd30 	bl	8002840 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001de0:	f000 fcda 	bl	8002798 <MX_UART4_Init>
  MX_SPI2_Init();
 8001de4:	f000 f892 	bl	8001f0c <MX_SPI2_Init>
  MX_TIM3_Init();
 8001de8:	f000 fa96 	bl	8002318 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001dec:	f000 fb56 	bl	800249c <MX_TIM8_Init>
  MX_UART5_Init();
 8001df0:	f000 fcfc 	bl	80027ec <MX_UART5_Init>
  MX_TIM1_Init();
 8001df4:	f000 f9f4 	bl	80021e0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001df8:	f7ff fe4c 	bl	8001a94 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001dfc:	f000 fa40 	bl	8002280 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001e00:	f000 fb16 	bl	8002430 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // disable timer interrupt for tick() to make sure init() function completes
  HAL_TIM_Base_Stop_IT(&htim6);
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <main+0x50>)
 8001e06:	f003 fdb7 	bl	8005978 <HAL_TIM_Base_Stop_IT>
  // call init() function for state machine
  App_StateMachine_Init();
 8001e0a:	f7ff faff 	bl	800140c <App_StateMachine_Init>
  // re-enable timer interrupt for tick()
  HAL_TIM_Base_Start_IT(&htim6);
 8001e0e:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <main+0x50>)
 8001e10:	f003 fd42 	bl	8005898 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <main+0x4c>
 8001e18:	20000334 	.word	0x20000334

08001e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b094      	sub	sp, #80	@ 0x50
 8001e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	2234      	movs	r2, #52	@ 0x34
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f005 ff14 	bl	8007c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef8 <SystemClock_Config+0xdc>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <SystemClock_Config+0xdc>)
 8001e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e50:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <SystemClock_Config+0xdc>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <SystemClock_Config+0xe0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a25      	ldr	r2, [pc, #148]	@ (8001efc <SystemClock_Config+0xe0>)
 8001e66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <SystemClock_Config+0xe0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e80:	2310      	movs	r3, #16
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e84:	2302      	movs	r3, #2
 8001e86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001e90:	23b4      	movs	r3, #180	@ 0xb4
 8001e92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 fc25 	bl	80046f4 <HAL_RCC_OscConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001eb0:	f000 f826 	bl	8001f00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001eb4:	f002 f884 	bl	8003fc0 <HAL_PWREx_EnableOverDrive>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ebe:	f000 f81f 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ece:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	2105      	movs	r1, #5
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 f8bd 	bl	8004060 <HAL_RCC_ClockConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001eec:	f000 f808 	bl	8001f00 <Error_Handler>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3750      	adds	r7, #80	@ 0x50
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <Error_Handler+0x8>

08001f0c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f12:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <MX_SPI2_Init+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f58:	220a      	movs	r2, #10
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_SPI2_Init+0x64>)
 8001f5e:	f002 fe67 	bl	8004c30 <HAL_SPI_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f68:	f7ff ffca 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000200 	.word	0x20000200
 8001f74:	40003800 	.word	0x40003800

08001f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	@ (8001ffc <HAL_SPI_MspInit+0x84>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12c      	bne.n	8001ff4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001fd2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <HAL_SPI_MspInit+0x8c>)
 8001ff0:	f001 fe14 	bl	8003c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40003800 	.word	0x40003800
 8002000:	40023800 	.word	0x40023800
 8002004:	40020400 	.word	0x40020400

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	4a0f      	ldr	r2, [pc, #60]	@ (8002054 <HAL_MspInit+0x4c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201c:	6453      	str	r3, [r2, #68]	@ 0x44
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4a08      	ldr	r2, [pc, #32]	@ (8002054 <HAL_MspInit+0x4c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	@ 0x40
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002046:	2007      	movs	r0, #7
 8002048:	f001 f9a4 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <NMI_Handler+0x4>

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <MemManage_Handler+0x4>

08002070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <UsageFault_Handler+0x4>

08002080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ae:	f000 fdeb 	bl	8002c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 80020ba:	2010      	movs	r0, #16
 80020bc:	f001 ff5c 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <DMA1_Stream2_IRQHandler+0x10>)
 80020ca:	f001 fb3d 	bl	8003748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200004fc 	.word	0x200004fc

080020d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <DMA1_Stream4_IRQHandler+0x10>)
 80020de:	f001 fb33 	bl	8003748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000049c 	.word	0x2000049c

080020ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <DMA1_Stream6_IRQHandler+0x10>)
 80020f2:	f001 fb29 	bl	8003748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000055c 	.word	0x2000055c

08002100 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8002104:	2020      	movs	r0, #32
 8002106:	f001 ff37 	bl	8003f78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <USART2_IRQHandler+0x10>)
 8002116:	f004 fd89 	bl	8006c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000454 	.word	0x20000454

08002124 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <UART4_IRQHandler+0x10>)
 800212a:	f004 fd7f 	bl	8006c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200003c4 	.word	0x200003c4

08002138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  App_StateMachine_Tick();
 800213c:	f7ff f9bc 	bl	80014b8 <App_StateMachine_Tick>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <TIM6_DAC_IRQHandler+0x14>)
 8002142:	f003 fcfa 	bl	8005b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000334 	.word	0x20000334

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f005 fd86 	bl	8007c90 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20020000 	.word	0x20020000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	20000258 	.word	0x20000258
 80021b8:	20000708 	.word	0x20000708

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <MX_TIM1_Init+0x98>)
 80021fe:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <MX_TIM1_Init+0x9c>)
 8002200:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002202:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <MX_TIM1_Init+0x98>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800220e:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002214:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800221c:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <MX_TIM1_Init+0x98>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002228:	4813      	ldr	r0, [pc, #76]	@ (8002278 <MX_TIM1_Init+0x98>)
 800222a:	f003 fae5 	bl	80057f8 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002234:	f7ff fe64 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800223c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	4619      	mov	r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002246:	f003 fe87 	bl	8005f58 <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002250:	f7ff fe56 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <MX_TIM1_Init+0x98>)
 8002262:	f004 fa69 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800226c:	f7ff fe48 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000025c 	.word	0x2000025c
 800227c:	40010000 	.word	0x40010000

08002280 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <MX_TIM2_Init+0x94>)
 800229e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022b0:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022c4:	4813      	ldr	r0, [pc, #76]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c6:	f003 fa97 	bl	80057f8 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022d0:	f7ff fe16 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022e2:	f003 fe39 	bl	8005f58 <HAL_TIM_ConfigClockSource>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022ec:	f7ff fe08 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022fe:	f004 fa1b 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002308:	f7ff fdfa 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200002a4 	.word	0x200002a4

08002318 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	@ 0x38
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002348:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <MX_TIM3_Init+0x110>)
 800234a:	4a38      	ldr	r2, [pc, #224]	@ (800242c <MX_TIM3_Init+0x114>)
 800234c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800234e:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <MX_TIM3_Init+0x110>)
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <MX_TIM3_Init+0x110>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800235a:	4b33      	ldr	r3, [pc, #204]	@ (8002428 <MX_TIM3_Init+0x110>)
 800235c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002360:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002362:	4b31      	ldr	r3, [pc, #196]	@ (8002428 <MX_TIM3_Init+0x110>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002368:	4b2f      	ldr	r3, [pc, #188]	@ (8002428 <MX_TIM3_Init+0x110>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800236e:	482e      	ldr	r0, [pc, #184]	@ (8002428 <MX_TIM3_Init+0x110>)
 8002370:	f003 fa42 	bl	80057f8 <HAL_TIM_Base_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800237a:	f7ff fdc1 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002384:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002388:	4619      	mov	r1, r3
 800238a:	4827      	ldr	r0, [pc, #156]	@ (8002428 <MX_TIM3_Init+0x110>)
 800238c:	f003 fde4 	bl	8005f58 <HAL_TIM_ConfigClockSource>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002396:	f7ff fdb3 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800239a:	4823      	ldr	r0, [pc, #140]	@ (8002428 <MX_TIM3_Init+0x110>)
 800239c:	f003 fb1b 	bl	80059d6 <HAL_TIM_OC_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023a6:	f7ff fdab 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023aa:	481f      	ldr	r0, [pc, #124]	@ (8002428 <MX_TIM3_Init+0x110>)
 80023ac:	f003 fb6c 	bl	8005a88 <HAL_TIM_PWM_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80023b6:	f7ff fda3 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	4619      	mov	r1, r3
 80023c8:	4817      	ldr	r0, [pc, #92]	@ (8002428 <MX_TIM3_Init+0x110>)
 80023ca:	f004 f9b5 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80023d4:	f7ff fd94 	bl	8001f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2208      	movs	r2, #8
 80023ec:	4619      	mov	r1, r3
 80023ee:	480e      	ldr	r0, [pc, #56]	@ (8002428 <MX_TIM3_Init+0x110>)
 80023f0:	f003 fc94 	bl	8005d1c <HAL_TIM_OC_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80023fa:	f7ff fd81 	bl	8001f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fe:	2360      	movs	r3, #96	@ 0x60
 8002400:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	220c      	movs	r2, #12
 8002406:	4619      	mov	r1, r3
 8002408:	4807      	ldr	r0, [pc, #28]	@ (8002428 <MX_TIM3_Init+0x110>)
 800240a:	f003 fce3 	bl	8005dd4 <HAL_TIM_PWM_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002414:	f7ff fd74 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002418:	4803      	ldr	r0, [pc, #12]	@ (8002428 <MX_TIM3_Init+0x110>)
 800241a:	f000 f95b 	bl	80026d4 <HAL_TIM_MspPostInit>

}
 800241e:	bf00      	nop
 8002420:	3738      	adds	r7, #56	@ 0x38
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002ec 	.word	0x200002ec
 800242c:	40000400 	.word	0x40000400

08002430 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002436:	463b      	mov	r3, r7
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <MX_TIM6_Init+0x64>)
 8002440:	4a15      	ldr	r2, [pc, #84]	@ (8002498 <MX_TIM6_Init+0x68>)
 8002442:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <MX_TIM6_Init+0x64>)
 8002446:	f242 3227 	movw	r2, #8999	@ 0x2327
 800244a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <MX_TIM6_Init+0x64>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <MX_TIM6_Init+0x64>)
 8002454:	2264      	movs	r2, #100	@ 0x64
 8002456:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002458:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <MX_TIM6_Init+0x64>)
 800245a:	2280      	movs	r2, #128	@ 0x80
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800245e:	480d      	ldr	r0, [pc, #52]	@ (8002494 <MX_TIM6_Init+0x64>)
 8002460:	f003 f9ca 	bl	80057f8 <HAL_TIM_Base_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800246a:	f7ff fd49 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800246e:	2320      	movs	r3, #32
 8002470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002476:	463b      	mov	r3, r7
 8002478:	4619      	mov	r1, r3
 800247a:	4806      	ldr	r0, [pc, #24]	@ (8002494 <MX_TIM6_Init+0x64>)
 800247c:	f004 f95c 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002486:	f7ff fd3b 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000334 	.word	0x20000334
 8002498:	40001000 	.word	0x40001000

0800249c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b096      	sub	sp, #88	@ 0x58
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]
 80024ca:	615a      	str	r2, [r3, #20]
 80024cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2220      	movs	r2, #32
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 fbbf 	bl	8007c58 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024da:	4b3d      	ldr	r3, [pc, #244]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80024dc:	4a3d      	ldr	r2, [pc, #244]	@ (80025d4 <MX_TIM8_Init+0x138>)
 80024de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80024e0:	4b3b      	ldr	r3, [pc, #236]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b3a      	ldr	r3, [pc, #232]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80024ec:	4b38      	ldr	r3, [pc, #224]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80024ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f4:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024fa:	4b35      	ldr	r3, [pc, #212]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002500:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <MX_TIM8_Init+0x134>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002506:	4832      	ldr	r0, [pc, #200]	@ (80025d0 <MX_TIM8_Init+0x134>)
 8002508:	f003 f976 	bl	80057f8 <HAL_TIM_Base_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002512:	f7ff fcf5 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800251a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800251c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002520:	4619      	mov	r1, r3
 8002522:	482b      	ldr	r0, [pc, #172]	@ (80025d0 <MX_TIM8_Init+0x134>)
 8002524:	f003 fd18 	bl	8005f58 <HAL_TIM_ConfigClockSource>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800252e:	f7ff fce7 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002532:	4827      	ldr	r0, [pc, #156]	@ (80025d0 <MX_TIM8_Init+0x134>)
 8002534:	f003 faa8 	bl	8005a88 <HAL_TIM_PWM_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800253e:	f7ff fcdf 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800254a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800254e:	4619      	mov	r1, r3
 8002550:	481f      	ldr	r0, [pc, #124]	@ (80025d0 <MX_TIM8_Init+0x134>)
 8002552:	f004 f8f1 	bl	8006738 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800255c:	f7ff fcd0 	bl	8001f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002560:	2360      	movs	r3, #96	@ 0x60
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	220c      	movs	r2, #12
 800257e:	4619      	mov	r1, r3
 8002580:	4813      	ldr	r0, [pc, #76]	@ (80025d0 <MX_TIM8_Init+0x134>)
 8002582:	f003 fc27 	bl	8005dd4 <HAL_TIM_PWM_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 800258c:	f7ff fcb8 	bl	8001f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4807      	ldr	r0, [pc, #28]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80025b4:	f004 f93c 	bl	8006830 <HAL_TIMEx_ConfigBreakDeadTime>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80025be:	f7ff fc9f 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80025c2:	4803      	ldr	r0, [pc, #12]	@ (80025d0 <MX_TIM8_Init+0x134>)
 80025c4:	f000 f886 	bl	80026d4 <HAL_TIM_MspPostInit>

}
 80025c8:	bf00      	nop
 80025ca:	3758      	adds	r7, #88	@ 0x58
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000037c 	.word	0x2000037c
 80025d4:	40010400 	.word	0x40010400

080025d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a36      	ldr	r2, [pc, #216]	@ (80026c0 <HAL_TIM_Base_MspInit+0xe8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	4a34      	ldr	r2, [pc, #208]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fa:	4b32      	ldr	r3, [pc, #200]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002606:	e056      	b.n	80026b6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a2a      	ldr	r2, [pc, #168]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
}
 800262e:	e042      	b.n	80026b6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a24      	ldr	r2, [pc, #144]	@ (80026c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	4b21      	ldr	r3, [pc, #132]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a20      	ldr	r2, [pc, #128]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697b      	ldr	r3, [r7, #20]
}
 8002656:	e02e      	b.n	80026b6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM6)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1b      	ldr	r2, [pc, #108]	@ (80026cc <HAL_TIM_Base_MspInit+0xf4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d116      	bne.n	8002690 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	6413      	str	r3, [r2, #64]	@ 0x40
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	2036      	movs	r0, #54	@ 0x36
 8002684:	f000 fe91 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002688:	2036      	movs	r0, #54	@ 0x36
 800268a:	f000 feaa 	bl	80033e2 <HAL_NVIC_EnableIRQ>
}
 800268e:	e012      	b.n	80026b6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0e      	ldr	r2, [pc, #56]	@ (80026d0 <HAL_TIM_Base_MspInit+0xf8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10d      	bne.n	80026b6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_TIM_Base_MspInit+0xec>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
}
 80026b6:	bf00      	nop
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40001000 	.word	0x40001000
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a24      	ldr	r2, [pc, #144]	@ (8002784 <HAL_TIM_MspPostInit+0xb0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d11e      	bne.n	8002734 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_TIM_MspPostInit+0xb4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a22      	ldr	r2, [pc, #136]	@ (8002788 <HAL_TIM_MspPostInit+0xb4>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_TIM_MspPostInit+0xb4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = STR_INPUTB__Pin|LED_SIG_Pin;
 8002712:	2303      	movs	r3, #3
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002722:	2302      	movs	r3, #2
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4817      	ldr	r0, [pc, #92]	@ (800278c <HAL_TIM_MspPostInit+0xb8>)
 800272e:	f001 fa75 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002732:	e023      	b.n	800277c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <HAL_TIM_MspPostInit+0xbc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d11e      	bne.n	800277c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_TIM_MspPostInit+0xb4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a10      	ldr	r2, [pc, #64]	@ (8002788 <HAL_TIM_MspPostInit+0xb4>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <HAL_TIM_MspPostInit+0xb4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VESC_PPM_Pin;
 800275a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800276c:	2303      	movs	r3, #3
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VESC_PPM_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4807      	ldr	r0, [pc, #28]	@ (8002794 <HAL_TIM_MspPostInit+0xc0>)
 8002778:	f001 fa50 	bl	8003c1c <HAL_GPIO_Init>
}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	@ 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40000400 	.word	0x40000400
 8002788:	40023800 	.word	0x40023800
 800278c:	40020400 	.word	0x40020400
 8002790:	40010400 	.word	0x40010400
 8002794:	40020800 	.word	0x40020800

08002798 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <MX_UART4_Init+0x4c>)
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <MX_UART4_Init+0x50>)
 80027a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027ce:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <MX_UART4_Init+0x4c>)
 80027d0:	f004 f894 	bl	80068fc <HAL_UART_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027da:	f7ff fb91 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200003c4 	.word	0x200003c4
 80027e8:	40004c00 	.word	0x40004c00

080027ec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <MX_UART5_Init+0x4c>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <MX_UART5_Init+0x50>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <MX_UART5_Init+0x4c>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <MX_UART5_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <MX_UART5_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <MX_UART5_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <MX_UART5_Init+0x4c>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <MX_UART5_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MX_UART5_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_UART5_Init+0x4c>)
 8002824:	f004 f86a 	bl	80068fc <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800282e:	f7ff fb67 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000040c 	.word	0x2000040c
 800283c:	40005000 	.word	0x40005000

08002840 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002846:	4a12      	ldr	r2, [pc, #72]	@ (8002890 <MX_USART2_UART_Init+0x50>)
 8002848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 800284c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002878:	f004 f840 	bl	80068fc <HAL_UART_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002882:	f7ff fb3d 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000454 	.word	0x20000454
 8002890:	40004400 	.word	0x40004400

08002894 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08e      	sub	sp, #56	@ 0x38
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a72      	ldr	r2, [pc, #456]	@ (8002a7c <HAL_UART_MspInit+0x1e8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	f040 8091 	bne.w	80029da <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
 80028bc:	4b70      	ldr	r3, [pc, #448]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	4a6f      	ldr	r2, [pc, #444]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80028c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	4b69      	ldr	r3, [pc, #420]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	4a68      	ldr	r2, [pc, #416]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e4:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028f0:	2303      	movs	r3, #3
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002900:	2308      	movs	r3, #8
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	485e      	ldr	r0, [pc, #376]	@ (8002a84 <HAL_UART_MspInit+0x1f0>)
 800290c:	f001 f986 	bl	8003c1c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002910:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002912:	4a5e      	ldr	r2, [pc, #376]	@ (8002a8c <HAL_UART_MspInit+0x1f8>)
 8002914:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002916:	4b5c      	ldr	r3, [pc, #368]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002918:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800291c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800291e:	4b5a      	ldr	r3, [pc, #360]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002920:	2240      	movs	r2, #64	@ 0x40
 8002922:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002924:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800292a:	4b57      	ldr	r3, [pc, #348]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 800292c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002930:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002932:	4b55      	ldr	r3, [pc, #340]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002938:	4b53      	ldr	r3, [pc, #332]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800293e:	4b52      	ldr	r3, [pc, #328]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002940:	2200      	movs	r2, #0
 8002942:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002944:	4b50      	ldr	r3, [pc, #320]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002950:	484d      	ldr	r0, [pc, #308]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002952:	f000 fd61 	bl	8003418 <HAL_DMA_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800295c:	f7ff fad0 	bl	8001f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a49      	ldr	r2, [pc, #292]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002964:	639a      	str	r2, [r3, #56]	@ 0x38
 8002966:	4a48      	ldr	r2, [pc, #288]	@ (8002a88 <HAL_UART_MspInit+0x1f4>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800296c:	4b48      	ldr	r3, [pc, #288]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 800296e:	4a49      	ldr	r2, [pc, #292]	@ (8002a94 <HAL_UART_MspInit+0x200>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002972:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 8002974:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002978:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297a:	4b45      	ldr	r3, [pc, #276]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002980:	4b43      	ldr	r3, [pc, #268]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002986:	4b42      	ldr	r3, [pc, #264]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 8002988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800298c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298e:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 8002990:	2200      	movs	r2, #0
 8002992:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002994:	4b3e      	ldr	r3, [pc, #248]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800299a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 800299c:	2200      	movs	r2, #0
 800299e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80029ac:	4838      	ldr	r0, [pc, #224]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 80029ae:	f000 fd33 	bl	8003418 <HAL_DMA_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80029b8:	f7ff faa2 	bl	8001f00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a34      	ldr	r2, [pc, #208]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 80029c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029c2:	4a33      	ldr	r2, [pc, #204]	@ (8002a90 <HAL_UART_MspInit+0x1fc>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	2034      	movs	r0, #52	@ 0x34
 80029ce:	f000 fcec 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80029d2:	2034      	movs	r0, #52	@ 0x34
 80029d4:	f000 fd05 	bl	80033e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029d8:	e0cb      	b.n	8002b72 <HAL_UART_MspInit+0x2de>
  else if(uartHandle->Instance==UART5)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2e      	ldr	r2, [pc, #184]	@ (8002a98 <HAL_UART_MspInit+0x204>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d15f      	bne.n	8002aa4 <HAL_UART_MspInit+0x210>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	4a24      	ldr	r2, [pc, #144]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80029ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f4:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a08:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a10:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_UART_MspInit+0x1ec>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a52:	4619      	mov	r1, r3
 8002a54:	4811      	ldr	r0, [pc, #68]	@ (8002a9c <HAL_UART_MspInit+0x208>)
 8002a56:	f001 f8e1 	bl	8003c1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a72:	4619      	mov	r1, r3
 8002a74:	480a      	ldr	r0, [pc, #40]	@ (8002aa0 <HAL_UART_MspInit+0x20c>)
 8002a76:	f001 f8d1 	bl	8003c1c <HAL_GPIO_Init>
}
 8002a7a:	e07a      	b.n	8002b72 <HAL_UART_MspInit+0x2de>
 8002a7c:	40004c00 	.word	0x40004c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	2000049c 	.word	0x2000049c
 8002a8c:	40026070 	.word	0x40026070
 8002a90:	200004fc 	.word	0x200004fc
 8002a94:	40026040 	.word	0x40026040
 8002a98:	40005000 	.word	0x40005000
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a34      	ldr	r2, [pc, #208]	@ (8002b7c <HAL_UART_MspInit+0x2e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d161      	bne.n	8002b72 <HAL_UART_MspInit+0x2de>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b33      	ldr	r3, [pc, #204]	@ (8002b80 <HAL_UART_MspInit+0x2ec>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	4a32      	ldr	r2, [pc, #200]	@ (8002b80 <HAL_UART_MspInit+0x2ec>)
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002abe:	4b30      	ldr	r3, [pc, #192]	@ (8002b80 <HAL_UART_MspInit+0x2ec>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	4b2c      	ldr	r3, [pc, #176]	@ (8002b80 <HAL_UART_MspInit+0x2ec>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <HAL_UART_MspInit+0x2ec>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <HAL_UART_MspInit+0x2ec>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ae6:	230c      	movs	r3, #12
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002af6:	2307      	movs	r3, #7
 8002af8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002afe:	4619      	mov	r1, r3
 8002b00:	4820      	ldr	r0, [pc, #128]	@ (8002b84 <HAL_UART_MspInit+0x2f0>)
 8002b02:	f001 f88b 	bl	8003c1c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b06:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b08:	4a20      	ldr	r2, [pc, #128]	@ (8002b8c <HAL_UART_MspInit+0x2f8>)
 8002b0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b12:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b14:	4b1c      	ldr	r3, [pc, #112]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b16:	2240      	movs	r2, #64	@ 0x40
 8002b18:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b26:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b28:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2e:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b34:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3a:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b46:	4810      	ldr	r0, [pc, #64]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b48:	f000 fc66 	bl	8003418 <HAL_DMA_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_UART_MspInit+0x2c2>
      Error_Handler();
 8002b52:	f7ff f9d5 	bl	8001f00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a0b      	ldr	r2, [pc, #44]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <HAL_UART_MspInit+0x2f4>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	2026      	movs	r0, #38	@ 0x26
 8002b68:	f000 fc1f 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b6c:	2026      	movs	r0, #38	@ 0x26
 8002b6e:	f000 fc38 	bl	80033e2 <HAL_NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3738      	adds	r7, #56	@ 0x38
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	2000055c 	.word	0x2000055c
 8002b8c:	400260a0 	.word	0x400260a0

08002b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b94:	f7ff fb12 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b98:	480c      	ldr	r0, [pc, #48]	@ (8002bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b9a:	490d      	ldr	r1, [pc, #52]	@ (8002bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba0:	e002      	b.n	8002ba8 <LoopCopyDataInit>

08002ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba6:	3304      	adds	r3, #4

08002ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bac:	d3f9      	bcc.n	8002ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bae:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb4:	e001      	b.n	8002bba <LoopFillZerobss>

08002bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb8:	3204      	adds	r2, #4

08002bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bbc:	d3fb      	bcc.n	8002bb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bbe:	f005 f86d 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc2:	f7ff f901 	bl	8001dc8 <main>
  bx  lr    
 8002bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002bd4:	080086f0 	.word	0x080086f0
  ldr r2, =_sbss
 8002bd8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002bdc:	20000708 	.word	0x20000708

08002be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC_IRQHandler>
	...

08002be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_Init+0x40>)
 8002bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <HAL_Init+0x40>)
 8002bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c00:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_Init+0x40>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f000 fbc1 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f000 f808 	bl	8002c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c18:	f7ff f9f6 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023c00 	.word	0x40023c00

08002c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c30:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_InitTick+0x54>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <HAL_InitTick+0x58>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fbd9 	bl	80033fe <HAL_SYSTICK_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00e      	b.n	8002c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b0f      	cmp	r3, #15
 8002c5a:	d80a      	bhi.n	8002c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c64:	f000 fba1 	bl	80033aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c68:	4a06      	ldr	r2, [pc, #24]	@ (8002c84 <HAL_InitTick+0x5c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000040 	.word	0x20000040
 8002c80:	20000048 	.word	0x20000048
 8002c84:	20000044 	.word	0x20000044

08002c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <HAL_IncTick+0x20>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_IncTick+0x24>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <HAL_IncTick+0x24>)
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000048 	.word	0x20000048
 8002cac:	200005bc 	.word	0x200005bc

08002cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	@ (8002cc4 <HAL_GetTick+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	200005bc 	.word	0x200005bc

08002cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff ffee 	bl	8002cb0 <HAL_GetTick>
 8002cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ce0:	d005      	beq.n	8002cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_Delay+0x44>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cee:	bf00      	nop
 8002cf0:	f7ff ffde 	bl	8002cb0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d8f7      	bhi.n	8002cf0 <HAL_Delay+0x28>
  {
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000048 	.word	0x20000048

08002d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e033      	b.n	8002d8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe ff02 	bl	8001b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d56:	f023 0302 	bic.w	r3, r3, #2
 8002d5a:	f043 0202 	orr.w	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f94a 	bl	8002ffc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d7e:	e001      	b.n	8002d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e113      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x244>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b09      	cmp	r3, #9
 8002dc2:	d925      	bls.n	8002e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b1e      	subs	r3, #30
 8002dda:	2207      	movs	r2, #7
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43da      	mvns	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	400a      	ands	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68d9      	ldr	r1, [r3, #12]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4403      	add	r3, r0
 8002e02:	3b1e      	subs	r3, #30
 8002e04:	409a      	lsls	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	e022      	b.n	8002e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	2207      	movs	r2, #7
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	400a      	ands	r2, r1
 8002e32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6919      	ldr	r1, [r3, #16]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4403      	add	r3, r0
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d824      	bhi.n	8002ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3b05      	subs	r3, #5
 8002e70:	221f      	movs	r2, #31
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	3b05      	subs	r3, #5
 8002e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ea6:	e04c      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d824      	bhi.n	8002efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b23      	subs	r3, #35	@ 0x23
 8002ec2:	221f      	movs	r2, #31
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	400a      	ands	r2, r1
 8002ed0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b23      	subs	r3, #35	@ 0x23
 8002eec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef8:	e023      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b41      	subs	r3, #65	@ 0x41
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	400a      	ands	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b41      	subs	r3, #65	@ 0x41
 8002f36:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f42:	4b29      	ldr	r3, [pc, #164]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x250>)
 8002f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <HAL_ADC_ConfigChannel+0x254>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10f      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1d8>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b12      	cmp	r3, #18
 8002f56:	d10b      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1d      	ldr	r2, [pc, #116]	@ (8002fec <HAL_ADC_ConfigChannel+0x254>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d12b      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x23a>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x258>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <HAL_ADC_ConfigChannel+0x1f4>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b11      	cmp	r3, #17
 8002f8a:	d122      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x258>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d111      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x25c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x260>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	0c9a      	lsrs	r2, r3, #18
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40012300 	.word	0x40012300
 8002fec:	40012000 	.word	0x40012000
 8002ff0:	10000012 	.word	0x10000012
 8002ff4:	20000040 	.word	0x20000040
 8002ff8:	431bde83 	.word	0x431bde83

08002ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003004:	4b79      	ldr	r3, [pc, #484]	@ (80031ec <ADC_Init+0x1f0>)
 8003006:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	4a58      	ldr	r2, [pc, #352]	@ (80031f0 <ADC_Init+0x1f4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e00f      	b.n	80030fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0202 	bic.w	r2, r2, #2
 8003108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7e1b      	ldrb	r3, [r3, #24]
 8003114:	005a      	lsls	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003136:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	3b01      	subs	r3, #1
 8003154:	035a      	lsls	r2, r3, #13
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e007      	b.n	8003170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800317e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	3b01      	subs	r3, #1
 800318c:	051a      	lsls	r2, r3, #20
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031b2:	025a      	lsls	r2, r3, #9
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	029a      	lsls	r2, r3, #10
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40012300 	.word	0x40012300
 80031f0:	0f000001 	.word	0x0f000001

080031f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <__NVIC_SetPriorityGrouping+0x44>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003210:	4013      	ands	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800321c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003226:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <__NVIC_SetPriorityGrouping+0x44>)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	60d3      	str	r3, [r2, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003240:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <__NVIC_GetPriorityGrouping+0x18>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 0307 	and.w	r3, r3, #7
}
 800324a:	4618      	mov	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	2b00      	cmp	r3, #0
 8003268:	db0b      	blt.n	8003282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	4907      	ldr	r1, [pc, #28]	@ (8003290 <__NVIC_EnableIRQ+0x38>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2001      	movs	r0, #1
 800327a:	fa00 f202 	lsl.w	r2, r0, r2
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	db0a      	blt.n	80032be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	490c      	ldr	r1, [pc, #48]	@ (80032e0 <__NVIC_SetPriority+0x4c>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	440b      	add	r3, r1
 80032b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032bc:	e00a      	b.n	80032d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4908      	ldr	r1, [pc, #32]	@ (80032e4 <__NVIC_SetPriority+0x50>)
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	3b04      	subs	r3, #4
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	761a      	strb	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000e100 	.word	0xe000e100
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	@ 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f1c3 0307 	rsb	r3, r3, #7
 8003302:	2b04      	cmp	r3, #4
 8003304:	bf28      	it	cs
 8003306:	2304      	movcs	r3, #4
 8003308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3304      	adds	r3, #4
 800330e:	2b06      	cmp	r3, #6
 8003310:	d902      	bls.n	8003318 <NVIC_EncodePriority+0x30>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3b03      	subs	r3, #3
 8003316:	e000      	b.n	800331a <NVIC_EncodePriority+0x32>
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003330:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43d9      	mvns	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	4313      	orrs	r3, r2
         );
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	@ 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003360:	d301      	bcc.n	8003366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003362:	2301      	movs	r3, #1
 8003364:	e00f      	b.n	8003386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003366:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <SysTick_Config+0x40>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336e:	210f      	movs	r1, #15
 8003370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003374:	f7ff ff8e 	bl	8003294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <SysTick_Config+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <SysTick_Config+0x40>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff29 	bl	80031f4 <__NVIC_SetPriorityGrouping>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033bc:	f7ff ff3e 	bl	800323c <__NVIC_GetPriorityGrouping>
 80033c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	6978      	ldr	r0, [r7, #20]
 80033c8:	f7ff ff8e 	bl	80032e8 <NVIC_EncodePriority>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff5d 	bl	8003294 <__NVIC_SetPriority>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff31 	bl	8003258 <__NVIC_EnableIRQ>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffa2 	bl	8003350 <SysTick_Config>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff fc44 	bl	8002cb0 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e099      	b.n	8003568 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003454:	e00f      	b.n	8003476 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003456:	f7ff fc2b 	bl	8002cb0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b05      	cmp	r3, #5
 8003462:	d908      	bls.n	8003476 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e078      	b.n	8003568 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e8      	bne.n	8003456 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <HAL_DMA_Init+0x158>)
 8003490:	4013      	ands	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d107      	bne.n	80034e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	4313      	orrs	r3, r2
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0307 	bic.w	r3, r3, #7
 80034f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	2b04      	cmp	r3, #4
 8003508:	d117      	bne.n	800353a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00e      	beq.n	800353a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fb01 	bl	8003b24 <DMA_CheckFifoParam>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2240      	movs	r2, #64	@ 0x40
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003536:	2301      	movs	r3, #1
 8003538:	e016      	b.n	8003568 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fab8 	bl	8003ab8 <DMA_CalcBaseAndBitshift>
 8003548:	4603      	mov	r3, r0
 800354a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003550:	223f      	movs	r2, #63	@ 0x3f
 8003552:	409a      	lsls	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	f010803f 	.word	0xf010803f

08003574 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_DMA_Start_IT+0x26>
 8003596:	2302      	movs	r3, #2
 8003598:	e040      	b.n	800361c <HAL_DMA_Start_IT+0xa8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d12f      	bne.n	800360e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fa4a 	bl	8003a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	223f      	movs	r2, #63	@ 0x3f
 80035ce:	409a      	lsls	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0216 	orr.w	r2, r2, #22
 80035e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0208 	orr.w	r2, r2, #8
 80035fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e005      	b.n	800361a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003616:	2302      	movs	r3, #2
 8003618:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003632:	f7ff fb3d 	bl	8002cb0 <HAL_GetTick>
 8003636:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d008      	beq.n	8003656 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2280      	movs	r2, #128	@ 0x80
 8003648:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e052      	b.n	80036fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0216 	bic.w	r2, r2, #22
 8003664:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003674:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <HAL_DMA_Abort+0x62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0208 	bic.w	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a6:	e013      	b.n	80036d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a8:	f7ff fb02 	bl	8002cb0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d90c      	bls.n	80036d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2203      	movs	r2, #3
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e015      	b.n	80036fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e4      	bne.n	80036a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	223f      	movs	r2, #63	@ 0x3f
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2280      	movs	r2, #128	@ 0x80
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e00c      	b.n	800373c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2205      	movs	r2, #5
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003754:	4b8e      	ldr	r3, [pc, #568]	@ (8003990 <HAL_DMA_IRQHandler+0x248>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a8e      	ldr	r2, [pc, #568]	@ (8003994 <HAL_DMA_IRQHandler+0x24c>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0a9b      	lsrs	r3, r3, #10
 8003760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	2208      	movs	r2, #8
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01a      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	2208      	movs	r2, #8
 80037a2:	409a      	lsls	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ac:	f043 0201 	orr.w	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	2201      	movs	r2, #1
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	2201      	movs	r2, #1
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	2204      	movs	r2, #4
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	2204      	movs	r2, #4
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	2210      	movs	r2, #16
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d043      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03c      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	2210      	movs	r2, #16
 8003844:	409a      	lsls	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d018      	beq.n	800388a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d024      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
 8003876:	e01f      	b.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e016      	b.n	80038b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0208 	bic.w	r2, r2, #8
 80038a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038bc:	2220      	movs	r2, #32
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 808f 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8087 	beq.w	80039e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038de:	2220      	movs	r2, #32
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d136      	bne.n	8003960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0216 	bic.w	r2, r2, #22
 8003900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_DMA_IRQHandler+0x1da>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0208 	bic.w	r2, r2, #8
 8003930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	223f      	movs	r2, #63	@ 0x3f
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d07e      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
        }
        return;
 800395e:	e079      	b.n	8003a54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01d      	beq.n	80039aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	2b00      	cmp	r3, #0
 8003982:	d031      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e02c      	b.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
 800398e:	bf00      	nop
 8003990:	20000040 	.word	0x20000040
 8003994:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d023      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
 80039a8:	e01e      	b.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10f      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0210 	bic.w	r2, r2, #16
 80039c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d032      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d022      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2205      	movs	r2, #5
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d307      	bcc.n	8003a30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f2      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x2cc>
 8003a2e:	e000      	b.n	8003a32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
 8003a52:	e000      	b.n	8003a56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a54:	bf00      	nop
    }
  }
}
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b40      	cmp	r3, #64	@ 0x40
 8003a88:	d108      	bne.n	8003a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a9a:	e007      	b.n	8003aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3b10      	subs	r3, #16
 8003ac8:	4a14      	ldr	r2, [pc, #80]	@ (8003b1c <DMA_CalcBaseAndBitshift+0x64>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ad2:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <DMA_CalcBaseAndBitshift+0x68>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d909      	bls.n	8003afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003af8:	e007      	b.n	8003b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	aaaaaaab 	.word	0xaaaaaaab
 8003b20:	080086a4 	.word	0x080086a4

08003b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d856      	bhi.n	8003bf2 <DMA_CheckFifoParam+0xce>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <DMA_CheckFifoParam+0x28>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b6f 	.word	0x08003b6f
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003bf3 	.word	0x08003bf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d046      	beq.n	8003bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e043      	b.n	8003bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b76:	d140      	bne.n	8003bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7c:	e03d      	b.n	8003bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b86:	d121      	bne.n	8003bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d837      	bhi.n	8003bfe <DMA_CheckFifoParam+0xda>
 8003b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <DMA_CheckFifoParam+0x70>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bab 	.word	0x08003bab
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003bbd 	.word	0x08003bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e030      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d025      	beq.n	8003c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e022      	b.n	8003c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bc4:	d11f      	bne.n	8003c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bca:	e01c      	b.n	8003c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d903      	bls.n	8003bda <DMA_CheckFifoParam+0xb6>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bd8:	e018      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bde:	e015      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e00b      	b.n	8003c0a <DMA_CheckFifoParam+0xe6>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e00a      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e008      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop

08003c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	@ 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e165      	b.n	8003f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	f040 8154 	bne.w	8003efe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d005      	beq.n	8003c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d130      	bne.n	8003cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	2203      	movs	r2, #3
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 0201 	and.w	r2, r3, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d017      	beq.n	8003d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d123      	bne.n	8003d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	08da      	lsrs	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3208      	adds	r2, #8
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0203 	and.w	r2, r3, #3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80ae 	beq.w	8003efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f1c <HAL_GPIO_Init+0x300>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	4a5c      	ldr	r2, [pc, #368]	@ (8003f1c <HAL_GPIO_Init+0x300>)
 8003dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003db2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f1c <HAL_GPIO_Init+0x300>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbe:	4a58      	ldr	r2, [pc, #352]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4f      	ldr	r2, [pc, #316]	@ (8003f24 <HAL_GPIO_Init+0x308>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d025      	beq.n	8003e36 <HAL_GPIO_Init+0x21a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4e      	ldr	r2, [pc, #312]	@ (8003f28 <HAL_GPIO_Init+0x30c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01f      	beq.n	8003e32 <HAL_GPIO_Init+0x216>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4d      	ldr	r2, [pc, #308]	@ (8003f2c <HAL_GPIO_Init+0x310>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d019      	beq.n	8003e2e <HAL_GPIO_Init+0x212>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8003f30 <HAL_GPIO_Init+0x314>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <HAL_GPIO_Init+0x20e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4b      	ldr	r2, [pc, #300]	@ (8003f34 <HAL_GPIO_Init+0x318>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00d      	beq.n	8003e26 <HAL_GPIO_Init+0x20a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f38 <HAL_GPIO_Init+0x31c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <HAL_GPIO_Init+0x206>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a49      	ldr	r2, [pc, #292]	@ (8003f3c <HAL_GPIO_Init+0x320>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <HAL_GPIO_Init+0x202>
 8003e1a:	2306      	movs	r3, #6
 8003e1c:	e00c      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e1e:	2307      	movs	r3, #7
 8003e20:	e00a      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e22:	2305      	movs	r3, #5
 8003e24:	e008      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e26:	2304      	movs	r3, #4
 8003e28:	e006      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e004      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e002      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_GPIO_Init+0x21c>
 8003e36:	2300      	movs	r3, #0
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	f002 0203 	and.w	r2, r2, #3
 8003e3e:	0092      	lsls	r2, r2, #2
 8003e40:	4093      	lsls	r3, r2
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e48:	4935      	ldr	r1, [pc, #212]	@ (8003f20 <HAL_GPIO_Init+0x304>)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	3302      	adds	r3, #2
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e56:	4b3a      	ldr	r3, [pc, #232]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e7a:	4a31      	ldr	r2, [pc, #196]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e80:	4b2f      	ldr	r3, [pc, #188]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ea4:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eaa:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ece:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ef8:	4a11      	ldr	r2, [pc, #68]	@ (8003f40 <HAL_GPIO_Init+0x324>)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3301      	adds	r3, #1
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	f67f ae96 	bls.w	8003c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3724      	adds	r7, #36	@ 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40013800 	.word	0x40013800
 8003f24:	40020000 	.word	0x40020000
 8003f28:	40020400 	.word	0x40020400
 8003f2c:	40020800 	.word	0x40020800
 8003f30:	40020c00 	.word	0x40020c00
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40021400 	.word	0x40021400
 8003f3c:	40021800 	.word	0x40021800
 8003f40:	40013c00 	.word	0x40013c00

08003f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
 8003f50:	4613      	mov	r3, r2
 8003f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f54:	787b      	ldrb	r3, [r7, #1]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f60:	e003      	b.n	8003f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	041a      	lsls	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	619a      	str	r2, [r3, #24]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f82:	4b08      	ldr	r3, [pc, #32]	@ (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f8e:	4a05      	ldr	r2, [pc, #20]	@ (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f806 	bl	8003fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40013c00 	.word	0x40013c00

08003fa8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fda:	4b1d      	ldr	r3, [pc, #116]	@ (8004050 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <HAL_PWREx_EnableOverDrive+0x94>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fec:	f7fe fe60 	bl	8002cb0 <HAL_GetTick>
 8003ff0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ff2:	e009      	b.n	8004008 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ff4:	f7fe fe5c 	bl	8002cb0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004002:	d901      	bls.n	8004008 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e01f      	b.n	8004048 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004008:	4b13      	ldr	r3, [pc, #76]	@ (8004058 <HAL_PWREx_EnableOverDrive+0x98>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d1ee      	bne.n	8003ff4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004016:	4b11      	ldr	r3, [pc, #68]	@ (800405c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800401c:	f7fe fe48 	bl	8002cb0 <HAL_GetTick>
 8004020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004022:	e009      	b.n	8004038 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004024:	f7fe fe44 	bl	8002cb0 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004032:	d901      	bls.n	8004038 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e007      	b.n	8004048 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004038:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <HAL_PWREx_EnableOverDrive+0x98>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004044:	d1ee      	bne.n	8004024 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40023800 	.word	0x40023800
 8004054:	420e0040 	.word	0x420e0040
 8004058:	40007000 	.word	0x40007000
 800405c:	420e0044 	.word	0x420e0044

08004060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0cc      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b68      	ldr	r3, [pc, #416]	@ (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d90c      	bls.n	800409c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b65      	ldr	r3, [pc, #404]	@ (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b63      	ldr	r3, [pc, #396]	@ (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0b8      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b4:	4b59      	ldr	r3, [pc, #356]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a58      	ldr	r2, [pc, #352]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040cc:	4b53      	ldr	r3, [pc, #332]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a52      	ldr	r2, [pc, #328]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b50      	ldr	r3, [pc, #320]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	494d      	ldr	r1, [pc, #308]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d044      	beq.n	8004180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b47      	ldr	r3, [pc, #284]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d119      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e07f      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d003      	beq.n	800411e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411a:	2b03      	cmp	r3, #3
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b3f      	ldr	r3, [pc, #252]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e06f      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	4b3b      	ldr	r3, [pc, #236]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e067      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413e:	4b37      	ldr	r3, [pc, #220]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4934      	ldr	r1, [pc, #208]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004150:	f7fe fdae 	bl	8002cb0 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fe fdaa 	bl	8002cb0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e04f      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	4b2b      	ldr	r3, [pc, #172]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 020c 	and.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	429a      	cmp	r2, r3
 800417e:	d1eb      	bne.n	8004158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004180:	4b25      	ldr	r3, [pc, #148]	@ (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d20c      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b22      	ldr	r3, [pc, #136]	@ (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e032      	b.n	800420e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b4:	4b19      	ldr	r3, [pc, #100]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4916      	ldr	r1, [pc, #88]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d2:	4b12      	ldr	r3, [pc, #72]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	490e      	ldr	r1, [pc, #56]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e6:	f000 f855 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 80041ea:	4602      	mov	r2, r0
 80041ec:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	490a      	ldr	r1, [pc, #40]	@ (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 80041f8:	5ccb      	ldrb	r3, [r1, r3]
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	4a09      	ldr	r2, [pc, #36]	@ (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004202:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fd0e 	bl	8002c28 <HAL_InitTick>

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023c00 	.word	0x40023c00
 800421c:	40023800 	.word	0x40023800
 8004220:	0800868c 	.word	0x0800868c
 8004224:	20000040 	.word	0x20000040
 8004228:	20000044 	.word	0x20000044

0800422c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004230:	4b03      	ldr	r3, [pc, #12]	@ (8004240 <HAL_RCC_GetHCLKFreq+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000040 	.word	0x20000040

08004244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004248:	f7ff fff0 	bl	800422c <HAL_RCC_GetHCLKFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	0a9b      	lsrs	r3, r3, #10
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4903      	ldr	r1, [pc, #12]	@ (8004268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40023800 	.word	0x40023800
 8004268:	0800869c 	.word	0x0800869c

0800426c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004270:	f7ff ffdc 	bl	800422c <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	@ (800428c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0b5b      	lsrs	r3, r3, #13
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	@ (8004290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	0800869c 	.word	0x0800869c

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b0ae      	sub	sp, #184	@ 0xb8
 800429a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ba:	4bcb      	ldr	r3, [pc, #812]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	f200 8206 	bhi.w	80046d4 <HAL_RCC_GetSysClockFreq+0x440>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	08004305 	.word	0x08004305
 80042d4:	080046d5 	.word	0x080046d5
 80042d8:	080046d5 	.word	0x080046d5
 80042dc:	080046d5 	.word	0x080046d5
 80042e0:	0800430d 	.word	0x0800430d
 80042e4:	080046d5 	.word	0x080046d5
 80042e8:	080046d5 	.word	0x080046d5
 80042ec:	080046d5 	.word	0x080046d5
 80042f0:	08004315 	.word	0x08004315
 80042f4:	080046d5 	.word	0x080046d5
 80042f8:	080046d5 	.word	0x080046d5
 80042fc:	080046d5 	.word	0x080046d5
 8004300:	08004505 	.word	0x08004505
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004304:	4bb9      	ldr	r3, [pc, #740]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x358>)
 8004306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800430a:	e1e7      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800430c:	4bb8      	ldr	r3, [pc, #736]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800430e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004312:	e1e3      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004314:	4bb4      	ldr	r3, [pc, #720]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800431c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004320:	4bb1      	ldr	r3, [pc, #708]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d071      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432c:	4bae      	ldr	r3, [pc, #696]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004338:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800433c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004348:	2300      	movs	r3, #0
 800434a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800434e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	f04f 0000 	mov.w	r0, #0
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	0159      	lsls	r1, r3, #5
 8004360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004364:	0150      	lsls	r0, r2, #5
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4621      	mov	r1, r4
 800436c:	1a51      	subs	r1, r2, r1
 800436e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004370:	4629      	mov	r1, r5
 8004372:	eb63 0301 	sbc.w	r3, r3, r1
 8004376:	647b      	str	r3, [r7, #68]	@ 0x44
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004384:	4649      	mov	r1, r9
 8004386:	018b      	lsls	r3, r1, #6
 8004388:	4641      	mov	r1, r8
 800438a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800438e:	4641      	mov	r1, r8
 8004390:	018a      	lsls	r2, r1, #6
 8004392:	4641      	mov	r1, r8
 8004394:	1a51      	subs	r1, r2, r1
 8004396:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004398:	4649      	mov	r1, r9
 800439a:	eb63 0301 	sbc.w	r3, r3, r1
 800439e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80043ac:	4649      	mov	r1, r9
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4641      	mov	r1, r8
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4641      	mov	r1, r8
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4622      	mov	r2, r4
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c6:	462b      	mov	r3, r5
 80043c8:	460a      	mov	r2, r1
 80043ca:	eb42 0303 	adc.w	r3, r2, r3
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043dc:	4629      	mov	r1, r5
 80043de:	024b      	lsls	r3, r1, #9
 80043e0:	4621      	mov	r1, r4
 80043e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e6:	4621      	mov	r1, r4
 80043e8:	024a      	lsls	r2, r1, #9
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004400:	f7fc fb54 	bl	8000aac <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800440e:	e067      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004410:	4b75      	ldr	r3, [pc, #468]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800441c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004420:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004428:	67bb      	str	r3, [r7, #120]	@ 0x78
 800442a:	2300      	movs	r3, #0
 800442c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800442e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004432:	4622      	mov	r2, r4
 8004434:	462b      	mov	r3, r5
 8004436:	f04f 0000 	mov.w	r0, #0
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	0159      	lsls	r1, r3, #5
 8004440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004444:	0150      	lsls	r0, r2, #5
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4621      	mov	r1, r4
 800444c:	1a51      	subs	r1, r2, r1
 800444e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004450:	4629      	mov	r1, r5
 8004452:	eb63 0301 	sbc.w	r3, r3, r1
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004464:	4649      	mov	r1, r9
 8004466:	018b      	lsls	r3, r1, #6
 8004468:	4641      	mov	r1, r8
 800446a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800446e:	4641      	mov	r1, r8
 8004470:	018a      	lsls	r2, r1, #6
 8004472:	4641      	mov	r1, r8
 8004474:	ebb2 0a01 	subs.w	sl, r2, r1
 8004478:	4649      	mov	r1, r9
 800447a:	eb63 0b01 	sbc.w	fp, r3, r1
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800448a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800448e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004492:	4692      	mov	sl, r2
 8004494:	469b      	mov	fp, r3
 8004496:	4623      	mov	r3, r4
 8004498:	eb1a 0303 	adds.w	r3, sl, r3
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	462b      	mov	r3, r5
 80044a0:	eb4b 0303 	adc.w	r3, fp, r3
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044b2:	4629      	mov	r1, r5
 80044b4:	028b      	lsls	r3, r1, #10
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044bc:	4621      	mov	r1, r4
 80044be:	028a      	lsls	r2, r1, #10
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044c8:	2200      	movs	r2, #0
 80044ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80044cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80044ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80044d2:	f7fc faeb 	bl	8000aac <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4613      	mov	r3, r2
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e0:	4b41      	ldr	r3, [pc, #260]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80044f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004502:	e0eb      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004504:	4b38      	ldr	r3, [pc, #224]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800450c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004510:	4b35      	ldr	r3, [pc, #212]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d06b      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451c:	4b32      	ldr	r3, [pc, #200]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	2200      	movs	r2, #0
 8004524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004526:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800452a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004530:	2300      	movs	r3, #0
 8004532:	667b      	str	r3, [r7, #100]	@ 0x64
 8004534:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004538:	4622      	mov	r2, r4
 800453a:	462b      	mov	r3, r5
 800453c:	f04f 0000 	mov.w	r0, #0
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	0159      	lsls	r1, r3, #5
 8004546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454a:	0150      	lsls	r0, r2, #5
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4621      	mov	r1, r4
 8004552:	1a51      	subs	r1, r2, r1
 8004554:	61b9      	str	r1, [r7, #24]
 8004556:	4629      	mov	r1, r5
 8004558:	eb63 0301 	sbc.w	r3, r3, r1
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800456a:	4659      	mov	r1, fp
 800456c:	018b      	lsls	r3, r1, #6
 800456e:	4651      	mov	r1, sl
 8004570:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004574:	4651      	mov	r1, sl
 8004576:	018a      	lsls	r2, r1, #6
 8004578:	4651      	mov	r1, sl
 800457a:	ebb2 0801 	subs.w	r8, r2, r1
 800457e:	4659      	mov	r1, fp
 8004580:	eb63 0901 	sbc.w	r9, r3, r1
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004590:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004594:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004598:	4690      	mov	r8, r2
 800459a:	4699      	mov	r9, r3
 800459c:	4623      	mov	r3, r4
 800459e:	eb18 0303 	adds.w	r3, r8, r3
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	462b      	mov	r3, r5
 80045a6:	eb49 0303 	adc.w	r3, r9, r3
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045b8:	4629      	mov	r1, r5
 80045ba:	024b      	lsls	r3, r1, #9
 80045bc:	4621      	mov	r1, r4
 80045be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045c2:	4621      	mov	r1, r4
 80045c4:	024a      	lsls	r2, r1, #9
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045ce:	2200      	movs	r2, #0
 80045d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80045d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045d8:	f7fc fa68 	bl	8000aac <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045e6:	e065      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x420>
 80045e8:	40023800 	.word	0x40023800
 80045ec:	00f42400 	.word	0x00f42400
 80045f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f4:	4b3d      	ldr	r3, [pc, #244]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x458>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	2200      	movs	r2, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	4611      	mov	r1, r2
 8004600:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004604:	653b      	str	r3, [r7, #80]	@ 0x50
 8004606:	2300      	movs	r3, #0
 8004608:	657b      	str	r3, [r7, #84]	@ 0x54
 800460a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800460e:	4642      	mov	r2, r8
 8004610:	464b      	mov	r3, r9
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	0159      	lsls	r1, r3, #5
 800461c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004620:	0150      	lsls	r0, r2, #5
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4641      	mov	r1, r8
 8004628:	1a51      	subs	r1, r2, r1
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	4649      	mov	r1, r9
 800462e:	eb63 0301 	sbc.w	r3, r3, r1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004640:	4659      	mov	r1, fp
 8004642:	018b      	lsls	r3, r1, #6
 8004644:	4651      	mov	r1, sl
 8004646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800464a:	4651      	mov	r1, sl
 800464c:	018a      	lsls	r2, r1, #6
 800464e:	4651      	mov	r1, sl
 8004650:	1a54      	subs	r4, r2, r1
 8004652:	4659      	mov	r1, fp
 8004654:	eb63 0501 	sbc.w	r5, r3, r1
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	00eb      	lsls	r3, r5, #3
 8004662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004666:	00e2      	lsls	r2, r4, #3
 8004668:	4614      	mov	r4, r2
 800466a:	461d      	mov	r5, r3
 800466c:	4643      	mov	r3, r8
 800466e:	18e3      	adds	r3, r4, r3
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	464b      	mov	r3, r9
 8004674:	eb45 0303 	adc.w	r3, r5, r3
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004686:	4629      	mov	r1, r5
 8004688:	028b      	lsls	r3, r1, #10
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004690:	4621      	mov	r1, r4
 8004692:	028a      	lsls	r2, r1, #10
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800469c:	2200      	movs	r2, #0
 800469e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046a6:	f7fc fa01 	bl	8000aac <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4613      	mov	r3, r2
 80046b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046b4:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x458>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	0f1b      	lsrs	r3, r3, #28
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80046c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046d2:	e003      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046d4:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80046d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	37b8      	adds	r7, #184	@ 0xb8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400

080046f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e28d      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8083 	beq.w	800481a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004714:	4b94      	ldr	r3, [pc, #592]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b04      	cmp	r3, #4
 800471e:	d019      	beq.n	8004754 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004720:	4b91      	ldr	r3, [pc, #580]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004728:	2b08      	cmp	r3, #8
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800472c:	4b8e      	ldr	r3, [pc, #568]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004738:	d00c      	beq.n	8004754 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473a:	4b8b      	ldr	r3, [pc, #556]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d112      	bne.n	800476c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800474e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004752:	d10b      	bne.n	800476c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	4b84      	ldr	r3, [pc, #528]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05b      	beq.n	8004818 <HAL_RCC_OscConfig+0x124>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d157      	bne.n	8004818 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e25a      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004774:	d106      	bne.n	8004784 <HAL_RCC_OscConfig+0x90>
 8004776:	4b7c      	ldr	r3, [pc, #496]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7b      	ldr	r2, [pc, #492]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e01d      	b.n	80047c0 <HAL_RCC_OscConfig+0xcc>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0xb4>
 800478e:	4b76      	ldr	r3, [pc, #472]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a75      	ldr	r2, [pc, #468]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b73      	ldr	r3, [pc, #460]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a72      	ldr	r2, [pc, #456]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0xcc>
 80047a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80047ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fe fa72 	bl	8002cb0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fe fa6e 	bl	8002cb0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	@ 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e21f      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	4b61      	ldr	r3, [pc, #388]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0xdc>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fe fa5e 	bl	8002cb0 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fe fa5a 	bl	8002cb0 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	@ 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e20b      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480a:	4b57      	ldr	r3, [pc, #348]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x104>
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d06f      	beq.n	8004906 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004826:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b00      	cmp	r3, #0
 8004830:	d017      	beq.n	8004862 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004832:	4b4d      	ldr	r3, [pc, #308]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800483a:	2b08      	cmp	r3, #8
 800483c:	d105      	bne.n	800484a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800483e:	4b4a      	ldr	r3, [pc, #296]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b47      	ldr	r3, [pc, #284]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004856:	4b44      	ldr	r3, [pc, #272]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004862:	4b41      	ldr	r3, [pc, #260]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x186>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1d3      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b3b      	ldr	r3, [pc, #236]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4937      	ldr	r1, [pc, #220]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	e03a      	b.n	8004906 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004898:	4b34      	ldr	r3, [pc, #208]	@ (800496c <HAL_RCC_OscConfig+0x278>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fe fa07 	bl	8002cb0 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fe fa03 	bl	8002cb0 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1b4      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b28      	ldr	r3, [pc, #160]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4925      	ldr	r1, [pc, #148]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
 80048d8:	e015      	b.n	8004906 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048da:	4b24      	ldr	r3, [pc, #144]	@ (800496c <HAL_RCC_OscConfig+0x278>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fe f9e6 	bl	8002cb0 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fe f9e2 	bl	8002cb0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e193      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d036      	beq.n	8004980 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491a:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <HAL_RCC_OscConfig+0x27c>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fe f9c6 	bl	8002cb0 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004928:	f7fe f9c2 	bl	8002cb0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e173      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_OscConfig+0x274>)
 800493c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x234>
 8004946:	e01b      	b.n	8004980 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004948:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <HAL_RCC_OscConfig+0x27c>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7fe f9af 	bl	8002cb0 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	e00e      	b.n	8004974 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004956:	f7fe f9ab 	bl	8002cb0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d907      	bls.n	8004974 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e15c      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
 8004968:	40023800 	.word	0x40023800
 800496c:	42470000 	.word	0x42470000
 8004970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004974:	4b8a      	ldr	r3, [pc, #552]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1ea      	bne.n	8004956 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8097 	beq.w	8004abc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004992:	4b83      	ldr	r3, [pc, #524]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ae:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b79      	ldr	r3, [pc, #484]	@ (8004ba4 <HAL_RCC_OscConfig+0x4b0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d118      	bne.n	80049fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ca:	4b76      	ldr	r3, [pc, #472]	@ (8004ba4 <HAL_RCC_OscConfig+0x4b0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a75      	ldr	r2, [pc, #468]	@ (8004ba4 <HAL_RCC_OscConfig+0x4b0>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d6:	f7fe f96b 	bl	8002cb0 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049de:	f7fe f967 	bl	8002cb0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e118      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba4 <HAL_RCC_OscConfig+0x4b0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x31e>
 8004a04:	4b66      	ldr	r3, [pc, #408]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a08:	4a65      	ldr	r2, [pc, #404]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a10:	e01c      	b.n	8004a4c <HAL_RCC_OscConfig+0x358>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x340>
 8004a1a:	4b61      	ldr	r3, [pc, #388]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	4a60      	ldr	r2, [pc, #384]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a20:	f043 0304 	orr.w	r3, r3, #4
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a26:	4b5e      	ldr	r3, [pc, #376]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0x358>
 8004a34:	4b5a      	ldr	r3, [pc, #360]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4a59      	ldr	r2, [pc, #356]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a40:	4b57      	ldr	r3, [pc, #348]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a44:	4a56      	ldr	r2, [pc, #344]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a46:	f023 0304 	bic.w	r3, r3, #4
 8004a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fe f92c 	bl	8002cb0 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fe f928 	bl	8002cb0 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e0d7      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a72:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0ee      	beq.n	8004a5c <HAL_RCC_OscConfig+0x368>
 8004a7e:	e014      	b.n	8004aaa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fe f916 	bl	8002cb0 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a88:	f7fe f912 	bl	8002cb0 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0c1      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9e:	4b40      	ldr	r3, [pc, #256]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ee      	bne.n	8004a88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80ad 	beq.w	8004c20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac6:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d060      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d145      	bne.n	8004b66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b33      	ldr	r3, [pc, #204]	@ (8004ba8 <HAL_RCC_OscConfig+0x4b4>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fe f8e6 	bl	8002cb0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fe f8e2 	bl	8002cb0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e093      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b29      	ldr	r3, [pc, #164]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	019b      	lsls	r3, r3, #6
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	071b      	lsls	r3, r3, #28
 8004b32:	491b      	ldr	r1, [pc, #108]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba8 <HAL_RCC_OscConfig+0x4b4>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fe f8b7 	bl	8002cb0 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fe f8b3 	bl	8002cb0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e064      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b58:	4b11      	ldr	r3, [pc, #68]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x452>
 8004b64:	e05c      	b.n	8004c20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b66:	4b10      	ldr	r3, [pc, #64]	@ (8004ba8 <HAL_RCC_OscConfig+0x4b4>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fe f8a0 	bl	8002cb0 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fe f89c 	bl	8002cb0 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e04d      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_RCC_OscConfig+0x4ac>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x480>
 8004b92:	e045      	b.n	8004c20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d107      	bne.n	8004bac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e040      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40007000 	.word	0x40007000
 8004ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bac:	4b1f      	ldr	r3, [pc, #124]	@ (8004c2c <HAL_RCC_OscConfig+0x538>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d030      	beq.n	8004c1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d129      	bne.n	8004c1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d122      	bne.n	8004c1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bdc:	4013      	ands	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d119      	bne.n	8004c1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d10f      	bne.n	8004c1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800

08004c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07b      	b.n	8004d3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c52:	d009      	beq.n	8004c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	61da      	str	r2, [r3, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd f978 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	ea42 0103 	orr.w	r1, r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0104 	and.w	r1, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	f003 0210 	and.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b088      	sub	sp, #32
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_SPI_Transmit+0x22>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e12d      	b.n	8004fc0 <HAL_SPI_Transmit+0x27e>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6c:	f7fd ffa0 	bl	8002cb0 <HAL_GetTick>
 8004d70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d86:	e116      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Transmit+0x52>
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d98:	e10d      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de0:	d10f      	bne.n	8004e02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0c:	2b40      	cmp	r3, #64	@ 0x40
 8004e0e:	d007      	beq.n	8004e20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e28:	d14f      	bne.n	8004eca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Transmit+0xf6>
 8004e32:	8afb      	ldrh	r3, [r7, #22]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d142      	bne.n	8004ebe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	1c9a      	adds	r2, r3, #2
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e5c:	e02f      	b.n	8004ebe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d112      	bne.n	8004e92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	1c9a      	adds	r2, r3, #2
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e90:	e015      	b.n	8004ebe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e92:	f7fd ff0d 	bl	8002cb0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d803      	bhi.n	8004eaa <HAL_SPI_Transmit+0x168>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Transmit+0x16e>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004ebc:	e07b      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ca      	bne.n	8004e5e <HAL_SPI_Transmit+0x11c>
 8004ec8:	e050      	b.n	8004f6c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Transmit+0x196>
 8004ed2:	8afb      	ldrh	r3, [r7, #22]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d144      	bne.n	8004f62 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	7812      	ldrb	r2, [r2, #0]
 8004ee4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004efe:	e030      	b.n	8004f62 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d113      	bne.n	8004f36 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	7812      	ldrb	r2, [r2, #0]
 8004f1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f34:	e015      	b.n	8004f62 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f36:	f7fd febb 	bl	8002cb0 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d803      	bhi.n	8004f4e <HAL_SPI_Transmit+0x20c>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f4c:	d102      	bne.n	8004f54 <HAL_SPI_Transmit+0x212>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f60:	e029      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1c9      	bne.n	8004f00 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fbed 	bl	8005750 <SPI_EndRxTxTransaction>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e003      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fec:	e0fb      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff6:	d112      	bne.n	800501e <HAL_SPI_Receive+0x56>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10e      	bne.n	800501e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2204      	movs	r2, #4
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	4613      	mov	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f8ef 	bl	80051f8 <HAL_SPI_TransmitReceive>
 800501a:	4603      	mov	r3, r0
 800501c:	e0e8      	b.n	80051f0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_SPI_Receive+0x64>
 8005028:	2302      	movs	r3, #2
 800502a:	e0e1      	b.n	80051f0 <HAL_SPI_Receive+0x228>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005034:	f7fd fe3c 	bl	8002cb0 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_SPI_Receive+0x7e>
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
    goto error;
 800504a:	e0cc      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2204      	movs	r2, #4
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005092:	d10f      	bne.n	80050b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b40      	cmp	r3, #64	@ 0x40
 80050c0:	d007      	beq.n	80050d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d16a      	bne.n	80051b0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050da:	e032      	b.n	8005142 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d115      	bne.n	8005116 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f103 020c 	add.w	r2, r3, #12
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005114:	e015      	b.n	8005142 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005116:	f7fd fdcb 	bl	8002cb0 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d803      	bhi.n	800512e <HAL_SPI_Receive+0x166>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800512c:	d102      	bne.n	8005134 <HAL_SPI_Receive+0x16c>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005140:	e051      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1c7      	bne.n	80050dc <HAL_SPI_Receive+0x114>
 800514c:	e035      	b.n	80051ba <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d113      	bne.n	8005184 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	b292      	uxth	r2, r2
 8005168:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005182:	e015      	b.n	80051b0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005184:	f7fd fd94 	bl	8002cb0 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d803      	bhi.n	800519c <HAL_SPI_Receive+0x1d4>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800519a:	d102      	bne.n	80051a2 <HAL_SPI_Receive+0x1da>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80051ae:	e01a      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1c9      	bne.n	800514e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa60 	bl	8005684 <SPI_EndRxTransaction>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	75fb      	strb	r3, [r7, #23]
 80051dc:	e003      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	@ 0x30
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005206:	2301      	movs	r3, #1
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_SPI_TransmitReceive+0x26>
 800521a:	2302      	movs	r3, #2
 800521c:	e198      	b.n	8005550 <HAL_SPI_TransmitReceive+0x358>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005226:	f7fd fd43 	bl	8002cb0 <HAL_GetTick>
 800522a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005244:	2b01      	cmp	r3, #1
 8005246:	d00f      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x70>
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800524e:	d107      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x68>
 8005258:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800525c:	2b04      	cmp	r3, #4
 800525e:	d003      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005260:	2302      	movs	r3, #2
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005266:	e16d      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_SPI_TransmitReceive+0x82>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_TransmitReceive+0x82>
 8005274:	887b      	ldrh	r3, [r7, #2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005280:	e160      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b04      	cmp	r3, #4
 800528c:	d003      	beq.n	8005296 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2205      	movs	r2, #5
 8005292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	887a      	ldrh	r2, [r7, #2]
 80052a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	887a      	ldrh	r2, [r7, #2]
 80052b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d007      	beq.n	80052ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f2:	d17c      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x10a>
 80052fc:	8b7b      	ldrh	r3, [r7, #26]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d16a      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005326:	e057      	b.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d11b      	bne.n	800536e <HAL_SPI_TransmitReceive+0x176>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <HAL_SPI_TransmitReceive+0x176>
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d113      	bne.n	800536e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	1c9a      	adds	r2, r3, #2
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d119      	bne.n	80053b0 <HAL_SPI_TransmitReceive+0x1b8>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d014      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	b292      	uxth	r2, r2
 8005392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	1c9a      	adds	r2, r3, #2
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053ac:	2301      	movs	r3, #1
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053b0:	f7fd fc7e 	bl	8002cb0 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053bc:	429a      	cmp	r2, r3
 80053be:	d80b      	bhi.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053c6:	d007      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80053d6:	e0b5      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1a2      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x130>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19d      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x130>
 80053ec:	e080      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_TransmitReceive+0x204>
 80053f6:	8b7b      	ldrh	r3, [r7, #26]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d16f      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	7812      	ldrb	r2, [r2, #0]
 8005408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005422:	e05b      	b.n	80054dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d11c      	bne.n	800546c <HAL_SPI_TransmitReceive+0x274>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d017      	beq.n	800546c <HAL_SPI_TransmitReceive+0x274>
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d114      	bne.n	800546c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d119      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x2b6>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d014      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054aa:	2301      	movs	r3, #1
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054ae:	f7fd fbff 	bl	8002cb0 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d803      	bhi.n	80054c6 <HAL_SPI_TransmitReceive+0x2ce>
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054c4:	d102      	bne.n	80054cc <HAL_SPI_TransmitReceive+0x2d4>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80054da:	e033      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d19e      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x22c>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d199      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f92b 	bl	8005750 <SPI_EndRxTxTransaction>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d006      	beq.n	800550e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800550c:	e01a      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e003      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800554c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005550:	4618      	mov	r0, r3
 8005552:	3730      	adds	r7, #48	@ 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005566:	b2db      	uxtb	r3, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005584:	f7fd fb94 	bl	8002cb0 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	4413      	add	r3, r2
 8005592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005594:	f7fd fb8c 	bl	8002cb0 <HAL_GetTick>
 8005598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800559a:	4b39      	ldr	r3, [pc, #228]	@ (8005680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	015b      	lsls	r3, r3, #5
 80055a0:	0d1b      	lsrs	r3, r3, #20
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055aa:	e054      	b.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055b2:	d050      	beq.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055b4:	f7fd fb7c 	bl	8002cb0 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d902      	bls.n	80055ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d13d      	bne.n	8005646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e2:	d111      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ec:	d004      	beq.n	80055f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055f6:	d107      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005610:	d10f      	bne.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e017      	b.n	8005676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3b01      	subs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d19b      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000040 	.word	0x20000040

08005684 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005698:	d111      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a2:	d004      	beq.n	80056ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ac:	d107      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c6:	d12a      	bne.n	800571e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d0:	d012      	beq.n	80056f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	2180      	movs	r1, #128	@ 0x80
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ff49 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d02d      	beq.n	8005744 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e026      	b.n	8005746 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	2101      	movs	r1, #1
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff ff36 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01a      	beq.n	8005744 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e013      	b.n	8005746 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	2101      	movs	r1, #1
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff23 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e000      	b.n	8005746 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2201      	movs	r2, #1
 8005764:	2102      	movs	r1, #2
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ff04 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e032      	b.n	80057e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005782:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <SPI_EndRxTxTransaction+0xa0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <SPI_EndRxTxTransaction+0xa4>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	0d5b      	lsrs	r3, r3, #21
 800578e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057a0:	d112      	bne.n	80057c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2180      	movs	r1, #128	@ 0x80
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7ff fee1 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d016      	beq.n	80057e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e00f      	b.n	80057e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057de:	2b80      	cmp	r3, #128	@ 0x80
 80057e0:	d0f2      	beq.n	80057c8 <SPI_EndRxTxTransaction+0x78>
 80057e2:	e000      	b.n	80057e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80057e4:	bf00      	nop
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000040 	.word	0x20000040
 80057f4:	165e9f81 	.word	0x165e9f81

080057f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e041      	b.n	800588e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc feda 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 fc88 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d001      	beq.n	80058b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e04e      	b.n	800594e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a23      	ldr	r2, [pc, #140]	@ (800595c <HAL_TIM_Base_Start_IT+0xc4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d022      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x80>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058da:	d01d      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x80>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005960 <HAL_TIM_Base_Start_IT+0xc8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x80>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005964 <HAL_TIM_Base_Start_IT+0xcc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x80>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <HAL_TIM_Base_Start_IT+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x80>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <HAL_TIM_Base_Start_IT+0xd4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x80>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a19      	ldr	r2, [pc, #100]	@ (8005970 <HAL_TIM_Base_Start_IT+0xd8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x80>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a18      	ldr	r2, [pc, #96]	@ (8005974 <HAL_TIM_Base_Start_IT+0xdc>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d111      	bne.n	800593c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b06      	cmp	r3, #6
 8005928:	d010      	beq.n	800594c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	e007      	b.n	800594c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40010000 	.word	0x40010000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40010400 	.word	0x40010400
 8005970:	40014000 	.word	0x40014000
 8005974:	40001800 	.word	0x40001800

08005978 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	f241 1311 	movw	r3, #4369	@ 0x1111
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10f      	bne.n	80059c0 <HAL_TIM_Base_Stop_IT+0x48>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6a1a      	ldr	r2, [r3, #32]
 80059a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_Base_Stop_IT+0x48>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e041      	b.n	8005a6c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f839 	bl	8005a74 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f000 fb99 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e041      	b.n	8005b1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f839 	bl	8005b26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f000 fb40 	bl	800614c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d020      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01b      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f06f 0202 	mvn.w	r2, #2
 8005b6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fac2 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 8005b8a:	e005      	b.n	8005b98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fab4 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fac5 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d020      	beq.n	8005bea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01b      	beq.n	8005bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0204 	mvn.w	r2, #4
 8005bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fa9c 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 8005bd6:	e005      	b.n	8005be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fa8e 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa9f 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01b      	beq.n	8005c36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0208 	mvn.w	r2, #8
 8005c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa76 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 8005c22:	e005      	b.n	8005c30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa68 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa79 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d020      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01b      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f06f 0210 	mvn.w	r2, #16
 8005c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2208      	movs	r2, #8
 8005c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fa50 	bl	800610e <HAL_TIM_IC_CaptureCallback>
 8005c6e:	e005      	b.n	8005c7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fa42 	bl	80060fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa53 	bl	8006122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f06f 0201 	mvn.w	r2, #1
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa20 	bl	80060e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fe0f 	bl	80068e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fa24 	bl	8006136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f06f 0220 	mvn.w	r2, #32
 8005d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fde1 	bl	80068d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e048      	b.n	8005dcc <HAL_TIM_OC_ConfigChannel+0xb0>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d839      	bhi.n	8005dbc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005d48:	a201      	add	r2, pc, #4	@ (adr r2, 8005d50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005dbd 	.word	0x08005dbd
 8005d58:	08005dbd 	.word	0x08005dbd
 8005d5c:	08005dbd 	.word	0x08005dbd
 8005d60:	08005d93 	.word	0x08005d93
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005dbd 	.word	0x08005dbd
 8005d70:	08005da1 	.word	0x08005da1
 8005d74:	08005dbd 	.word	0x08005dbd
 8005d78:	08005dbd 	.word	0x08005dbd
 8005d7c:	08005dbd 	.word	0x08005dbd
 8005d80:	08005daf 	.word	0x08005daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fa8a 	bl	80062a4 <TIM_OC1_SetConfig>
      break;
 8005d90:	e017      	b.n	8005dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 faf3 	bl	8006384 <TIM_OC2_SetConfig>
      break;
 8005d9e:	e010      	b.n	8005dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fb62 	bl	8006470 <TIM_OC3_SetConfig>
      break;
 8005dac:	e009      	b.n	8005dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fbcf 	bl	8006558 <TIM_OC4_SetConfig>
      break;
 8005dba:	e002      	b.n	8005dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0ae      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	f200 809f 	bhi.w	8005f40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005f41 	.word	0x08005f41
 8005e10:	08005f41 	.word	0x08005f41
 8005e14:	08005f41 	.word	0x08005f41
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005f41 	.word	0x08005f41
 8005e20:	08005f41 	.word	0x08005f41
 8005e24:	08005f41 	.word	0x08005f41
 8005e28:	08005ebf 	.word	0x08005ebf
 8005e2c:	08005f41 	.word	0x08005f41
 8005e30:	08005f41 	.word	0x08005f41
 8005e34:	08005f41 	.word	0x08005f41
 8005e38:	08005eff 	.word	0x08005eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fa2e 	bl	80062a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0208 	orr.w	r2, r2, #8
 8005e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0204 	bic.w	r2, r2, #4
 8005e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6999      	ldr	r1, [r3, #24]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	619a      	str	r2, [r3, #24]
      break;
 8005e7a:	e064      	b.n	8005f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fa7e 	bl	8006384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6999      	ldr	r1, [r3, #24]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	021a      	lsls	r2, r3, #8
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	619a      	str	r2, [r3, #24]
      break;
 8005ebc:	e043      	b.n	8005f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fad3 	bl	8006470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0208 	orr.w	r2, r2, #8
 8005ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0204 	bic.w	r2, r2, #4
 8005ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	61da      	str	r2, [r3, #28]
      break;
 8005efc:	e023      	b.n	8005f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fb27 	bl	8006558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69da      	ldr	r2, [r3, #28]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69d9      	ldr	r1, [r3, #28]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	021a      	lsls	r2, r3, #8
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	61da      	str	r2, [r3, #28]
      break;
 8005f3e:	e002      	b.n	8005f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]
      break;
 8005f44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIM_ConfigClockSource+0x1c>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e0b4      	b.n	80060de <HAL_TIM_ConfigClockSource+0x186>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fac:	d03e      	beq.n	800602c <HAL_TIM_ConfigClockSource+0xd4>
 8005fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb2:	f200 8087 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fba:	f000 8086 	beq.w	80060ca <HAL_TIM_ConfigClockSource+0x172>
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc2:	d87f      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc4:	2b70      	cmp	r3, #112	@ 0x70
 8005fc6:	d01a      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0xa6>
 8005fc8:	2b70      	cmp	r3, #112	@ 0x70
 8005fca:	d87b      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fcc:	2b60      	cmp	r3, #96	@ 0x60
 8005fce:	d050      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x11a>
 8005fd0:	2b60      	cmp	r3, #96	@ 0x60
 8005fd2:	d877      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b50      	cmp	r3, #80	@ 0x50
 8005fd6:	d03c      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0xfa>
 8005fd8:	2b50      	cmp	r3, #80	@ 0x50
 8005fda:	d873      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	d058      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x13a>
 8005fe0:	2b40      	cmp	r3, #64	@ 0x40
 8005fe2:	d86f      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b30      	cmp	r3, #48	@ 0x30
 8005fe6:	d064      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15a>
 8005fe8:	2b30      	cmp	r3, #48	@ 0x30
 8005fea:	d86b      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d060      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d867      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d05c      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d05a      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ffc:	e062      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800600e:	f000 fb73 	bl	80066f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	609a      	str	r2, [r3, #8]
      break;
 800602a:	e04f      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800603c:	f000 fb5c 	bl	80066f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800604e:	609a      	str	r2, [r3, #8]
      break;
 8006050:	e03c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fad0 	bl	8006604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2150      	movs	r1, #80	@ 0x50
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fb29 	bl	80066c2 <TIM_ITRx_SetConfig>
      break;
 8006070:	e02c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800607e:	461a      	mov	r2, r3
 8006080:	f000 faef 	bl	8006662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2160      	movs	r1, #96	@ 0x60
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fb19 	bl	80066c2 <TIM_ITRx_SetConfig>
      break;
 8006090:	e01c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	461a      	mov	r2, r3
 80060a0:	f000 fab0 	bl	8006604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2140      	movs	r1, #64	@ 0x40
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fb09 	bl	80066c2 <TIM_ITRx_SetConfig>
      break;
 80060b0:	e00c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f000 fb00 	bl	80066c2 <TIM_ITRx_SetConfig>
      break;
 80060c2:	e003      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e000      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a46      	ldr	r2, [pc, #280]	@ (8006278 <TIM_Base_SetConfig+0x12c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616a:	d00f      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a43      	ldr	r2, [pc, #268]	@ (800627c <TIM_Base_SetConfig+0x130>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a42      	ldr	r2, [pc, #264]	@ (8006280 <TIM_Base_SetConfig+0x134>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a41      	ldr	r2, [pc, #260]	@ (8006284 <TIM_Base_SetConfig+0x138>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a40      	ldr	r2, [pc, #256]	@ (8006288 <TIM_Base_SetConfig+0x13c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d108      	bne.n	800619e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a35      	ldr	r2, [pc, #212]	@ (8006278 <TIM_Base_SetConfig+0x12c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d02b      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ac:	d027      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a32      	ldr	r2, [pc, #200]	@ (800627c <TIM_Base_SetConfig+0x130>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d023      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a31      	ldr	r2, [pc, #196]	@ (8006280 <TIM_Base_SetConfig+0x134>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01f      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a30      	ldr	r2, [pc, #192]	@ (8006284 <TIM_Base_SetConfig+0x138>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01b      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006288 <TIM_Base_SetConfig+0x13c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d017      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2e      	ldr	r2, [pc, #184]	@ (800628c <TIM_Base_SetConfig+0x140>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006290 <TIM_Base_SetConfig+0x144>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00f      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006294 <TIM_Base_SetConfig+0x148>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00b      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006298 <TIM_Base_SetConfig+0x14c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2a      	ldr	r2, [pc, #168]	@ (800629c <TIM_Base_SetConfig+0x150>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a29      	ldr	r2, [pc, #164]	@ (80062a0 <TIM_Base_SetConfig+0x154>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a10      	ldr	r2, [pc, #64]	@ (8006278 <TIM_Base_SetConfig+0x12c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0xf8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a12      	ldr	r2, [pc, #72]	@ (8006288 <TIM_Base_SetConfig+0x13c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d103      	bne.n	800624c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	611a      	str	r2, [r3, #16]
  }
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40010000 	.word	0x40010000
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40010400 	.word	0x40010400
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800
 8006298:	40001800 	.word	0x40001800
 800629c:	40001c00 	.word	0x40001c00
 80062a0:	40002000 	.word	0x40002000

080062a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f023 0201 	bic.w	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 0302 	bic.w	r3, r3, #2
 80062ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a20      	ldr	r2, [pc, #128]	@ (800637c <TIM_OC1_SetConfig+0xd8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC1_SetConfig+0x64>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <TIM_OC1_SetConfig+0xdc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10c      	bne.n	8006322 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0308 	bic.w	r3, r3, #8
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a15      	ldr	r2, [pc, #84]	@ (800637c <TIM_OC1_SetConfig+0xd8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_OC1_SetConfig+0x8e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a14      	ldr	r2, [pc, #80]	@ (8006380 <TIM_OC1_SetConfig+0xdc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d111      	bne.n	8006356 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40010000 	.word	0x40010000
 8006380:	40010400 	.word	0x40010400

08006384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f023 0210 	bic.w	r2, r3, #16
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 0320 	bic.w	r3, r3, #32
 80063ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a22      	ldr	r2, [pc, #136]	@ (8006468 <TIM_OC2_SetConfig+0xe4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_OC2_SetConfig+0x68>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a21      	ldr	r2, [pc, #132]	@ (800646c <TIM_OC2_SetConfig+0xe8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d10d      	bne.n	8006408 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a17      	ldr	r2, [pc, #92]	@ (8006468 <TIM_OC2_SetConfig+0xe4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_OC2_SetConfig+0x94>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a16      	ldr	r2, [pc, #88]	@ (800646c <TIM_OC2_SetConfig+0xe8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d113      	bne.n	8006440 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800641e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40010400 	.word	0x40010400

08006470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0303 	bic.w	r3, r3, #3
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a21      	ldr	r2, [pc, #132]	@ (8006550 <TIM_OC3_SetConfig+0xe0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_OC3_SetConfig+0x66>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a20      	ldr	r2, [pc, #128]	@ (8006554 <TIM_OC3_SetConfig+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d10d      	bne.n	80064f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a16      	ldr	r2, [pc, #88]	@ (8006550 <TIM_OC3_SetConfig+0xe0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC3_SetConfig+0x92>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <TIM_OC3_SetConfig+0xe4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d113      	bne.n	800652a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40010000 	.word	0x40010000
 8006554:	40010400 	.word	0x40010400

08006558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a12      	ldr	r2, [pc, #72]	@ (80065fc <TIM_OC4_SetConfig+0xa4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_OC4_SetConfig+0x68>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a11      	ldr	r2, [pc, #68]	@ (8006600 <TIM_OC4_SetConfig+0xa8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d109      	bne.n	80065d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	019b      	lsls	r3, r3, #6
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40010000 	.word	0x40010000
 8006600:	40010400 	.word	0x40010400

08006604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800662e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 030a 	bic.w	r3, r3, #10
 8006640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006662:	b480      	push	{r7}
 8006664:	b087      	sub	sp, #28
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	f023 0210 	bic.w	r2, r3, #16
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800668c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	031b      	lsls	r3, r3, #12
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800669e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	f043 0307 	orr.w	r3, r3, #7
 80066e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	609a      	str	r2, [r3, #8]
}
 80066ec:	bf00      	nop
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	021a      	lsls	r2, r3, #8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	431a      	orrs	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4313      	orrs	r3, r2
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800674c:	2302      	movs	r3, #2
 800674e:	e05a      	b.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a21      	ldr	r2, [pc, #132]	@ (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d022      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800679c:	d01d      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d018      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00e      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a17      	ldr	r2, [pc, #92]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a15      	ldr	r2, [pc, #84]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d10c      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40010400 	.word	0x40010400
 8006828:	40014000 	.word	0x40014000
 800682c:	40001800 	.word	0x40001800

08006830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006848:	2302      	movs	r3, #2
 800684a:	e03d      	b.n	80068c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e042      	b.n	8006994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fb ffb6 	bl	8002894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2224      	movs	r2, #36	@ 0x24
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800693e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fef5 	bl	8007730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d112      	bne.n	80069dc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <HAL_UART_Receive_IT+0x26>
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e00b      	b.n	80069de <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	461a      	mov	r2, r3
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fc95 	bl	8007302 <UART_Start_Receive_IT>
 80069d8:	4603      	mov	r3, r0
 80069da:	e000      	b.n	80069de <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08c      	sub	sp, #48	@ 0x30
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d156      	bne.n	8006ab0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_UART_Transmit_DMA+0x26>
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e04f      	b.n	8006ab2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	88fa      	ldrh	r2, [r7, #6]
 8006a1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	88fa      	ldrh	r2, [r7, #6]
 8006a22:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2221      	movs	r2, #33	@ 0x21
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a36:	4a21      	ldr	r2, [pc, #132]	@ (8006abc <HAL_UART_Transmit_DMA+0xd4>)
 8006a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	4a20      	ldr	r2, [pc, #128]	@ (8006ac0 <HAL_UART_Transmit_DMA+0xd8>)
 8006a40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <HAL_UART_Transmit_DMA+0xdc>)
 8006a48:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4e:	2200      	movs	r2, #0
 8006a50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3304      	adds	r3, #4
 8006a66:	461a      	mov	r2, r3
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	f7fc fd83 	bl	8003574 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3314      	adds	r3, #20
 8006a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	617b      	str	r3, [r7, #20]
   return(result);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a98:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6a39      	ldr	r1, [r7, #32]
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	e000      	b.n	8006ab2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
  }
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3730      	adds	r7, #48	@ 0x30
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	080071b9 	.word	0x080071b9
 8006ac0:	08007253 	.word	0x08007253
 8006ac4:	0800726f 	.word	0x0800726f

08006ac8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b09a      	sub	sp, #104	@ 0x68
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ae6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	330c      	adds	r3, #12
 8006aee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006af0:	657a      	str	r2, [r7, #84]	@ 0x54
 8006af2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006af6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e5      	bne.n	8006ad0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3314      	adds	r3, #20
 8006b22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b24:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e5      	bne.n	8006b04 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d119      	bne.n	8006b74 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	330c      	adds	r3, #12
 8006b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	f023 0310 	bic.w	r3, r3, #16
 8006b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d13f      	bne.n	8006c02 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ba2:	61ba      	str	r2, [r7, #24]
 8006ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6979      	ldr	r1, [r7, #20]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d013      	beq.n	8006be6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc2:	4a19      	ldr	r2, [pc, #100]	@ (8006c28 <HAL_UART_AbortReceive_IT+0x160>)
 8006bc4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fc fd9a 	bl	8003704 <HAL_DMA_Abort_IT>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d022      	beq.n	8006c1c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	e01a      	b.n	8006c1c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fac6 	bl	800718c <HAL_UART_AbortReceiveCpltCallback>
 8006c00:	e00c      	b.n	8006c1c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fab8 	bl	800718c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3768      	adds	r7, #104	@ 0x68
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	080074b5 	.word	0x080074b5

08006c2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10f      	bne.n	8006c92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_UART_IRQHandler+0x66>
 8006c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fc92 	bl	80075b4 <UART_Receive_IT>
      return;
 8006c90:	e25b      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 80de 	beq.w	8006e58 <HAL_UART_IRQHandler+0x22c>
 8006c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80d1 	beq.w	8006e58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_UART_IRQHandler+0xae>
 8006cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd2:	f043 0201 	orr.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00b      	beq.n	8006cfe <HAL_UART_IRQHandler+0xd2>
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf6:	f043 0202 	orr.w	r2, r3, #2
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00b      	beq.n	8006d22 <HAL_UART_IRQHandler+0xf6>
 8006d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	f043 0204 	orr.w	r2, r3, #4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d011      	beq.n	8006d52 <HAL_UART_IRQHandler+0x126>
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	f043 0208 	orr.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 81f2 	beq.w	8007140 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_UART_IRQHandler+0x14e>
 8006d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fc1d 	bl	80075b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <HAL_UART_IRQHandler+0x17a>
 8006d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d04f      	beq.n	8006e46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fb0d 	bl	80073c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db6:	2b40      	cmp	r3, #64	@ 0x40
 8006db8:	d141      	bne.n	8006e3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3314      	adds	r3, #20
 8006dc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3314      	adds	r3, #20
 8006de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006de6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1d9      	bne.n	8006dba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d013      	beq.n	8006e36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e12:	4a7e      	ldr	r2, [pc, #504]	@ (800700c <HAL_UART_IRQHandler+0x3e0>)
 8006e14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fc fc72 	bl	8003704 <HAL_DMA_Abort_IT>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e34:	e00e      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f99e 	bl	8007178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3c:	e00a      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f99a 	bl	8007178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e44:	e006      	b.n	8006e54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f996 	bl	8007178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006e52:	e175      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	bf00      	nop
    return;
 8006e56:	e173      	b.n	8007140 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f040 814f 	bne.w	8007100 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8148 	beq.w	8007100 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 8141 	beq.w	8007100 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ea0:	f040 80b6 	bne.w	8007010 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8145 	beq.w	8007144 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	f080 813e 	bcs.w	8007144 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ece:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eda:	f000 8088 	beq.w	8006fee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1d9      	bne.n	8006ede <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e1      	bne.n	8006f2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3314      	adds	r3, #20
 8006f6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3314      	adds	r3, #20
 8006f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e3      	bne.n	8006f66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fbe:	f023 0310 	bic.w	r3, r3, #16
 8006fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006fd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006fd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e3      	bne.n	8006fac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fc fb1b 	bl	8003624 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	b29b      	uxth	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8cb 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800700a:	e09b      	b.n	8007144 <HAL_UART_IRQHandler+0x518>
 800700c:	0800748d 	.word	0x0800748d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007018:	b29b      	uxth	r3, r3
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 808e 	beq.w	8007148 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800702c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8089 	beq.w	8007148 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800704c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800705a:	647a      	str	r2, [r7, #68]	@ 0x44
 800705c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007060:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e3      	bne.n	8007036 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3314      	adds	r3, #20
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	623b      	str	r3, [r7, #32]
   return(result);
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007092:	633a      	str	r2, [r7, #48]	@ 0x30
 8007094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e3      	bne.n	800706e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0310 	bic.w	r3, r3, #16
 80070ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	330c      	adds	r3, #12
 80070d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80070d8:	61fa      	str	r2, [r7, #28]
 80070da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	617b      	str	r3, [r7, #20]
   return(result);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e3      	bne.n	80070b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f851 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070fe:	e023      	b.n	8007148 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <HAL_UART_IRQHandler+0x4f4>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9e3 	bl	80074e4 <UART_Transmit_IT>
    return;
 800711e:	e014      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <HAL_UART_IRQHandler+0x51e>
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d008      	beq.n	800714a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa23 	bl	8007584 <UART_EndTransmit_IT>
    return;
 800713e:	e004      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
    return;
 8007140:	bf00      	nop
 8007142:	e002      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
      return;
 8007144:	bf00      	nop
 8007146:	e000      	b.n	800714a <HAL_UART_IRQHandler+0x51e>
      return;
 8007148:	bf00      	nop
  }
}
 800714a:	37e8      	adds	r7, #232	@ 0xe8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b090      	sub	sp, #64	@ 0x40
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d137      	bne.n	8007244 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80071d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d6:	2200      	movs	r2, #0
 80071d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3314      	adds	r3, #20
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3314      	adds	r3, #20
 80071f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80071fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800720e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	60fb      	str	r3, [r7, #12]
   return(result);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007224:	637b      	str	r3, [r7, #52]	@ 0x34
 8007226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800722e:	61fa      	str	r2, [r7, #28]
 8007230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	69b9      	ldr	r1, [r7, #24]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	617b      	str	r3, [r7, #20]
   return(result);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007242:	e002      	b.n	800724a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007244:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007246:	f7ff ff83 	bl	8007150 <HAL_UART_TxCpltCallback>
}
 800724a:	bf00      	nop
 800724c:	3740      	adds	r7, #64	@ 0x40
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff ff7f 	bl	8007164 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800728a:	2b80      	cmp	r3, #128	@ 0x80
 800728c:	bf0c      	ite	eq
 800728e:	2301      	moveq	r3, #1
 8007290:	2300      	movne	r3, #0
 8007292:	b2db      	uxtb	r3, r3
 8007294:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b21      	cmp	r3, #33	@ 0x21
 80072a0:	d108      	bne.n	80072b4 <UART_DMAError+0x46>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80072ae:	68b8      	ldr	r0, [r7, #8]
 80072b0:	f000 f861 	bl	8007376 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072be:	2b40      	cmp	r3, #64	@ 0x40
 80072c0:	bf0c      	ite	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	2300      	movne	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b22      	cmp	r3, #34	@ 0x22
 80072d4:	d108      	bne.n	80072e8 <UART_DMAError+0x7a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2200      	movs	r2, #0
 80072e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80072e2:	68b8      	ldr	r0, [r7, #8]
 80072e4:	f000 f86f 	bl	80073c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ec:	f043 0210 	orr.w	r2, r3, #16
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072f4:	68b8      	ldr	r0, [r7, #8]
 80072f6:	f7ff ff3f 	bl	8007178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	4613      	mov	r3, r2
 800730e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	88fa      	ldrh	r2, [r7, #6]
 800731a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2222      	movs	r2, #34	@ 0x22
 800732c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007346:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695a      	ldr	r2, [r3, #20]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0220 	orr.w	r2, r2, #32
 8007366:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007376:	b480      	push	{r7}
 8007378:	b089      	sub	sp, #36	@ 0x24
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	60bb      	str	r3, [r7, #8]
   return(result);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	61ba      	str	r2, [r7, #24]
 80073a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e5      	bne.n	800737e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80073ba:	bf00      	nop
 80073bc:	3724      	adds	r7, #36	@ 0x24
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b095      	sub	sp, #84	@ 0x54
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	330c      	adds	r3, #12
 80073ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e5      	bne.n	80073ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	61fb      	str	r3, [r7, #28]
   return(result);
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3314      	adds	r3, #20
 8007420:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007424:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e5      	bne.n	8007402 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743a:	2b01      	cmp	r3, #1
 800743c:	d119      	bne.n	8007472 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	330c      	adds	r3, #12
 8007444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	60bb      	str	r3, [r7, #8]
   return(result);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f023 0310 	bic.w	r3, r3, #16
 8007454:	647b      	str	r3, [r7, #68]	@ 0x44
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800745e:	61ba      	str	r2, [r7, #24]
 8007460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	613b      	str	r3, [r7, #16]
   return(result);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e5      	bne.n	800743e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007480:	bf00      	nop
 8007482:	3754      	adds	r7, #84	@ 0x54
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007498:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7ff fe66 	bl	8007178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fe58 	bl	800718c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b21      	cmp	r3, #33	@ 0x21
 80074f6:	d13e      	bne.n	8007576 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007500:	d114      	bne.n	800752c <UART_Transmit_IT+0x48>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800751e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	1c9a      	adds	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	621a      	str	r2, [r3, #32]
 800752a:	e008      	b.n	800753e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	1c59      	adds	r1, r3, #1
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6211      	str	r1, [r2, #32]
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29b      	uxth	r3, r3
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4619      	mov	r1, r3
 800754c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10f      	bne.n	8007572 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007560:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007570:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007576:	2302      	movs	r3, #2
  }
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800759a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fdd3 	bl	8007150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08c      	sub	sp, #48	@ 0x30
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b22      	cmp	r3, #34	@ 0x22
 80075c6:	f040 80ae 	bne.w	8007726 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d2:	d117      	bne.n	8007604 <UART_Receive_IT+0x50>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d113      	bne.n	8007604 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	629a      	str	r2, [r3, #40]	@ 0x28
 8007602:	e026      	b.n	8007652 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007616:	d007      	beq.n	8007628 <UART_Receive_IT+0x74>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <UART_Receive_IT+0x82>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	b2da      	uxtb	r2, r3
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e008      	b.n	8007648 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007642:	b2da      	uxtb	r2, r3
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29b      	uxth	r3, r3
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	4619      	mov	r1, r3
 8007660:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007662:	2b00      	cmp	r3, #0
 8007664:	d15d      	bne.n	8007722 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0220 	bic.w	r2, r2, #32
 8007674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d135      	bne.n	8007718 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	613b      	str	r3, [r7, #16]
   return(result);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f023 0310 	bic.w	r3, r3, #16
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076d2:	623a      	str	r2, [r7, #32]
 80076d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	69f9      	ldr	r1, [r7, #28]
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	61bb      	str	r3, [r7, #24]
   return(result);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	d10a      	bne.n	800770a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff fd45 	bl	80071a0 <HAL_UARTEx_RxEventCallback>
 8007716:	e002      	b.n	800771e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fa f975 	bl	8001a08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e002      	b.n	8007728 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	e000      	b.n	8007728 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
  }
}
 8007728:	4618      	mov	r0, r3
 800772a:	3730      	adds	r7, #48	@ 0x30
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007734:	b0c0      	sub	sp, #256	@ 0x100
 8007736:	af00      	add	r7, sp, #0
 8007738:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774c:	68d9      	ldr	r1, [r3, #12]
 800774e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	ea40 0301 	orr.w	r3, r0, r1
 8007758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800775a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	431a      	orrs	r2, r3
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	431a      	orrs	r2, r3
 8007770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	4313      	orrs	r3, r2
 8007778:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007788:	f021 010c 	bic.w	r1, r1, #12
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007796:	430b      	orrs	r3, r1
 8007798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800779a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077aa:	6999      	ldr	r1, [r3, #24]
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	ea40 0301 	orr.w	r3, r0, r1
 80077b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b8f      	ldr	r3, [pc, #572]	@ (80079fc <UART_SetConfig+0x2cc>)
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d005      	beq.n	80077d0 <UART_SetConfig+0xa0>
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007a00 <UART_SetConfig+0x2d0>)
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d104      	bne.n	80077da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077d0:	f7fc fd4c 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 80077d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80077d8:	e003      	b.n	80077e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077da:	f7fc fd33 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 80077de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ec:	f040 810c 	bne.w	8007a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007802:	4622      	mov	r2, r4
 8007804:	462b      	mov	r3, r5
 8007806:	1891      	adds	r1, r2, r2
 8007808:	65b9      	str	r1, [r7, #88]	@ 0x58
 800780a:	415b      	adcs	r3, r3
 800780c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800780e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007812:	4621      	mov	r1, r4
 8007814:	eb12 0801 	adds.w	r8, r2, r1
 8007818:	4629      	mov	r1, r5
 800781a:	eb43 0901 	adc.w	r9, r3, r1
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800782a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800782e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007832:	4690      	mov	r8, r2
 8007834:	4699      	mov	r9, r3
 8007836:	4623      	mov	r3, r4
 8007838:	eb18 0303 	adds.w	r3, r8, r3
 800783c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007840:	462b      	mov	r3, r5
 8007842:	eb49 0303 	adc.w	r3, r9, r3
 8007846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007856:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800785a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800785e:	460b      	mov	r3, r1
 8007860:	18db      	adds	r3, r3, r3
 8007862:	653b      	str	r3, [r7, #80]	@ 0x50
 8007864:	4613      	mov	r3, r2
 8007866:	eb42 0303 	adc.w	r3, r2, r3
 800786a:	657b      	str	r3, [r7, #84]	@ 0x54
 800786c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007874:	f7f9 f91a 	bl	8000aac <__aeabi_uldivmod>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4b61      	ldr	r3, [pc, #388]	@ (8007a04 <UART_SetConfig+0x2d4>)
 800787e:	fba3 2302 	umull	r2, r3, r3, r2
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	011c      	lsls	r4, r3, #4
 8007886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800788a:	2200      	movs	r2, #0
 800788c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007890:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	1891      	adds	r1, r2, r2
 800789e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078a0:	415b      	adcs	r3, r3
 80078a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078a8:	4641      	mov	r1, r8
 80078aa:	eb12 0a01 	adds.w	sl, r2, r1
 80078ae:	4649      	mov	r1, r9
 80078b0:	eb43 0b01 	adc.w	fp, r3, r1
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078c8:	4692      	mov	sl, r2
 80078ca:	469b      	mov	fp, r3
 80078cc:	4643      	mov	r3, r8
 80078ce:	eb1a 0303 	adds.w	r3, sl, r3
 80078d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078d6:	464b      	mov	r3, r9
 80078d8:	eb4b 0303 	adc.w	r3, fp, r3
 80078dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078f4:	460b      	mov	r3, r1
 80078f6:	18db      	adds	r3, r3, r3
 80078f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078fa:	4613      	mov	r3, r2
 80078fc:	eb42 0303 	adc.w	r3, r2, r3
 8007900:	647b      	str	r3, [r7, #68]	@ 0x44
 8007902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800790a:	f7f9 f8cf 	bl	8000aac <__aeabi_uldivmod>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4611      	mov	r1, r2
 8007914:	4b3b      	ldr	r3, [pc, #236]	@ (8007a04 <UART_SetConfig+0x2d4>)
 8007916:	fba3 2301 	umull	r2, r3, r3, r1
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	2264      	movs	r2, #100	@ 0x64
 800791e:	fb02 f303 	mul.w	r3, r2, r3
 8007922:	1acb      	subs	r3, r1, r3
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800792a:	4b36      	ldr	r3, [pc, #216]	@ (8007a04 <UART_SetConfig+0x2d4>)
 800792c:	fba3 2302 	umull	r2, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007938:	441c      	add	r4, r3
 800793a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800793e:	2200      	movs	r2, #0
 8007940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007944:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800794c:	4642      	mov	r2, r8
 800794e:	464b      	mov	r3, r9
 8007950:	1891      	adds	r1, r2, r2
 8007952:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007954:	415b      	adcs	r3, r3
 8007956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800795c:	4641      	mov	r1, r8
 800795e:	1851      	adds	r1, r2, r1
 8007960:	6339      	str	r1, [r7, #48]	@ 0x30
 8007962:	4649      	mov	r1, r9
 8007964:	414b      	adcs	r3, r1
 8007966:	637b      	str	r3, [r7, #52]	@ 0x34
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007974:	4659      	mov	r1, fp
 8007976:	00cb      	lsls	r3, r1, #3
 8007978:	4651      	mov	r1, sl
 800797a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800797e:	4651      	mov	r1, sl
 8007980:	00ca      	lsls	r2, r1, #3
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	4603      	mov	r3, r0
 8007988:	4642      	mov	r2, r8
 800798a:	189b      	adds	r3, r3, r2
 800798c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007990:	464b      	mov	r3, r9
 8007992:	460a      	mov	r2, r1
 8007994:	eb42 0303 	adc.w	r3, r2, r3
 8007998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079b0:	460b      	mov	r3, r1
 80079b2:	18db      	adds	r3, r3, r3
 80079b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079b6:	4613      	mov	r3, r2
 80079b8:	eb42 0303 	adc.w	r3, r2, r3
 80079bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079c6:	f7f9 f871 	bl	8000aac <__aeabi_uldivmod>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007a04 <UART_SetConfig+0x2d4>)
 80079d0:	fba3 1302 	umull	r1, r3, r3, r2
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	2164      	movs	r1, #100	@ 0x64
 80079d8:	fb01 f303 	mul.w	r3, r1, r3
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	3332      	adds	r3, #50	@ 0x32
 80079e2:	4a08      	ldr	r2, [pc, #32]	@ (8007a04 <UART_SetConfig+0x2d4>)
 80079e4:	fba2 2303 	umull	r2, r3, r2, r3
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	f003 0207 	and.w	r2, r3, #7
 80079ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4422      	add	r2, r4
 80079f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079f8:	e106      	b.n	8007c08 <UART_SetConfig+0x4d8>
 80079fa:	bf00      	nop
 80079fc:	40011000 	.word	0x40011000
 8007a00:	40011400 	.word	0x40011400
 8007a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a1a:	4642      	mov	r2, r8
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	1891      	adds	r1, r2, r2
 8007a20:	6239      	str	r1, [r7, #32]
 8007a22:	415b      	adcs	r3, r3
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	1854      	adds	r4, r2, r1
 8007a2e:	4649      	mov	r1, r9
 8007a30:	eb43 0501 	adc.w	r5, r3, r1
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	00eb      	lsls	r3, r5, #3
 8007a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a42:	00e2      	lsls	r2, r4, #3
 8007a44:	4614      	mov	r4, r2
 8007a46:	461d      	mov	r5, r3
 8007a48:	4643      	mov	r3, r8
 8007a4a:	18e3      	adds	r3, r4, r3
 8007a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a50:	464b      	mov	r3, r9
 8007a52:	eb45 0303 	adc.w	r3, r5, r3
 8007a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a76:	4629      	mov	r1, r5
 8007a78:	008b      	lsls	r3, r1, #2
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a80:	4621      	mov	r1, r4
 8007a82:	008a      	lsls	r2, r1, #2
 8007a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a88:	f7f9 f810 	bl	8000aac <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4b60      	ldr	r3, [pc, #384]	@ (8007c14 <UART_SetConfig+0x4e4>)
 8007a92:	fba3 2302 	umull	r2, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	011c      	lsls	r4, r3, #4
 8007a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007aa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	1891      	adds	r1, r2, r2
 8007ab2:	61b9      	str	r1, [r7, #24]
 8007ab4:	415b      	adcs	r3, r3
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007abc:	4641      	mov	r1, r8
 8007abe:	1851      	adds	r1, r2, r1
 8007ac0:	6139      	str	r1, [r7, #16]
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	414b      	adcs	r3, r1
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	00cb      	lsls	r3, r1, #3
 8007ad8:	4651      	mov	r1, sl
 8007ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ade:	4651      	mov	r1, sl
 8007ae0:	00ca      	lsls	r2, r1, #3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4642      	mov	r2, r8
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007af0:	464b      	mov	r3, r9
 8007af2:	460a      	mov	r2, r1
 8007af4:	eb42 0303 	adc.w	r3, r2, r3
 8007af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b14:	4649      	mov	r1, r9
 8007b16:	008b      	lsls	r3, r1, #2
 8007b18:	4641      	mov	r1, r8
 8007b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b1e:	4641      	mov	r1, r8
 8007b20:	008a      	lsls	r2, r1, #2
 8007b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b26:	f7f8 ffc1 	bl	8000aac <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	4b38      	ldr	r3, [pc, #224]	@ (8007c14 <UART_SetConfig+0x4e4>)
 8007b32:	fba3 2301 	umull	r2, r3, r3, r1
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	2264      	movs	r2, #100	@ 0x64
 8007b3a:	fb02 f303 	mul.w	r3, r2, r3
 8007b3e:	1acb      	subs	r3, r1, r3
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	3332      	adds	r3, #50	@ 0x32
 8007b44:	4a33      	ldr	r2, [pc, #204]	@ (8007c14 <UART_SetConfig+0x4e4>)
 8007b46:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b50:	441c      	add	r4, r3
 8007b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b56:	2200      	movs	r2, #0
 8007b58:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	1891      	adds	r1, r2, r2
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	415b      	adcs	r3, r3
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b70:	4641      	mov	r1, r8
 8007b72:	1851      	adds	r1, r2, r1
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	4649      	mov	r1, r9
 8007b78:	414b      	adcs	r3, r1
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b88:	4659      	mov	r1, fp
 8007b8a:	00cb      	lsls	r3, r1, #3
 8007b8c:	4651      	mov	r1, sl
 8007b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b92:	4651      	mov	r1, sl
 8007b94:	00ca      	lsls	r2, r1, #3
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	460a      	mov	r2, r1
 8007ba6:	eb42 0303 	adc.w	r3, r2, r3
 8007baa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	008b      	lsls	r3, r1, #2
 8007bc8:	4641      	mov	r1, r8
 8007bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bce:	4641      	mov	r1, r8
 8007bd0:	008a      	lsls	r2, r1, #2
 8007bd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007bd6:	f7f8 ff69 	bl	8000aac <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <UART_SetConfig+0x4e4>)
 8007be0:	fba3 1302 	umull	r1, r3, r3, r2
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	2164      	movs	r1, #100	@ 0x64
 8007be8:	fb01 f303 	mul.w	r3, r1, r3
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	3332      	adds	r3, #50	@ 0x32
 8007bf2:	4a08      	ldr	r2, [pc, #32]	@ (8007c14 <UART_SetConfig+0x4e4>)
 8007bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	f003 020f 	and.w	r2, r3, #15
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4422      	add	r2, r4
 8007c06:	609a      	str	r2, [r3, #8]
}
 8007c08:	bf00      	nop
 8007c0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c14:	51eb851f 	.word	0x51eb851f

08007c18 <siprintf>:
 8007c18:	b40e      	push	{r1, r2, r3}
 8007c1a:	b500      	push	{lr}
 8007c1c:	b09c      	sub	sp, #112	@ 0x70
 8007c1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c20:	9002      	str	r0, [sp, #8]
 8007c22:	9006      	str	r0, [sp, #24]
 8007c24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c28:	4809      	ldr	r0, [pc, #36]	@ (8007c50 <siprintf+0x38>)
 8007c2a:	9107      	str	r1, [sp, #28]
 8007c2c:	9104      	str	r1, [sp, #16]
 8007c2e:	4909      	ldr	r1, [pc, #36]	@ (8007c54 <siprintf+0x3c>)
 8007c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c34:	9105      	str	r1, [sp, #20]
 8007c36:	6800      	ldr	r0, [r0, #0]
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	a902      	add	r1, sp, #8
 8007c3c:	f000 f9be 	bl	8007fbc <_svfiprintf_r>
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	b01c      	add	sp, #112	@ 0x70
 8007c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c4c:	b003      	add	sp, #12
 8007c4e:	4770      	bx	lr
 8007c50:	2000004c 	.word	0x2000004c
 8007c54:	ffff0208 	.word	0xffff0208

08007c58 <memset>:
 8007c58:	4402      	add	r2, r0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d100      	bne.n	8007c62 <memset+0xa>
 8007c60:	4770      	bx	lr
 8007c62:	f803 1b01 	strb.w	r1, [r3], #1
 8007c66:	e7f9      	b.n	8007c5c <memset+0x4>

08007c68 <strncpy>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	3901      	subs	r1, #1
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	b132      	cbz	r2, 8007c7e <strncpy+0x16>
 8007c70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c74:	f803 4b01 	strb.w	r4, [r3], #1
 8007c78:	3a01      	subs	r2, #1
 8007c7a:	2c00      	cmp	r4, #0
 8007c7c:	d1f7      	bne.n	8007c6e <strncpy+0x6>
 8007c7e:	441a      	add	r2, r3
 8007c80:	2100      	movs	r1, #0
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d100      	bne.n	8007c88 <strncpy+0x20>
 8007c86:	bd10      	pop	{r4, pc}
 8007c88:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8c:	e7f9      	b.n	8007c82 <strncpy+0x1a>
	...

08007c90 <__errno>:
 8007c90:	4b01      	ldr	r3, [pc, #4]	@ (8007c98 <__errno+0x8>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	2000004c 	.word	0x2000004c

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd4 <__libc_init_array+0x38>)
 8007ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd8 <__libc_init_array+0x3c>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	4d0b      	ldr	r5, [pc, #44]	@ (8007cdc <__libc_init_array+0x40>)
 8007cae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ce0 <__libc_init_array+0x44>)
 8007cb0:	f000 fc6e 	bl	8008590 <_init>
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	2600      	movs	r6, #0
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	080086e8 	.word	0x080086e8
 8007cd8:	080086e8 	.word	0x080086e8
 8007cdc:	080086e8 	.word	0x080086e8
 8007ce0:	080086ec 	.word	0x080086ec

08007ce4 <__retarget_lock_acquire_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_release_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <strcpy>:
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cee:	f803 2b01 	strb.w	r2, [r3], #1
 8007cf2:	2a00      	cmp	r2, #0
 8007cf4:	d1f9      	bne.n	8007cea <strcpy+0x2>
 8007cf6:	4770      	bx	lr

08007cf8 <memcpy>:
 8007cf8:	440a      	add	r2, r1
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007d00:	d100      	bne.n	8007d04 <memcpy+0xc>
 8007d02:	4770      	bx	lr
 8007d04:	b510      	push	{r4, lr}
 8007d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d0e:	4291      	cmp	r1, r2
 8007d10:	d1f9      	bne.n	8007d06 <memcpy+0xe>
 8007d12:	bd10      	pop	{r4, pc}

08007d14 <_free_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4605      	mov	r5, r0
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d041      	beq.n	8007da0 <_free_r+0x8c>
 8007d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d20:	1f0c      	subs	r4, r1, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bfb8      	it	lt
 8007d26:	18e4      	addlt	r4, r4, r3
 8007d28:	f000 f8e0 	bl	8007eec <__malloc_lock>
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007da4 <_free_r+0x90>)
 8007d2e:	6813      	ldr	r3, [r2, #0]
 8007d30:	b933      	cbnz	r3, 8007d40 <_free_r+0x2c>
 8007d32:	6063      	str	r3, [r4, #4]
 8007d34:	6014      	str	r4, [r2, #0]
 8007d36:	4628      	mov	r0, r5
 8007d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d3c:	f000 b8dc 	b.w	8007ef8 <__malloc_unlock>
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d908      	bls.n	8007d56 <_free_r+0x42>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	1821      	adds	r1, r4, r0
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	bf01      	itttt	eq
 8007d4c:	6819      	ldreq	r1, [r3, #0]
 8007d4e:	685b      	ldreq	r3, [r3, #4]
 8007d50:	1809      	addeq	r1, r1, r0
 8007d52:	6021      	streq	r1, [r4, #0]
 8007d54:	e7ed      	b.n	8007d32 <_free_r+0x1e>
 8007d56:	461a      	mov	r2, r3
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	b10b      	cbz	r3, 8007d60 <_free_r+0x4c>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d9fa      	bls.n	8007d56 <_free_r+0x42>
 8007d60:	6811      	ldr	r1, [r2, #0]
 8007d62:	1850      	adds	r0, r2, r1
 8007d64:	42a0      	cmp	r0, r4
 8007d66:	d10b      	bne.n	8007d80 <_free_r+0x6c>
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	4401      	add	r1, r0
 8007d6c:	1850      	adds	r0, r2, r1
 8007d6e:	4283      	cmp	r3, r0
 8007d70:	6011      	str	r1, [r2, #0]
 8007d72:	d1e0      	bne.n	8007d36 <_free_r+0x22>
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	6053      	str	r3, [r2, #4]
 8007d7a:	4408      	add	r0, r1
 8007d7c:	6010      	str	r0, [r2, #0]
 8007d7e:	e7da      	b.n	8007d36 <_free_r+0x22>
 8007d80:	d902      	bls.n	8007d88 <_free_r+0x74>
 8007d82:	230c      	movs	r3, #12
 8007d84:	602b      	str	r3, [r5, #0]
 8007d86:	e7d6      	b.n	8007d36 <_free_r+0x22>
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	1821      	adds	r1, r4, r0
 8007d8c:	428b      	cmp	r3, r1
 8007d8e:	bf04      	itt	eq
 8007d90:	6819      	ldreq	r1, [r3, #0]
 8007d92:	685b      	ldreq	r3, [r3, #4]
 8007d94:	6063      	str	r3, [r4, #4]
 8007d96:	bf04      	itt	eq
 8007d98:	1809      	addeq	r1, r1, r0
 8007d9a:	6021      	streq	r1, [r4, #0]
 8007d9c:	6054      	str	r4, [r2, #4]
 8007d9e:	e7ca      	b.n	8007d36 <_free_r+0x22>
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	20000704 	.word	0x20000704

08007da8 <sbrk_aligned>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4e0f      	ldr	r6, [pc, #60]	@ (8007de8 <sbrk_aligned+0x40>)
 8007dac:	460c      	mov	r4, r1
 8007dae:	6831      	ldr	r1, [r6, #0]
 8007db0:	4605      	mov	r5, r0
 8007db2:	b911      	cbnz	r1, 8007dba <sbrk_aligned+0x12>
 8007db4:	f000 fba6 	bl	8008504 <_sbrk_r>
 8007db8:	6030      	str	r0, [r6, #0]
 8007dba:	4621      	mov	r1, r4
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f000 fba1 	bl	8008504 <_sbrk_r>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d103      	bne.n	8007dce <sbrk_aligned+0x26>
 8007dc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007dca:	4620      	mov	r0, r4
 8007dcc:	bd70      	pop	{r4, r5, r6, pc}
 8007dce:	1cc4      	adds	r4, r0, #3
 8007dd0:	f024 0403 	bic.w	r4, r4, #3
 8007dd4:	42a0      	cmp	r0, r4
 8007dd6:	d0f8      	beq.n	8007dca <sbrk_aligned+0x22>
 8007dd8:	1a21      	subs	r1, r4, r0
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 fb92 	bl	8008504 <_sbrk_r>
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1f2      	bne.n	8007dca <sbrk_aligned+0x22>
 8007de4:	e7ef      	b.n	8007dc6 <sbrk_aligned+0x1e>
 8007de6:	bf00      	nop
 8007de8:	20000700 	.word	0x20000700

08007dec <_malloc_r>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	1ccd      	adds	r5, r1, #3
 8007df2:	f025 0503 	bic.w	r5, r5, #3
 8007df6:	3508      	adds	r5, #8
 8007df8:	2d0c      	cmp	r5, #12
 8007dfa:	bf38      	it	cc
 8007dfc:	250c      	movcc	r5, #12
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	4606      	mov	r6, r0
 8007e02:	db01      	blt.n	8007e08 <_malloc_r+0x1c>
 8007e04:	42a9      	cmp	r1, r5
 8007e06:	d904      	bls.n	8007e12 <_malloc_r+0x26>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee8 <_malloc_r+0xfc>
 8007e16:	f000 f869 	bl	8007eec <__malloc_lock>
 8007e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e1e:	461c      	mov	r4, r3
 8007e20:	bb44      	cbnz	r4, 8007e74 <_malloc_r+0x88>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7ff ffbf 	bl	8007da8 <sbrk_aligned>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	d158      	bne.n	8007ee2 <_malloc_r+0xf6>
 8007e30:	f8d8 4000 	ldr.w	r4, [r8]
 8007e34:	4627      	mov	r7, r4
 8007e36:	2f00      	cmp	r7, #0
 8007e38:	d143      	bne.n	8007ec2 <_malloc_r+0xd6>
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d04b      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	4639      	mov	r1, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	eb04 0903 	add.w	r9, r4, r3
 8007e48:	f000 fb5c 	bl	8008504 <_sbrk_r>
 8007e4c:	4581      	cmp	r9, r0
 8007e4e:	d142      	bne.n	8007ed6 <_malloc_r+0xea>
 8007e50:	6821      	ldr	r1, [r4, #0]
 8007e52:	1a6d      	subs	r5, r5, r1
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f7ff ffa6 	bl	8007da8 <sbrk_aligned>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d03a      	beq.n	8007ed6 <_malloc_r+0xea>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	442b      	add	r3, r5
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	bb62      	cbnz	r2, 8007ec8 <_malloc_r+0xdc>
 8007e6e:	f8c8 7000 	str.w	r7, [r8]
 8007e72:	e00f      	b.n	8007e94 <_malloc_r+0xa8>
 8007e74:	6822      	ldr	r2, [r4, #0]
 8007e76:	1b52      	subs	r2, r2, r5
 8007e78:	d420      	bmi.n	8007ebc <_malloc_r+0xd0>
 8007e7a:	2a0b      	cmp	r2, #11
 8007e7c:	d917      	bls.n	8007eae <_malloc_r+0xc2>
 8007e7e:	1961      	adds	r1, r4, r5
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	6025      	str	r5, [r4, #0]
 8007e84:	bf18      	it	ne
 8007e86:	6059      	strne	r1, [r3, #4]
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	bf08      	it	eq
 8007e8c:	f8c8 1000 	streq.w	r1, [r8]
 8007e90:	5162      	str	r2, [r4, r5]
 8007e92:	604b      	str	r3, [r1, #4]
 8007e94:	4630      	mov	r0, r6
 8007e96:	f000 f82f 	bl	8007ef8 <__malloc_unlock>
 8007e9a:	f104 000b 	add.w	r0, r4, #11
 8007e9e:	1d23      	adds	r3, r4, #4
 8007ea0:	f020 0007 	bic.w	r0, r0, #7
 8007ea4:	1ac2      	subs	r2, r0, r3
 8007ea6:	bf1c      	itt	ne
 8007ea8:	1a1b      	subne	r3, r3, r0
 8007eaa:	50a3      	strne	r3, [r4, r2]
 8007eac:	e7af      	b.n	8007e0e <_malloc_r+0x22>
 8007eae:	6862      	ldr	r2, [r4, #4]
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	bf0c      	ite	eq
 8007eb4:	f8c8 2000 	streq.w	r2, [r8]
 8007eb8:	605a      	strne	r2, [r3, #4]
 8007eba:	e7eb      	b.n	8007e94 <_malloc_r+0xa8>
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	6864      	ldr	r4, [r4, #4]
 8007ec0:	e7ae      	b.n	8007e20 <_malloc_r+0x34>
 8007ec2:	463c      	mov	r4, r7
 8007ec4:	687f      	ldr	r7, [r7, #4]
 8007ec6:	e7b6      	b.n	8007e36 <_malloc_r+0x4a>
 8007ec8:	461a      	mov	r2, r3
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d1fb      	bne.n	8007ec8 <_malloc_r+0xdc>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6053      	str	r3, [r2, #4]
 8007ed4:	e7de      	b.n	8007e94 <_malloc_r+0xa8>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	4630      	mov	r0, r6
 8007edc:	f000 f80c 	bl	8007ef8 <__malloc_unlock>
 8007ee0:	e794      	b.n	8007e0c <_malloc_r+0x20>
 8007ee2:	6005      	str	r5, [r0, #0]
 8007ee4:	e7d6      	b.n	8007e94 <_malloc_r+0xa8>
 8007ee6:	bf00      	nop
 8007ee8:	20000704 	.word	0x20000704

08007eec <__malloc_lock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	@ (8007ef4 <__malloc_lock+0x8>)
 8007eee:	f7ff bef9 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	200006fc 	.word	0x200006fc

08007ef8 <__malloc_unlock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	@ (8007f00 <__malloc_unlock+0x8>)
 8007efa:	f7ff bef4 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007efe:	bf00      	nop
 8007f00:	200006fc 	.word	0x200006fc

08007f04 <__ssputs_r>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	688e      	ldr	r6, [r1, #8]
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	42be      	cmp	r6, r7
 8007f0e:	680b      	ldr	r3, [r1, #0]
 8007f10:	4682      	mov	sl, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4690      	mov	r8, r2
 8007f16:	d82d      	bhi.n	8007f74 <__ssputs_r+0x70>
 8007f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f20:	d026      	beq.n	8007f70 <__ssputs_r+0x6c>
 8007f22:	6965      	ldr	r5, [r4, #20]
 8007f24:	6909      	ldr	r1, [r1, #16]
 8007f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f2a:	eba3 0901 	sub.w	r9, r3, r1
 8007f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f32:	1c7b      	adds	r3, r7, #1
 8007f34:	444b      	add	r3, r9
 8007f36:	106d      	asrs	r5, r5, #1
 8007f38:	429d      	cmp	r5, r3
 8007f3a:	bf38      	it	cc
 8007f3c:	461d      	movcc	r5, r3
 8007f3e:	0553      	lsls	r3, r2, #21
 8007f40:	d527      	bpl.n	8007f92 <__ssputs_r+0x8e>
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7ff ff52 	bl	8007dec <_malloc_r>
 8007f48:	4606      	mov	r6, r0
 8007f4a:	b360      	cbz	r0, 8007fa6 <__ssputs_r+0xa2>
 8007f4c:	6921      	ldr	r1, [r4, #16]
 8007f4e:	464a      	mov	r2, r9
 8007f50:	f7ff fed2 	bl	8007cf8 <memcpy>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	6126      	str	r6, [r4, #16]
 8007f62:	6165      	str	r5, [r4, #20]
 8007f64:	444e      	add	r6, r9
 8007f66:	eba5 0509 	sub.w	r5, r5, r9
 8007f6a:	6026      	str	r6, [r4, #0]
 8007f6c:	60a5      	str	r5, [r4, #8]
 8007f6e:	463e      	mov	r6, r7
 8007f70:	42be      	cmp	r6, r7
 8007f72:	d900      	bls.n	8007f76 <__ssputs_r+0x72>
 8007f74:	463e      	mov	r6, r7
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	4632      	mov	r2, r6
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	f000 faa8 	bl	80084d0 <memmove>
 8007f80:	68a3      	ldr	r3, [r4, #8]
 8007f82:	1b9b      	subs	r3, r3, r6
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	4433      	add	r3, r6
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	462a      	mov	r2, r5
 8007f94:	f000 fac6 	bl	8008524 <_realloc_r>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d1e0      	bne.n	8007f60 <__ssputs_r+0x5c>
 8007f9e:	6921      	ldr	r1, [r4, #16]
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	f7ff feb7 	bl	8007d14 <_free_r>
 8007fa6:	230c      	movs	r3, #12
 8007fa8:	f8ca 3000 	str.w	r3, [sl]
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fb8:	e7e9      	b.n	8007f8e <__ssputs_r+0x8a>
	...

08007fbc <_svfiprintf_r>:
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	4698      	mov	r8, r3
 8007fc2:	898b      	ldrh	r3, [r1, #12]
 8007fc4:	061b      	lsls	r3, r3, #24
 8007fc6:	b09d      	sub	sp, #116	@ 0x74
 8007fc8:	4607      	mov	r7, r0
 8007fca:	460d      	mov	r5, r1
 8007fcc:	4614      	mov	r4, r2
 8007fce:	d510      	bpl.n	8007ff2 <_svfiprintf_r+0x36>
 8007fd0:	690b      	ldr	r3, [r1, #16]
 8007fd2:	b973      	cbnz	r3, 8007ff2 <_svfiprintf_r+0x36>
 8007fd4:	2140      	movs	r1, #64	@ 0x40
 8007fd6:	f7ff ff09 	bl	8007dec <_malloc_r>
 8007fda:	6028      	str	r0, [r5, #0]
 8007fdc:	6128      	str	r0, [r5, #16]
 8007fde:	b930      	cbnz	r0, 8007fee <_svfiprintf_r+0x32>
 8007fe0:	230c      	movs	r3, #12
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fe8:	b01d      	add	sp, #116	@ 0x74
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	2340      	movs	r3, #64	@ 0x40
 8007ff0:	616b      	str	r3, [r5, #20]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff6:	2320      	movs	r3, #32
 8007ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008000:	2330      	movs	r3, #48	@ 0x30
 8008002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081a0 <_svfiprintf_r+0x1e4>
 8008006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800800a:	f04f 0901 	mov.w	r9, #1
 800800e:	4623      	mov	r3, r4
 8008010:	469a      	mov	sl, r3
 8008012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008016:	b10a      	cbz	r2, 800801c <_svfiprintf_r+0x60>
 8008018:	2a25      	cmp	r2, #37	@ 0x25
 800801a:	d1f9      	bne.n	8008010 <_svfiprintf_r+0x54>
 800801c:	ebba 0b04 	subs.w	fp, sl, r4
 8008020:	d00b      	beq.n	800803a <_svfiprintf_r+0x7e>
 8008022:	465b      	mov	r3, fp
 8008024:	4622      	mov	r2, r4
 8008026:	4629      	mov	r1, r5
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff ff6b 	bl	8007f04 <__ssputs_r>
 800802e:	3001      	adds	r0, #1
 8008030:	f000 80a7 	beq.w	8008182 <_svfiprintf_r+0x1c6>
 8008034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008036:	445a      	add	r2, fp
 8008038:	9209      	str	r2, [sp, #36]	@ 0x24
 800803a:	f89a 3000 	ldrb.w	r3, [sl]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 809f 	beq.w	8008182 <_svfiprintf_r+0x1c6>
 8008044:	2300      	movs	r3, #0
 8008046:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800804a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800804e:	f10a 0a01 	add.w	sl, sl, #1
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	9307      	str	r3, [sp, #28]
 8008056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800805a:	931a      	str	r3, [sp, #104]	@ 0x68
 800805c:	4654      	mov	r4, sl
 800805e:	2205      	movs	r2, #5
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	484e      	ldr	r0, [pc, #312]	@ (80081a0 <_svfiprintf_r+0x1e4>)
 8008066:	f7f8 f8db 	bl	8000220 <memchr>
 800806a:	9a04      	ldr	r2, [sp, #16]
 800806c:	b9d8      	cbnz	r0, 80080a6 <_svfiprintf_r+0xea>
 800806e:	06d0      	lsls	r0, r2, #27
 8008070:	bf44      	itt	mi
 8008072:	2320      	movmi	r3, #32
 8008074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008078:	0711      	lsls	r1, r2, #28
 800807a:	bf44      	itt	mi
 800807c:	232b      	movmi	r3, #43	@ 0x2b
 800807e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008082:	f89a 3000 	ldrb.w	r3, [sl]
 8008086:	2b2a      	cmp	r3, #42	@ 0x2a
 8008088:	d015      	beq.n	80080b6 <_svfiprintf_r+0xfa>
 800808a:	9a07      	ldr	r2, [sp, #28]
 800808c:	4654      	mov	r4, sl
 800808e:	2000      	movs	r0, #0
 8008090:	f04f 0c0a 	mov.w	ip, #10
 8008094:	4621      	mov	r1, r4
 8008096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809a:	3b30      	subs	r3, #48	@ 0x30
 800809c:	2b09      	cmp	r3, #9
 800809e:	d94b      	bls.n	8008138 <_svfiprintf_r+0x17c>
 80080a0:	b1b0      	cbz	r0, 80080d0 <_svfiprintf_r+0x114>
 80080a2:	9207      	str	r2, [sp, #28]
 80080a4:	e014      	b.n	80080d0 <_svfiprintf_r+0x114>
 80080a6:	eba0 0308 	sub.w	r3, r0, r8
 80080aa:	fa09 f303 	lsl.w	r3, r9, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	46a2      	mov	sl, r4
 80080b4:	e7d2      	b.n	800805c <_svfiprintf_r+0xa0>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	1d19      	adds	r1, r3, #4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	9103      	str	r1, [sp, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfbb      	ittet	lt
 80080c2:	425b      	neglt	r3, r3
 80080c4:	f042 0202 	orrlt.w	r2, r2, #2
 80080c8:	9307      	strge	r3, [sp, #28]
 80080ca:	9307      	strlt	r3, [sp, #28]
 80080cc:	bfb8      	it	lt
 80080ce:	9204      	strlt	r2, [sp, #16]
 80080d0:	7823      	ldrb	r3, [r4, #0]
 80080d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080d4:	d10a      	bne.n	80080ec <_svfiprintf_r+0x130>
 80080d6:	7863      	ldrb	r3, [r4, #1]
 80080d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080da:	d132      	bne.n	8008142 <_svfiprintf_r+0x186>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	1d1a      	adds	r2, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	9203      	str	r2, [sp, #12]
 80080e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080e8:	3402      	adds	r4, #2
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081b0 <_svfiprintf_r+0x1f4>
 80080f0:	7821      	ldrb	r1, [r4, #0]
 80080f2:	2203      	movs	r2, #3
 80080f4:	4650      	mov	r0, sl
 80080f6:	f7f8 f893 	bl	8000220 <memchr>
 80080fa:	b138      	cbz	r0, 800810c <_svfiprintf_r+0x150>
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	eba0 000a 	sub.w	r0, r0, sl
 8008102:	2240      	movs	r2, #64	@ 0x40
 8008104:	4082      	lsls	r2, r0
 8008106:	4313      	orrs	r3, r2
 8008108:	3401      	adds	r4, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	4824      	ldr	r0, [pc, #144]	@ (80081a4 <_svfiprintf_r+0x1e8>)
 8008112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008116:	2206      	movs	r2, #6
 8008118:	f7f8 f882 	bl	8000220 <memchr>
 800811c:	2800      	cmp	r0, #0
 800811e:	d036      	beq.n	800818e <_svfiprintf_r+0x1d2>
 8008120:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <_svfiprintf_r+0x1ec>)
 8008122:	bb1b      	cbnz	r3, 800816c <_svfiprintf_r+0x1b0>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	3307      	adds	r3, #7
 8008128:	f023 0307 	bic.w	r3, r3, #7
 800812c:	3308      	adds	r3, #8
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008132:	4433      	add	r3, r6
 8008134:	9309      	str	r3, [sp, #36]	@ 0x24
 8008136:	e76a      	b.n	800800e <_svfiprintf_r+0x52>
 8008138:	fb0c 3202 	mla	r2, ip, r2, r3
 800813c:	460c      	mov	r4, r1
 800813e:	2001      	movs	r0, #1
 8008140:	e7a8      	b.n	8008094 <_svfiprintf_r+0xd8>
 8008142:	2300      	movs	r3, #0
 8008144:	3401      	adds	r4, #1
 8008146:	9305      	str	r3, [sp, #20]
 8008148:	4619      	mov	r1, r3
 800814a:	f04f 0c0a 	mov.w	ip, #10
 800814e:	4620      	mov	r0, r4
 8008150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008154:	3a30      	subs	r2, #48	@ 0x30
 8008156:	2a09      	cmp	r2, #9
 8008158:	d903      	bls.n	8008162 <_svfiprintf_r+0x1a6>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0c6      	beq.n	80080ec <_svfiprintf_r+0x130>
 800815e:	9105      	str	r1, [sp, #20]
 8008160:	e7c4      	b.n	80080ec <_svfiprintf_r+0x130>
 8008162:	fb0c 2101 	mla	r1, ip, r1, r2
 8008166:	4604      	mov	r4, r0
 8008168:	2301      	movs	r3, #1
 800816a:	e7f0      	b.n	800814e <_svfiprintf_r+0x192>
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	462a      	mov	r2, r5
 8008172:	4b0e      	ldr	r3, [pc, #56]	@ (80081ac <_svfiprintf_r+0x1f0>)
 8008174:	a904      	add	r1, sp, #16
 8008176:	4638      	mov	r0, r7
 8008178:	f3af 8000 	nop.w
 800817c:	1c42      	adds	r2, r0, #1
 800817e:	4606      	mov	r6, r0
 8008180:	d1d6      	bne.n	8008130 <_svfiprintf_r+0x174>
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	065b      	lsls	r3, r3, #25
 8008186:	f53f af2d 	bmi.w	8007fe4 <_svfiprintf_r+0x28>
 800818a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800818c:	e72c      	b.n	8007fe8 <_svfiprintf_r+0x2c>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <_svfiprintf_r+0x1f0>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4638      	mov	r0, r7
 800819a:	f000 f879 	bl	8008290 <_printf_i>
 800819e:	e7ed      	b.n	800817c <_svfiprintf_r+0x1c0>
 80081a0:	080086ac 	.word	0x080086ac
 80081a4:	080086b6 	.word	0x080086b6
 80081a8:	00000000 	.word	0x00000000
 80081ac:	08007f05 	.word	0x08007f05
 80081b0:	080086b2 	.word	0x080086b2

080081b4 <_printf_common>:
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	4616      	mov	r6, r2
 80081ba:	4698      	mov	r8, r3
 80081bc:	688a      	ldr	r2, [r1, #8]
 80081be:	690b      	ldr	r3, [r1, #16]
 80081c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081c4:	4293      	cmp	r3, r2
 80081c6:	bfb8      	it	lt
 80081c8:	4613      	movlt	r3, r2
 80081ca:	6033      	str	r3, [r6, #0]
 80081cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081d0:	4607      	mov	r7, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	b10a      	cbz	r2, 80081da <_printf_common+0x26>
 80081d6:	3301      	adds	r3, #1
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	0699      	lsls	r1, r3, #26
 80081de:	bf42      	ittt	mi
 80081e0:	6833      	ldrmi	r3, [r6, #0]
 80081e2:	3302      	addmi	r3, #2
 80081e4:	6033      	strmi	r3, [r6, #0]
 80081e6:	6825      	ldr	r5, [r4, #0]
 80081e8:	f015 0506 	ands.w	r5, r5, #6
 80081ec:	d106      	bne.n	80081fc <_printf_common+0x48>
 80081ee:	f104 0a19 	add.w	sl, r4, #25
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	6832      	ldr	r2, [r6, #0]
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	dc26      	bgt.n	800824a <_printf_common+0x96>
 80081fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	3b00      	subs	r3, #0
 8008204:	bf18      	it	ne
 8008206:	2301      	movne	r3, #1
 8008208:	0692      	lsls	r2, r2, #26
 800820a:	d42b      	bmi.n	8008264 <_printf_common+0xb0>
 800820c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008210:	4641      	mov	r1, r8
 8008212:	4638      	mov	r0, r7
 8008214:	47c8      	blx	r9
 8008216:	3001      	adds	r0, #1
 8008218:	d01e      	beq.n	8008258 <_printf_common+0xa4>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	f003 0306 	and.w	r3, r3, #6
 8008222:	2b04      	cmp	r3, #4
 8008224:	bf02      	ittt	eq
 8008226:	68e5      	ldreq	r5, [r4, #12]
 8008228:	6833      	ldreq	r3, [r6, #0]
 800822a:	1aed      	subeq	r5, r5, r3
 800822c:	68a3      	ldr	r3, [r4, #8]
 800822e:	bf0c      	ite	eq
 8008230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008234:	2500      	movne	r5, #0
 8008236:	4293      	cmp	r3, r2
 8008238:	bfc4      	itt	gt
 800823a:	1a9b      	subgt	r3, r3, r2
 800823c:	18ed      	addgt	r5, r5, r3
 800823e:	2600      	movs	r6, #0
 8008240:	341a      	adds	r4, #26
 8008242:	42b5      	cmp	r5, r6
 8008244:	d11a      	bne.n	800827c <_printf_common+0xc8>
 8008246:	2000      	movs	r0, #0
 8008248:	e008      	b.n	800825c <_printf_common+0xa8>
 800824a:	2301      	movs	r3, #1
 800824c:	4652      	mov	r2, sl
 800824e:	4641      	mov	r1, r8
 8008250:	4638      	mov	r0, r7
 8008252:	47c8      	blx	r9
 8008254:	3001      	adds	r0, #1
 8008256:	d103      	bne.n	8008260 <_printf_common+0xac>
 8008258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008260:	3501      	adds	r5, #1
 8008262:	e7c6      	b.n	80081f2 <_printf_common+0x3e>
 8008264:	18e1      	adds	r1, r4, r3
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	2030      	movs	r0, #48	@ 0x30
 800826a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800826e:	4422      	add	r2, r4
 8008270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008274:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008278:	3302      	adds	r3, #2
 800827a:	e7c7      	b.n	800820c <_printf_common+0x58>
 800827c:	2301      	movs	r3, #1
 800827e:	4622      	mov	r2, r4
 8008280:	4641      	mov	r1, r8
 8008282:	4638      	mov	r0, r7
 8008284:	47c8      	blx	r9
 8008286:	3001      	adds	r0, #1
 8008288:	d0e6      	beq.n	8008258 <_printf_common+0xa4>
 800828a:	3601      	adds	r6, #1
 800828c:	e7d9      	b.n	8008242 <_printf_common+0x8e>
	...

08008290 <_printf_i>:
 8008290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	7e0f      	ldrb	r7, [r1, #24]
 8008296:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008298:	2f78      	cmp	r7, #120	@ 0x78
 800829a:	4691      	mov	r9, r2
 800829c:	4680      	mov	r8, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	469a      	mov	sl, r3
 80082a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082a6:	d807      	bhi.n	80082b8 <_printf_i+0x28>
 80082a8:	2f62      	cmp	r7, #98	@ 0x62
 80082aa:	d80a      	bhi.n	80082c2 <_printf_i+0x32>
 80082ac:	2f00      	cmp	r7, #0
 80082ae:	f000 80d2 	beq.w	8008456 <_printf_i+0x1c6>
 80082b2:	2f58      	cmp	r7, #88	@ 0x58
 80082b4:	f000 80b9 	beq.w	800842a <_printf_i+0x19a>
 80082b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082c0:	e03a      	b.n	8008338 <_printf_i+0xa8>
 80082c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082c6:	2b15      	cmp	r3, #21
 80082c8:	d8f6      	bhi.n	80082b8 <_printf_i+0x28>
 80082ca:	a101      	add	r1, pc, #4	@ (adr r1, 80082d0 <_printf_i+0x40>)
 80082cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d0:	08008329 	.word	0x08008329
 80082d4:	0800833d 	.word	0x0800833d
 80082d8:	080082b9 	.word	0x080082b9
 80082dc:	080082b9 	.word	0x080082b9
 80082e0:	080082b9 	.word	0x080082b9
 80082e4:	080082b9 	.word	0x080082b9
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	080082b9 	.word	0x080082b9
 80082f0:	080082b9 	.word	0x080082b9
 80082f4:	080082b9 	.word	0x080082b9
 80082f8:	080082b9 	.word	0x080082b9
 80082fc:	0800843d 	.word	0x0800843d
 8008300:	08008367 	.word	0x08008367
 8008304:	080083f7 	.word	0x080083f7
 8008308:	080082b9 	.word	0x080082b9
 800830c:	080082b9 	.word	0x080082b9
 8008310:	0800845f 	.word	0x0800845f
 8008314:	080082b9 	.word	0x080082b9
 8008318:	08008367 	.word	0x08008367
 800831c:	080082b9 	.word	0x080082b9
 8008320:	080082b9 	.word	0x080082b9
 8008324:	080083ff 	.word	0x080083ff
 8008328:	6833      	ldr	r3, [r6, #0]
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6032      	str	r2, [r6, #0]
 8008330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008338:	2301      	movs	r3, #1
 800833a:	e09d      	b.n	8008478 <_printf_i+0x1e8>
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	6820      	ldr	r0, [r4, #0]
 8008340:	1d19      	adds	r1, r3, #4
 8008342:	6031      	str	r1, [r6, #0]
 8008344:	0606      	lsls	r6, r0, #24
 8008346:	d501      	bpl.n	800834c <_printf_i+0xbc>
 8008348:	681d      	ldr	r5, [r3, #0]
 800834a:	e003      	b.n	8008354 <_printf_i+0xc4>
 800834c:	0645      	lsls	r5, r0, #25
 800834e:	d5fb      	bpl.n	8008348 <_printf_i+0xb8>
 8008350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008354:	2d00      	cmp	r5, #0
 8008356:	da03      	bge.n	8008360 <_printf_i+0xd0>
 8008358:	232d      	movs	r3, #45	@ 0x2d
 800835a:	426d      	negs	r5, r5
 800835c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008360:	4859      	ldr	r0, [pc, #356]	@ (80084c8 <_printf_i+0x238>)
 8008362:	230a      	movs	r3, #10
 8008364:	e011      	b.n	800838a <_printf_i+0xfa>
 8008366:	6821      	ldr	r1, [r4, #0]
 8008368:	6833      	ldr	r3, [r6, #0]
 800836a:	0608      	lsls	r0, r1, #24
 800836c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008370:	d402      	bmi.n	8008378 <_printf_i+0xe8>
 8008372:	0649      	lsls	r1, r1, #25
 8008374:	bf48      	it	mi
 8008376:	b2ad      	uxthmi	r5, r5
 8008378:	2f6f      	cmp	r7, #111	@ 0x6f
 800837a:	4853      	ldr	r0, [pc, #332]	@ (80084c8 <_printf_i+0x238>)
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	bf14      	ite	ne
 8008380:	230a      	movne	r3, #10
 8008382:	2308      	moveq	r3, #8
 8008384:	2100      	movs	r1, #0
 8008386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800838a:	6866      	ldr	r6, [r4, #4]
 800838c:	60a6      	str	r6, [r4, #8]
 800838e:	2e00      	cmp	r6, #0
 8008390:	bfa2      	ittt	ge
 8008392:	6821      	ldrge	r1, [r4, #0]
 8008394:	f021 0104 	bicge.w	r1, r1, #4
 8008398:	6021      	strge	r1, [r4, #0]
 800839a:	b90d      	cbnz	r5, 80083a0 <_printf_i+0x110>
 800839c:	2e00      	cmp	r6, #0
 800839e:	d04b      	beq.n	8008438 <_printf_i+0x1a8>
 80083a0:	4616      	mov	r6, r2
 80083a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083a6:	fb03 5711 	mls	r7, r3, r1, r5
 80083aa:	5dc7      	ldrb	r7, [r0, r7]
 80083ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b0:	462f      	mov	r7, r5
 80083b2:	42bb      	cmp	r3, r7
 80083b4:	460d      	mov	r5, r1
 80083b6:	d9f4      	bls.n	80083a2 <_printf_i+0x112>
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d10b      	bne.n	80083d4 <_printf_i+0x144>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07df      	lsls	r7, r3, #31
 80083c0:	d508      	bpl.n	80083d4 <_printf_i+0x144>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	6861      	ldr	r1, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	bfde      	ittt	le
 80083ca:	2330      	movle	r3, #48	@ 0x30
 80083cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083d4:	1b92      	subs	r2, r2, r6
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	f8cd a000 	str.w	sl, [sp]
 80083dc:	464b      	mov	r3, r9
 80083de:	aa03      	add	r2, sp, #12
 80083e0:	4621      	mov	r1, r4
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7ff fee6 	bl	80081b4 <_printf_common>
 80083e8:	3001      	adds	r0, #1
 80083ea:	d14a      	bne.n	8008482 <_printf_i+0x1f2>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083f0:	b004      	add	sp, #16
 80083f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	f043 0320 	orr.w	r3, r3, #32
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	4833      	ldr	r0, [pc, #204]	@ (80084cc <_printf_i+0x23c>)
 8008400:	2778      	movs	r7, #120	@ 0x78
 8008402:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	6831      	ldr	r1, [r6, #0]
 800840a:	061f      	lsls	r7, r3, #24
 800840c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008410:	d402      	bmi.n	8008418 <_printf_i+0x188>
 8008412:	065f      	lsls	r7, r3, #25
 8008414:	bf48      	it	mi
 8008416:	b2ad      	uxthmi	r5, r5
 8008418:	6031      	str	r1, [r6, #0]
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	bf44      	itt	mi
 800841e:	f043 0320 	orrmi.w	r3, r3, #32
 8008422:	6023      	strmi	r3, [r4, #0]
 8008424:	b11d      	cbz	r5, 800842e <_printf_i+0x19e>
 8008426:	2310      	movs	r3, #16
 8008428:	e7ac      	b.n	8008384 <_printf_i+0xf4>
 800842a:	4827      	ldr	r0, [pc, #156]	@ (80084c8 <_printf_i+0x238>)
 800842c:	e7e9      	b.n	8008402 <_printf_i+0x172>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	f023 0320 	bic.w	r3, r3, #32
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	e7f6      	b.n	8008426 <_printf_i+0x196>
 8008438:	4616      	mov	r6, r2
 800843a:	e7bd      	b.n	80083b8 <_printf_i+0x128>
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	6825      	ldr	r5, [r4, #0]
 8008440:	6961      	ldr	r1, [r4, #20]
 8008442:	1d18      	adds	r0, r3, #4
 8008444:	6030      	str	r0, [r6, #0]
 8008446:	062e      	lsls	r6, r5, #24
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	d501      	bpl.n	8008450 <_printf_i+0x1c0>
 800844c:	6019      	str	r1, [r3, #0]
 800844e:	e002      	b.n	8008456 <_printf_i+0x1c6>
 8008450:	0668      	lsls	r0, r5, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0x1bc>
 8008454:	8019      	strh	r1, [r3, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	4616      	mov	r6, r2
 800845c:	e7bc      	b.n	80083d8 <_printf_i+0x148>
 800845e:	6833      	ldr	r3, [r6, #0]
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	6032      	str	r2, [r6, #0]
 8008464:	681e      	ldr	r6, [r3, #0]
 8008466:	6862      	ldr	r2, [r4, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	4630      	mov	r0, r6
 800846c:	f7f7 fed8 	bl	8000220 <memchr>
 8008470:	b108      	cbz	r0, 8008476 <_printf_i+0x1e6>
 8008472:	1b80      	subs	r0, r0, r6
 8008474:	6060      	str	r0, [r4, #4]
 8008476:	6863      	ldr	r3, [r4, #4]
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	2300      	movs	r3, #0
 800847c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008480:	e7aa      	b.n	80083d8 <_printf_i+0x148>
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	4632      	mov	r2, r6
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	47d0      	blx	sl
 800848c:	3001      	adds	r0, #1
 800848e:	d0ad      	beq.n	80083ec <_printf_i+0x15c>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	079b      	lsls	r3, r3, #30
 8008494:	d413      	bmi.n	80084be <_printf_i+0x22e>
 8008496:	68e0      	ldr	r0, [r4, #12]
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	4298      	cmp	r0, r3
 800849c:	bfb8      	it	lt
 800849e:	4618      	movlt	r0, r3
 80084a0:	e7a6      	b.n	80083f0 <_printf_i+0x160>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4632      	mov	r2, r6
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	47d0      	blx	sl
 80084ac:	3001      	adds	r0, #1
 80084ae:	d09d      	beq.n	80083ec <_printf_i+0x15c>
 80084b0:	3501      	adds	r5, #1
 80084b2:	68e3      	ldr	r3, [r4, #12]
 80084b4:	9903      	ldr	r1, [sp, #12]
 80084b6:	1a5b      	subs	r3, r3, r1
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dcf2      	bgt.n	80084a2 <_printf_i+0x212>
 80084bc:	e7eb      	b.n	8008496 <_printf_i+0x206>
 80084be:	2500      	movs	r5, #0
 80084c0:	f104 0619 	add.w	r6, r4, #25
 80084c4:	e7f5      	b.n	80084b2 <_printf_i+0x222>
 80084c6:	bf00      	nop
 80084c8:	080086bd 	.word	0x080086bd
 80084cc:	080086ce 	.word	0x080086ce

080084d0 <memmove>:
 80084d0:	4288      	cmp	r0, r1
 80084d2:	b510      	push	{r4, lr}
 80084d4:	eb01 0402 	add.w	r4, r1, r2
 80084d8:	d902      	bls.n	80084e0 <memmove+0x10>
 80084da:	4284      	cmp	r4, r0
 80084dc:	4623      	mov	r3, r4
 80084de:	d807      	bhi.n	80084f0 <memmove+0x20>
 80084e0:	1e43      	subs	r3, r0, #1
 80084e2:	42a1      	cmp	r1, r4
 80084e4:	d008      	beq.n	80084f8 <memmove+0x28>
 80084e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ee:	e7f8      	b.n	80084e2 <memmove+0x12>
 80084f0:	4402      	add	r2, r0
 80084f2:	4601      	mov	r1, r0
 80084f4:	428a      	cmp	r2, r1
 80084f6:	d100      	bne.n	80084fa <memmove+0x2a>
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008502:	e7f7      	b.n	80084f4 <memmove+0x24>

08008504 <_sbrk_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d06      	ldr	r5, [pc, #24]	@ (8008520 <_sbrk_r+0x1c>)
 8008508:	2300      	movs	r3, #0
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	602b      	str	r3, [r5, #0]
 8008510:	f7f9 fe1e 	bl	8002150 <_sbrk>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_sbrk_r+0x1a>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_sbrk_r+0x1a>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	200006f8 	.word	0x200006f8

08008524 <_realloc_r>:
 8008524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	4680      	mov	r8, r0
 800852a:	4615      	mov	r5, r2
 800852c:	460c      	mov	r4, r1
 800852e:	b921      	cbnz	r1, 800853a <_realloc_r+0x16>
 8008530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	4611      	mov	r1, r2
 8008536:	f7ff bc59 	b.w	8007dec <_malloc_r>
 800853a:	b92a      	cbnz	r2, 8008548 <_realloc_r+0x24>
 800853c:	f7ff fbea 	bl	8007d14 <_free_r>
 8008540:	2400      	movs	r4, #0
 8008542:	4620      	mov	r0, r4
 8008544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008548:	f000 f81a 	bl	8008580 <_malloc_usable_size_r>
 800854c:	4285      	cmp	r5, r0
 800854e:	4606      	mov	r6, r0
 8008550:	d802      	bhi.n	8008558 <_realloc_r+0x34>
 8008552:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008556:	d8f4      	bhi.n	8008542 <_realloc_r+0x1e>
 8008558:	4629      	mov	r1, r5
 800855a:	4640      	mov	r0, r8
 800855c:	f7ff fc46 	bl	8007dec <_malloc_r>
 8008560:	4607      	mov	r7, r0
 8008562:	2800      	cmp	r0, #0
 8008564:	d0ec      	beq.n	8008540 <_realloc_r+0x1c>
 8008566:	42b5      	cmp	r5, r6
 8008568:	462a      	mov	r2, r5
 800856a:	4621      	mov	r1, r4
 800856c:	bf28      	it	cs
 800856e:	4632      	movcs	r2, r6
 8008570:	f7ff fbc2 	bl	8007cf8 <memcpy>
 8008574:	4621      	mov	r1, r4
 8008576:	4640      	mov	r0, r8
 8008578:	f7ff fbcc 	bl	8007d14 <_free_r>
 800857c:	463c      	mov	r4, r7
 800857e:	e7e0      	b.n	8008542 <_realloc_r+0x1e>

08008580 <_malloc_usable_size_r>:
 8008580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008584:	1f18      	subs	r0, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfbc      	itt	lt
 800858a:	580b      	ldrlt	r3, [r1, r0]
 800858c:	18c0      	addlt	r0, r0, r3
 800858e:	4770      	bx	lr

08008590 <_init>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr

0800859c <_fini>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr
